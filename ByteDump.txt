******************************* Segment: Default *******************************
[Header]
0801: 0c 08     -         .word bend
0803: 0d 00     -         .byte $0d, $00				//;line number
0805: 9e        -         .byte $9E					//;SYS
0806: 20        -         .byte $20					//;space
0807: 32 30 36 34                                      -         .byte $32,$30,$36,$34		//;start 2064
080b: 00        -         .byte $00					//;end of line
080c: 00 00     - bend:   .byte $00, $00				//;end of basic program

[Main]
0810: 78        -         sei							//set interrupt
0811: a9 7f     -         lda #$7f
0813: 8d 0d dc  -         sta CIA_ICR
0816: 8d 0d dd  -         sta CIA2_ICR
0819: ad 0d dc  -         lda CIA_ICR
081c: ad 0d dd  -         lda CIA2_ICR
081f: ad 1a d0  -         lda INTERRUPT_MASK_REGISTER	
0822: 09 01     -         ora #$01
0824: 8d 1a d0  -         sta INTERRUPT_MASK_REGISTER
0827: ad 11 d0  -         lda CONTROL_REGISTER1
082a: 29 7f     -         and #$7f
082c: 8d 11 d0  -         sta CONTROL_REGISTER1
082f: a9 32     -         lda #startRaster
0831: 8d 12 d0  -         sta RASTER_COUNTER
0834: a9 dc     -         lda #<address
0836: 8d 14 03  -         sta IRQVEC
0839: a9 0b     -         lda #>address
083b: 8d 15 03  -         sta	IRQVEC+1
083e: 58        -         cli
083f: a9 ff     - begin,init:lda #$ff
0841: 8d 0e d4  -         sta FV3LO
0844: 8d 0f d4  -         sta FV3HI
0847: a9 80     -         lda #$80
0849: 8d 12 d4  -         sta CTRLREG_V3
084c: a9 26     -         lda #<end	
084e: 85 fd     -         sta ZP3
0850: a9 00     -         lda #>end
0852: 85 fe     -         sta ZP4
0854: a9 01     -         lda #<start
0856: 85 fb     -         sta ZP1
0858: a9 00     -         lda #>start
085a: 85 fc     -         sta ZP2
085c: 20 38 09  -         jsr rnd_XY
085f: a5 14     -         lda X
0861: 8d 12 0c  -         sta Y
0864: a9 17     -         lda #<end	
0866: 85 fd     -         sta ZP3
0868: a9 00     -         lda #>end
086a: 85 fe     -         sta ZP4
086c: a9 01     -         lda #<start
086e: 85 fb     -         sta ZP1
0870: a9 00     -         lda #>start
0872: 85 fc     -         sta ZP2
0874: 20 38 09  -         jsr rnd_XY
0877: a5 14     -         lda X
0879: 8d 13 0c  -         sta Y
087c: a9 00     -         lda #<addr
087e: 8d c0 0b  -         sta X
0881: a9 04     -         lda #>addr
0883: 8d c1 0b  -         sta X+1
0886: ad 12 0c  -         lda X
0889: 8d c2 0b  -         sta Y
088c: ad 13 0c  -         lda X + 1
088f: 8d c3 0b  -         sta Y + 1
0892: a9 00     -         lda #<addr
0894: 8d c6 0b  -         sta X
0897: a9 c0     -         lda #>addr
0899: 8d c7 0b  -         sta X+1
089c: 20 6c 0b  -         jsr MAZE
089f: a5 c5     - end,key:lda LSTX		//get character in A
08a1: c9 40     -         cmp #64			//no key
08a3: f0 fa     -         beq key
08a5: 60        -         rts

[Imports]
08a6: 20 d2 ff  - imports,printSequence:jsr CHROUT
08a9: ca        -         dex
08aa: d0 fa     -         bne printSequence
08ac: 60        -         rts
08ad: 86 fb     - printString:stx ZP1			//lo
08af: 84 fc     -         sty	ZP2			//hi
08b1: a0 00     - next:   ldy #$00
08b3: b1 fb     -         lda (ZP1),y		//load character
08b5: c9 00     -         cmp #$00
08b7: f0 0d     -         beq	out			//null terminator
08b9: 20 d2 ff  -         jsr CHROUT
08bc: 18        -         clc
08bd: e6 fb     -         inc	ZP1
08bf: d0 f0     -         bne	next
08c1: e6 fc     -         inc ZP2
08c3: 4c b1 08  -         jmp next
08c6: 60        - out:    rts
08c7: 86 fb     - lenString:stx ZP1			//lo
08c9: 84 fc     -         sty	ZP2			//hi
08cb: a0 00     -         ldy #$00		
08cd: 84 fd     -         sty ZP3			//counter
08cf: b1 fb     - next:   lda (ZP1),y		//load character
08d1: c9 00     -         cmp #$00
08d3: f0 04     -         beq	out			//null terminator
08d5: c8        -         iny
08d6: 4c cf 08  -         jmp next
08d9: 98        - out:    tya
08da: 60        -         rts
08db: d8        - SPLICE: cld
08dc: c6 48     -         dec VAR_B	//array length - 1
08de: a4 47     -         ldy VAR_A	//index
08e0: c4 48     - loop:   cpy VAR_B
08e2: b0 35     -         bcs out 	
08e4: a2 00     -         ldx #0			//number of properties (data_size), start from 0
08e6: c8        - each:   iny		
08e7: 84 40     -         sty TEMPY
08e9: a5 49     -         lda	VAR_C 		//data size
08eb: 20 1a 09  -         jsr MUL_Y_A
08ee: 84 02     -         sty ZP0
08f0: 8a        -         txa
08f1: 18        -         clc
08f2: 65 02     -         adc ZP0
08f4: a8        -         tay
08f5: b1 43     -         lda (BV1),y
08f7: 85 41     -         sta TEMPA1
08f9: a4 40     -         ldy TEMPY
08fb: 88        -         dey
08fc: 84 40     -         sty TEMPY
08fe: a5 49     -         lda	VAR_C 		//data size
0900: 20 1a 09  -         jsr MUL_Y_A
0903: 84 02     -         sty ZP0
0905: 8a        -         txa
0906: 18        -         clc
0907: 65 02     -         adc ZP0
0909: a8        -         tay
090a: a5 41     -         lda TEMPA1
090c: 91 43     -         sta (BV1),y
090e: e8        -         inx
090f: e4 49     -         cpx VAR_C		//all props? less than VAR_C ?
0911: a4 40     -         ldy TEMPY
0913: 90 d1     -         bcc each
0915: c8        -         iny
0916: 4c e0 08  -         jmp loop
0919: 60        - out:    rts
091a: c0 00     - MUL_Y_A,multiply:cpy #00
091c: f0 18     -         beq end
091e: 88        -         dey
091f: 8c 2c 09  -         sty mod+1
0922: 4a        -         lsr
0923: 85 02     -         sta ZP0
0925: a9 00     -         lda #00
0927: a0 08     -         ldy #$08
0929: 90 02     - loop:   bcc skip
092b: 69 00     - mod:    adc #0
092d: 6a        - skip:   ror
092e: 66 02     -         ror ZP0
0930: 88        -         dey
0931: d0 f6     -         bne loop
0933: a4 02     -         ldy ZP0
0935: 60        -         rts
0936: 98        - end:    tya
0937: 60        -         rts

[SYSTEM_data]
0938: a9 00     - SYS_data,rnd_XY:lda #00
093a: 20 9a e0  -         jsr RND
093d: e6 fd     -         inc ZP3
093f: d0 02     -         bne skip1
0941: e6 fe     -         inc ZP4
0943: a5 fd     - skip1:  lda ZP3
0945: 38        -         sec
0946: e5 fb     -         sbc ZP1
0948: 85 fd     -         sta ZP3
094a: a5 fe     -         lda ZP4
094c: e5 fc     -         sbc ZP2
094e: 85 fe     -         sta ZP4			
0950: a4 fd     - toFloat:ldy ZP3
0952: a5 fe     -         lda ZP4
0954: 20 91 b3  -         jsr GIVAYF //A(h),Y(L) - FAC
0957: a2 7e     -         ldx #<flt
0959: a0 09     -         ldy #>flt
095b: 20 d4 bb  -         jsr MOVMF	//store FAC to flt
095e: a9 7f     -         lda #$7f
0960: 20 9a e0  -         jsr RND
0963: a9 7e     -         lda #<flt
0965: a0 09     -         ldy #>flt
0967: 20 28 ba  -         jsr FMULT
096a: 20 cc bc  -         jsr FAINT
096d: 20 bf b1  -         jsr AYINT
0970: a5 65     -         lda $65			
0972: 18        -         clc
0973: 65 fb     -         adc ZP1
0975: 85 14     -         sta WINT
0977: a5 64     -         lda $64
0979: 65 fc     -         adc ZP2
097b: 85 15     -         sta WINT+1
097d: 60        - over:   rts

[Data RND]
097e: 00 00 00 00 00                                   - dataRND,flt:.byte 0,0,0,0,0

[Grid_Constants]
0983: 00 ff     - Grid_Constants,BASIC_DIRS,UP:.byte 	0, -1
0985: 00 01     - DOWN:   .byte 	0, 1
0987: ff 00     - LEFT:   .byte	-1, 0
0989: 01 00     - RIGHT:  .byte 	1,0
098b: ad c0 0b  - MAZE_FILL:lda X
098e: 85 fb     -         sta Y
0990: ad c1 0b  -         lda X + 1
0993: 85 fc     -         sta Y + 1
0995: a9 e0     -         lda	#WALL
0997: a2 04     -         ldx #4
0999: a0 00     - block:  ldy #0
099b: 91 fb     - fill:   sta (ZP1),y
099d: c8        -         iny
099e: d0 fb     -         bne fill
09a0: e6 fc     -         inc ZP2
09a2: ca        -         dex
09a3: d0 f4     -         bne block
09a5: 60        -         rts
09a6: ad c0 0b  - MAZE_DOT:lda X
09a9: 85 fb     -         sta Y
09ab: ad c1 0b  -         lda X + 1
09ae: 85 fc     -         sta Y + 1
09b0: a9 00     -         lda #0
09b2: 85 fe     -         sta ZP4				
09b4: ad c3 0b  -         lda grid+1		
09b7: 85 fd     -         sta ZP3
09b9: a0 03     -         ldy #03
09bb: 06 fd     - mul8:   asl X
09bd: 26 fe     -         rol X+1	
09bf: 88        -         dey
09c0: d0 f9     -         bne mul8
09c2: 18        -         clc
09c3: a5 fb     -         lda X
09c5: 65 fd     -         adc Y
09c7: 85 fb     -         sta X
09c9: 90 02     -         bcc skip
09cb: e6 fc     -         inc X+1
09cd: 18        - skip:   clc
09ce: a5 fc     -         lda X+1
09d0: 65 fe     -         adc Y+1
09d2: 85 fc     -         sta X+1	
09d4: a0 02     -         ldy #02	
09d6: 06 fd     - mul32:  asl X
09d8: 26 fe     -         rol X+1	
09da: 88        -         dey
09db: d0 f9     -         bne mul32
09dd: 18        -         clc
09de: a5 fb     -         lda X
09e0: 65 fd     -         adc Y
09e2: 85 fb     -         sta X
09e4: 90 02     -         bcc skip
09e6: e6 fc     -         inc X+1
09e8: 18        - skip:   clc
09e9: a5 fc     -         lda X+1
09eb: 65 fe     -         adc Y+1
09ed: 85 fc     -         sta X+1	
09ef: 18        -         clc
09f0: a5 fb     -         lda X
09f2: 6d c2 0b  -         adc y	
09f5: 85 fb     -         sta X
09f7: 90 02     -         bcc out+2
09f9: e6 fc     - out:    inc X+1
09fb: a9 20     -         lda #DOT
09fd: a0 00     -         ldy #0
09ff: 91 fb     -         sta (ZP1),y
0a01: 60        -         rts
0a02: d8        - POINTERS_FROM_START:cld
0a03: a9 c8     -         lda #<addr
0a05: 85 fb     -         sta X
0a07: a9 0b     -         lda #>addr
0a09: 85 fc     -         sta X+1
0a0b: a9 83     -         lda #<addr
0a0d: 85 fd     -         sta X
0a0f: a9 09     -         lda #>addr
0a11: 85 fe     -         sta X+1
0a13: a2 03     -         ldx #03
0a15: 8a        - add:    txa
0a16: 0a        -         asl
0a17: a8        -         tay		
0a18: 18        -         clc
0a19: ad c2 0b  -         lda maze_start
0a1c: 71 fd     -         adc (ZP3),y
0a1e: 91 fb     -         sta (ZP1),y
0a20: c8        -         iny
0a21: 18        -         clc
0a22: ad c3 0b  -         lda maze_start+1
0a25: 71 fd     -         adc (ZP3),y
0a27: 91 fb     -         sta (ZP1),y
0a29: ca        -         dex
0a2a: 10 e9     -         bpl add
0a2c: a9 d0     -         lda #<addr
0a2e: 85 fb     -         sta X
0a30: a9 0b     -         lda #>addr
0a32: 85 fc     -         sta X+1
0a34: a2 03     -         ldx #03
0a36: 8a        - copy:   txa
0a37: 0a        -         asl
0a38: a8        -         tay	
0a39: b1 fd     -         lda (ZP3),y
0a3b: 91 fb     -         sta (ZP1),y
0a3d: c8        -         iny
0a3e: b1 fd     -         lda (ZP3),y
0a40: 91 fb     -         sta (ZP1),y
0a42: ca        -         dex
0a43: 10 f1     -         bpl copy
0a45: a9 04     -         lda #04
0a47: 8d d8 0b  -         sta candidates_length
0a4a: 60        -         rts
0a4b: d8        - FILTER_IF_OUT:cld
0a4c: a9 c8     -         lda #<addr
0a4e: 85 fb     -         sta X
0a50: a9 0b     -         lda #>addr
0a52: 85 fc     -         sta X+1
0a54: ad d8 0b  -         lda candidates_length
0a57: c9 00     -         cmp #0
0a59: f0 1f     -         beq out
0a5b: aa        -         tax
0a5c: ca        -         dex
0a5d: 8a        - each:   txa
0a5e: 0a        -         asl
0a5f: a8        -         tay
0a60: 18        -         clc
0a61: b1 fb     -         lda (ZP1),y	
0a63: c9 27     -         cmp #MAX_X+1
0a65: b0 14     -         bcs shift
0a67: c9 01     -         cmp #MIN_X
0a69: 90 10     -         bcc shift
0a6b: c8        -         iny
0a6c: 18        -         clc
0a6d: b1 fb     -         lda (ZP1),y
0a6f: c9 18     -         cmp #MAX_Y+1
0a71: b0 08     -         bcs shift
0a73: c9 01     -         cmp #MIN_Y
0a75: 90 04     -         bcc shift
0a77: ca        - cont:   dex
0a78: 10 e3     -         bpl each
0a7a: 60        - out:    rts
0a7b: 86 3f     - shift:  stx TEMPX									//save x							
0a7d: 86 47     -         stx VAR_A									//set index to VAR_A
0a7f: ad d8 0b  -         lda X
0a82: 85 48     -         sta Y
0a84: 84 4a     -         sty VAR_D									//save y
0a86: a9 c8     -         lda #<addr
0a88: 85 43     -         sta X
0a8a: a9 0b     -         lda #>addr
0a8c: 85 44     -         sta X+1
0a8e: a9 02     -         lda #data_size
0a90: 85 49     -         sta VAR_C
0a92: 20 db 08  -         jsr SPLICE
0a95: a4 4a     -         ldy VAR_D									//restore y
0a97: ad d8 0b  -         lda X
0a9a: 85 48     -         sta Y
0a9c: a9 d0     -         lda #<addr
0a9e: 85 43     -         sta X
0aa0: a9 0b     -         lda #>addr
0aa2: 85 44     -         sta X+1
0aa4: a9 02     -         lda #data_size
0aa6: 85 49     -         sta VAR_C
0aa8: 20 db 08  -         jsr SPLICE
0aab: ce d8 0b  -         dec candidates_length						//dec array length
0aae: a6 3f     -         ldx TEMPX									//restore x
0ab0: 4c 77 0a  -         jmp cont									//return to loop
0ab3: d8        - FILTER_IF_DOT:cld
0ab4: a9 c8     -         lda #<addr
0ab6: 85 43     -         sta X
0ab8: a9 0b     -         lda #>addr
0aba: 85 44     -         sta X+1
0abc: ad d8 0b  -         lda candidates_length
0abf: c9 00     -         cmp #0
0ac1: f0 70     -         beq out
0ac3: aa        -         tax											//number of grids yet to check
0ac4: ca        -         dex
0ac5: 8a        - each:   txa
0ac6: 0a        -         asl
0ac7: a8        -         tay
0ac8: b1 43     -         lda (BV1),y
0aca: 8d c4 0b  -         sta grid_pointer
0acd: c8        -         iny
0ace: b1 43     -         lda (BV1),y
0ad0: 8d c5 0b  -         sta grid_pointer+1
0ad3: ad c0 0b  -         lda X
0ad6: 85 fb     -         sta Y
0ad8: ad c1 0b  -         lda X + 1
0adb: 85 fc     -         sta Y + 1
0add: a9 00     -         lda #0
0adf: 85 fe     -         sta ZP4				
0ae1: ad c5 0b  -         lda grid+1		
0ae4: 85 fd     -         sta ZP3
0ae6: a0 03     -         ldy #03
0ae8: 06 fd     - mul8:   asl X
0aea: 26 fe     -         rol X+1	
0aec: 88        -         dey
0aed: d0 f9     -         bne mul8
0aef: 18        -         clc
0af0: a5 fb     -         lda X
0af2: 65 fd     -         adc Y
0af4: 85 fb     -         sta X
0af6: 90 02     -         bcc skip
0af8: e6 fc     -         inc X+1
0afa: 18        - skip:   clc
0afb: a5 fc     -         lda X+1
0afd: 65 fe     -         adc Y+1
0aff: 85 fc     -         sta X+1	
0b01: a0 02     -         ldy #02	
0b03: 06 fd     - mul32:  asl X
0b05: 26 fe     -         rol X+1	
0b07: 88        -         dey
0b08: d0 f9     -         bne mul32
0b0a: 18        -         clc
0b0b: a5 fb     -         lda X
0b0d: 65 fd     -         adc Y
0b0f: 85 fb     -         sta X
0b11: 90 02     -         bcc skip
0b13: e6 fc     -         inc X+1
0b15: 18        - skip:   clc
0b16: a5 fc     -         lda X+1
0b18: 65 fe     -         adc Y+1
0b1a: 85 fc     -         sta X+1	
0b1c: 18        -         clc
0b1d: a5 fb     -         lda X
0b1f: 6d c4 0b  -         adc y	
0b22: 85 fb     -         sta X
0b24: 90 02     -         bcc out+2
0b26: e6 fc     - out:    inc X+1
0b28: a0 00     -         ldy #0
0b2a: b1 fb     -         lda (ZP1),y
0b2c: c9 20     -         cmp #DOT
0b2e: f0 04     -         beq shift
0b30: ca        - cont:   dex
0b31: 10 92     -         bpl each
0b33: 60        - out:    rts
0b34: 86 3f     - shift:  stx TEMPX									//save x
0b36: 86 47     -         stx VAR_A									//set index to VAR_A
0b38: ad d8 0b  -         lda X
0b3b: 85 48     -         sta Y
0b3d: 84 4a     -         sty VAR_D									//save y
0b3f: a9 c8     -         lda #<addr
0b41: 85 43     -         sta X
0b43: a9 0b     -         lda #>addr
0b45: 85 44     -         sta X+1
0b47: a9 02     -         lda #data_size
0b49: 85 49     -         sta VAR_C
0b4b: 20 db 08  -         jsr SPLICE
0b4e: a4 4a     -         ldy VAR_D									//restore y
0b50: ad d8 0b  -         lda X
0b53: 85 48     -         sta Y
0b55: a9 d0     -         lda #<addr
0b57: 85 43     -         sta X
0b59: a9 0b     -         lda #>addr
0b5b: 85 44     -         sta X+1
0b5d: a9 02     -         lda #data_size
0b5f: 85 49     -         sta VAR_C
0b61: 20 db 08  -         jsr SPLICE
0b64: ce d8 0b  -         dec candidates_length						//dec array length
0b67: a6 3f     -         ldx TEMPX									//restore x
0b69: 4c 30 0b  -         jmp cont									//return to loop
0b6c: 20 8b 09  - MAZE:   jsr MAZE_FILL
0b6f: 20 a6 09  - outer,P_LOOP:jsr MAZE_DOT
0b72: 20 02 0a  -         jsr POINTERS_FROM_START
0b75: 20 4b 0a  -         jsr FILTER_IF_OUT
0b78: 20 b3 0a  -         jsr FILTER_IF_DOT
0b7b: ad d8 0b  -         lda candidates_length						//check how many we have
0b7e: c9 00     -         cmp #00										//if zero break;
0b80: f0 3d     -         beq S_LOOP									//goto stack loop
0b82: c9 01     -         cmp #01										//if just one
0b84: b0 05     -         bcs then									//if not go to else/then
0b86: a9 00     -         lda #0										//index in A									
0b88: 4c a7 0b  -         jmp skip_else
0b8b: ad d8 0b  - then:   lda candidates_length
0b8e: aa        -         tax
0b8f: ca        -         dex
0b90: 86 02     -         stx ZP0
0b92: a9 02     -         lda #<end	
0b94: 85 fd     -         sta ZP3
0b96: a9 00     -         lda #>end
0b98: 85 fe     -         sta ZP4
0b9a: a9 00     -         lda #<start
0b9c: 85 fb     -         sta ZP1
0b9e: a9 00     -         lda #>start
0ba0: 85 fc     -         sta ZP2
0ba2: 20 38 09  -         jsr rnd_XY
0ba5: a5 14     -         lda WINT
0ba7: 0a        - skip_else:asl 										//datasize=2	
0ba8: a8        -         tay											//offset in y
0ba9: a9 c8     -         lda #<addr
0bab: 85 43     -         sta X
0bad: a9 0b     -         lda #>addr
0baf: 85 44     -         sta X+1
0bb1: b1 43     -         lda (BV1),y
0bb3: 8d c2 0b  -         sta maze_start
0bb6: c8        -         iny
0bb7: b1 43     -         lda (BV1),y
0bb9: 8d c3 0b  -         sta maze_start+1
0bbc: 4c 6f 0b  -         jmp P_LOOP
0bbf: 60        - S_LOOP,quit:rts

[MAZE Memory]
0bc0: 40 00     - MAZE_memory,maze_memory_alloc:.word $0040 	//screen by default, safe
0bc2: 00 00     - maze_start:.word 0
0bc4: 00 00     - grid_pointer:.word 0
0bc6: 00 00     - stack_pointer:.word 0
0bc8: 00 00     - candidates:.fill 2,0
0bca: 00 00     -         .fill 2,0
0bcc: 00 00     -         .fill 2,0
0bce: 00 00     -         .fill 2,0
0bd0: 00 00     - candidates_vectors:.fill 2,0
0bd2: 00 00     -         .fill 2,0
0bd4: 00 00     -         .fill 2,0
0bd6: 00 00     -         .fill 2,0
0bd8: 00        - candidates_length:.byte 0
0bd9: 2e 20     - debug:  .text ". "
0bdb: 00        -         brk

[Subroutines]
0bdc: ad 11 0c  - subs,irqcode:lda modeflag
0bdf: f0 03     -         beq mode1
0be1: 4c f9 0b  -         jmp mode2
0be4: a9 01     - mode1:  lda #$01
0be6: 8d 11 0c  -         sta modeflag
0be9: a9 0e     -         lda #LIGHTBLUE
0beb: 8d 20 d0  -         sta BORDER
0bee: a9 32     -         lda #startRaster
0bf0: 8d 12 d0  -         sta RASTER_COUNTER
0bf3: 0e 19 d0  -         asl INTERRUPT_REQUEST_REGISTER
0bf6: 4c 31 ea  -         jmp IRQOUT
0bf9: a9 00     - mode2:  lda #$00
0bfb: 8d 11 0c  -         sta modeflag
0bfe: a9 06     -         lda #BLUE
0c00: 8d 20 d0  -         sta BORDER
0c03: a9 fa     -         lda #endRaster
0c05: 8d 12 d0  -         sta RASTER_COUNTER
0c08: 0e 19 d0  -         asl INTERRUPT_REQUEST_REGISTER
0c0b: 68        -         pla
0c0c: a8        -         tay
0c0d: 68        -         pla
0c0e: aa        -         tax
0c0f: 68        -         pla
0c10: 40        -         rti

[Data]
0c11: 00        - text,data,modeflag:.byte 0
0c12: 00        - startX: .byte 0
0c13: 00        - startY: .byte 0
