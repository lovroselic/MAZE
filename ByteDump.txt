******************************* Segment: Default *******************************
[Default]
2000: c6 48     - SPLICE: dec VAR_B								//array length - 1, last index
2002: a4 47     -         ldy VAR_A								//index
2004: c4 48     - loop:   cpy VAR_B								//stop if index
2006: 10 35     -         bpl out 								//equal or greater than last index
2008: a2 00     -         ldx #0									//number of properties (data_size), start from 0
200a: c8        - each:   iny		
200b: 84 40     -         sty TEMPY
200d: a5 49     -         lda	VAR_C 								//data size
200f: 20 3e 20  -         jsr MUL_Y_A
2012: 84 02     -         sty ZP0
2014: 8a        -         txa
2015: 18        -         clc
2016: 65 02     -         adc ZP0
2018: a8        -         tay
2019: b1 43     -         lda (BV1),y
201b: 85 41     -         sta TEMPA1
201d: a4 40     -         ldy TEMPY
201f: 88        -         dey
2020: 84 40     -         sty TEMPY
2022: a5 49     -         lda	VAR_C 								//data size
2024: 20 3e 20  -         jsr MUL_Y_A
2027: 84 02     -         sty ZP0
2029: 8a        -         txa
202a: 18        -         clc
202b: 65 02     -         adc ZP0
202d: a8        -         tay
202e: a5 41     -         lda TEMPA1
2030: 91 43     -         sta (BV1),y
2032: a4 40     -         ldy TEMPY
2034: e8        -         inx
2035: e4 49     -         cpx VAR_C								//all props? less than VAR_C ?
2037: 90 d1     -         bcc each
2039: c8        -         iny
203a: 4c 04 20  -         jmp loop
203d: 60        - out:    rts
203e: c0 00     - MUL_Y_A,multiply:cpy #00
2040: f0 18     -         beq end
2042: 88        -         dey
2043: 8c 50 20  -         sty mod+1
2046: 4a        -         lsr
2047: 85 02     -         sta ZP0
2049: a9 00     -         lda #00
204b: a0 08     -         ldy #$08
204d: 90 02     - loop:   bcc skip
204f: 69 00     - mod:    adc #0
2051: 6a        - skip:   ror
2052: 66 02     -         ror ZP0
2054: 88        -         dey
2055: d0 f6     -         bne loop
2057: a4 02     -         ldy ZP0
2059: 60        -         rts
205a: 98        - end:    tya
205b: 60        -         rts
205c: 78        - COPY_CHAR_ROM_TO_RAM:sei
205d: a5 01     -         lda $01			//make ROM visible
205f: 29 fb     -         and #$FB
2061: 85 01     -         sta $01 
2063: a9 00     -         lda #00
2065: 85 5f     -         sta $5f			//block start
2067: 85 5a     -         sta $5a			//block end
2069: 85 58     -         sta $58			//destination end
206b: a0 d0     -         ldy #$d0
206d: 84 60     -         sty $60			//block start
206f: a0 e0     -         ldy #$e0		
2071: 84 5b     -         sty $5b			//block end
2073: a0 40     - ram:    ldy #$40
2075: 84 59     -         sty $59			//destination end
2077: 20 bf a3  -         jsr MOVE_BYTES
207a: a5 01     -         lda $01			//hide rom
207c: 09 04     -         ora #$04
207e: 85 01     -         sta $01
2080: 58        -         cli
2081: ad 18 d0  -         lda VMCSB
2084: 29 f0     -         and #%11110000
2086: 09 0c     -         ora #%00001100	//$3000
2088: 8d 18 d0  -         sta VMCSB
208b: 60        -         rts

[Grid_Constants]
208c: 00 ff     - SYS_data,Grid_Constants,BASIC_DIRS,UP:.byte 	0, -1
208e: 00 01     - DOWN:   .byte 	0, 1
2090: ff 00     - LEFT:   .byte	-1, 0
2092: 01 00     - RIGHT:  .byte 	1,0
2094: ff ff     - PROX_TEMPLATE:.byte 	-1, -1
2096: 01 01     -         .byte 	1, 1
2098: ff ff     -         .byte 	-1, -1
209a: 01 01     -         .byte 	1, 1
209c: e6 fd     - rnd_XY: inc ZP3
209e: d0 02     -         bne skip1
20a0: e6 fe     -         inc ZP4
20a2: a5 fd     - skip1:  lda ZP3
20a4: 38        -         sec
20a5: e5 fb     -         sbc ZP1
20a7: 85 fd     -         sta ZP3
20a9: a5 fe     -         lda ZP4
20ab: e5 fc     -         sbc ZP2
20ad: 85 fe     -         sta ZP4			
20af: a4 fd     - toFloat:ldy ZP3
20b1: a5 fe     -         lda ZP4
20b3: 20 91 b3  -         jsr GIVAYF 					//A(h),Y(L) - FAC
20b6: a2 08     -         ldx #<flt
20b8: a0 21     -         ldy #>flt
20ba: 20 d4 bb  -         jsr MOVMF					//store FAC to flt		
20bd: a9 00     -         lda #$00					//RND(0)
20bf: 20 9a e0  -         jsr RND						//$E09A
20c2: a9 08     -         lda #<flt
20c4: a0 21     -         ldy #>flt
20c6: 20 28 ba  -         jsr FMULT					//Multiplies a number from RAM (A,y) and FAC	
20c9: 20 cc bc  -         jsr FAINT					//to integer
20cc: 20 bf b1  -         jsr AYINT					//fac to signed int HI $64 LO $65
20cf: a5 65     -         lda $65						//FAC mantissa lo
20d1: 18        -         clc
20d2: 65 fb     -         adc ZP1						//add number to start	
20d4: 85 14     -         sta WINT
20d6: a5 64     -         lda $64						//FAC mantissa hi
20d8: 65 fc     -         adc ZP2
20da: 85 15     -         sta WINT+1
20dc: 60        - over:   rts			
20dd: e6 fd     - rnd_X:  inc ZP3
20df: d0 02     -         bne toFloat
20e1: e6 fe     -         inc ZP4	
20e3: a4 fd     - toFloat:ldy ZP3
20e5: a5 fe     -         lda ZP4
20e7: 20 91 b3  -         jsr GIVAYF 					//A(h),Y(L) - FAC
20ea: a2 08     -         ldx #<flt
20ec: a0 21     -         ldy #>flt
20ee: 20 d4 bb  -         jsr MOVMF					//store FAC to flt		
20f1: a9 00     -         lda #$00					//get actual RND(0)
20f3: 20 9a e0  -         jsr RND						//$E09A
20f6: a9 08     -         lda #<flt
20f8: a0 21     -         ldy #>flt
20fa: 20 28 ba  -         jsr FMULT					//Multiplies a number from RAM (A,y) and FAC	
20fd: 20 cc bc  -         jsr FAINT					//to integer
2100: 20 bf b1  -         jsr AYINT					//fac to signed int HI $64 LO $65
2103: a5 65     -         lda $65						//FAC mantissa lo
2105: 85 14     -         sta WINT					
2107: 60        -         rts			

[Data RND]
2108: 00 00 00 00 00                                   - dataRND,flt:.byte 0,0,0,0,0
210d: ad 15 28  - MAZE_FILL:lda X
2110: 85 fb     -         sta Y
2112: ad 16 28  -         lda X + 1
2115: 85 fc     -         sta Y + 1
2117: a9 00     -         lda	#WALL
2119: a2 04     -         ldx #4
211b: a0 00     - block:  ldy #0
211d: 91 fb     - fill:   sta (ZP1),y
211f: c8        -         iny
2120: d0 fb     -         bne fill
2122: e6 fc     -         inc ZP2
2124: ca        -         dex
2125: d0 f4     -         bne block
2127: 60        -         rts
2128: ad 15 28  - MAZE_DOT:lda X
212b: 85 fb     -         sta Y
212d: ad 16 28  -         lda X + 1
2130: 85 fc     -         sta Y + 1
2132: a9 00     -         lda #0
2134: 85 fe     -         sta ZP4				
2136: ad 18 28  -         lda grid+1		
2139: 85 fd     -         sta ZP3
213b: a0 03     -         ldy #03
213d: 06 fd     - mul8:   asl X
213f: 26 fe     -         rol X+1	
2141: 88        -         dey
2142: d0 f9     -         bne mul8
2144: 18        -         clc
2145: a5 fb     -         lda X
2147: 65 fd     -         adc Y
2149: 85 fb     -         sta X
214b: 90 02     -         bcc skip
214d: e6 fc     -         inc X+1
214f: 18        - skip:   clc
2150: a5 fc     -         lda X+1
2152: 65 fe     -         adc Y+1
2154: 85 fc     -         sta X+1	
2156: a0 02     -         ldy #02	
2158: 06 fd     - mul32:  asl X
215a: 26 fe     -         rol X+1	
215c: 88        -         dey
215d: d0 f9     -         bne mul32
215f: 18        -         clc
2160: a5 fb     -         lda X
2162: 65 fd     -         adc Y
2164: 85 fb     -         sta X
2166: 90 02     -         bcc skip
2168: e6 fc     -         inc X+1
216a: 18        - skip:   clc
216b: a5 fc     -         lda X+1
216d: 65 fe     -         adc Y+1
216f: 85 fc     -         sta X+1	
2171: 18        -         clc
2172: a5 fb     -         lda X
2174: 6d 17 28  -         adc y	
2177: 85 fb     -         sta X
2179: 90 02     -         bcc out+2
217b: e6 fc     - out:    inc X+1
217d: a9 20     -         lda #DOT
217f: a0 00     -         ldy #0
2181: 91 fb     -         sta (ZP1),y
2183: 60        -         rts
2184: 20 f8 25  - ROOMS:  jsr MAKE_ROOMS
2187: 20 8b 21  -         jsr PAINT_ROOMS
218a: 60        -         rts
218b: a2 00     - PAINT_ROOMS:ldx #00
218d: 86 3f     - each:   stx TEMPX				//each room
218f: 8a        -         txa
2190: 0a        -         asl
2191: 0a        -         asl
2192: a8        -         tay
2193: b9 3e 28  -         lda rooms,y				//get top left x of room
2196: 85 4e     -         sta BV9
2198: c8        -         iny
2199: b9 3e 28  -         lda rooms,y				//get top left y of room
219c: 85 4f     -         sta BV10
219e: c8        -         iny
219f: b9 3e 28  -         lda rooms,y 			//w
21a2: 85 02     -         sta ZP0
21a4: c8        -         iny
21a5: b9 3e 28  -         lda rooms,y 			//h
21a8: 85 52     -         sta BV0
21aa: a2 00     -         ldx #0
21ac: a0 00     - cont_w: ldy #0
21ae: 86 41     - cont_h: stx TEMPA1
21b0: a5 4e     -         lda BV9
21b2: 18        -         clc
21b3: 65 41     -         adc TEMPA1
21b5: 8d 17 28  -         sta maze_start
21b8: 84 41     -         sty TEMPA1
21ba: a5 4f     -         lda BV10
21bc: 18        -         clc
21bd: 65 41     -         adc TEMPA1
21bf: 8d 18 28  -         sta maze_start+1
21c2: 84 40     -         sty TEMPY
21c4: 20 28 21  -         jsr MAZE_DOT
21c7: a4 40     -         ldy TEMPY
21c9: c8        -         iny
21ca: c4 52     -         cpy BV0
21cc: d0 e0     -         bne cont_h
21ce: e8        -         inx
21cf: e4 02     -         cpx ZP0
21d1: d0 d9     -         bne cont_w
21d3: a6 3f     -         ldx TEMPX
21d5: e8        -         inx
21d6: e0 04     -         cpx #04
21d8: d0 b3     -         bne each
21da: 60        - out:    rts
21db: a2 03     - POINTERS_FROM_START:ldx #03
21dd: 8a        - add:    txa
21de: 0a        -         asl
21df: a8        -         tay		
21e0: 18        -         clc
21e1: ad 17 28  -         lda maze_start
21e4: 79 8c 20  -         adc BASIC_DIRS,y
21e7: 99 1f 28  -         sta candidates,y
21ea: c8        -         iny
21eb: 18        -         clc
21ec: ad 18 28  -         lda maze_start+1
21ef: 79 8c 20  -         adc BASIC_DIRS,y
21f2: 99 1f 28  -         sta candidates,y
21f5: ca        -         dex
21f6: 10 e5     -         bpl add
21f8: a2 03     -         ldx #03
21fa: 8a        - copy:   txa
21fb: 0a        -         asl
21fc: a8        -         tay	
21fd: b9 8c 20  -         lda BASIC_DIRS,y
2200: 99 27 28  -         sta candidates_vectors,y
2203: c8        -         iny
2204: b9 8c 20  -         lda BASIC_DIRS,y
2207: 99 27 28  -         sta candidates_vectors,y
220a: ca        -         dex
220b: 10 ed     -         bpl copy
220d: a9 04     -         lda #04
220f: 8d 2f 28  -         sta candidates_length
2212: 60        -         rts
2213: ad 2f 28  - FILTER_IF_OUT:lda candidates_length
2216: c9 01     -         cmp #1
2218: b0 01     -         bcs start
221a: 60        -         rts
221b: ae 2f 28  - start:  ldx candidates_length				//number of grids yet to check
221e: ca        -         dex
221f: 8a        - each:   txa
2220: 0a        -         asl
2221: a8        -         tay
2222: 18        -         clc
2223: b9 1f 28  -         lda candidates,y
2226: c9 27     -         cmp #MAX_X+1
2228: b0 18     -         bcs shift
222a: c9 01     -         cmp #MIN_X
222c: 90 14     -         bcc shift
222e: c8        -         iny
222f: 18        -         clc
2230: b9 1f 28  -         lda candidates,y
2233: c9 18     -         cmp #MAX_Y+1
2235: b0 0b     -         bcs shift
2237: c9 01     -         cmp #MIN_Y
2239: 90 07     -         bcc shift
223b: ca        - cont:   dex
223c: 30 03     -         bmi out
223e: 4c 1f 22  -         jmp each
2241: 60        - out:    rts
2242: 86 3f     - shift:  stx TEMPX									//save x							
2244: 86 47     -         stx VAR_A									//set index to VAR_A
2246: ad 2f 28  -         lda X
2249: 85 48     -         sta Y
224b: a9 1f     -         lda #<addr
224d: 85 43     -         sta X
224f: a9 28     -         lda #>addr
2251: 85 44     -         sta X+1
2253: a9 02     -         lda #data_size
2255: 85 49     -         sta VAR_C
2257: 20 00 20  -         jsr SPLICE
225a: ad 2f 28  -         lda X
225d: 85 48     -         sta Y
225f: a9 27     -         lda #<addr
2261: 85 43     -         sta X
2263: a9 28     -         lda #>addr
2265: 85 44     -         sta X+1
2267: a9 02     -         lda #data_size
2269: 85 49     -         sta VAR_C
226b: 20 00 20  -         jsr SPLICE
226e: ce 2f 28  -         dec candidates_length						//dec array length
2271: a6 3f     -         ldx TEMPX									//restore x
2273: 4c 3b 22  -         jmp cont									//return to loop
2276: ad 2f 28  - FILTER_IF_DOT:lda candidates_length
2279: c9 01     -         cmp #1
227b: b0 01     -         bcs start
227d: 60        -         rts
227e: ae 2f 28  - start:  ldx candidates_length						//number of grids yet to check
2281: ca        -         dex
2282: 8a        - each:   txa
2283: 0a        -         asl
2284: a8        -         tay
2285: b9 1f 28  -         lda candidates,y
2288: 8d 19 28  -         sta grid_pointer
228b: c8        -         iny
228c: b9 1f 28  -         lda candidates,y
228f: 8d 1a 28  -         sta grid_pointer+1
2292: ad 15 28  -         lda X
2295: 85 fb     -         sta Y
2297: ad 16 28  -         lda X + 1
229a: 85 fc     -         sta Y + 1
229c: a9 00     -         lda #0
229e: 85 fe     -         sta ZP4				
22a0: ad 1a 28  -         lda grid+1		
22a3: 85 fd     -         sta ZP3
22a5: a0 03     -         ldy #03
22a7: 06 fd     - mul8:   asl X
22a9: 26 fe     -         rol X+1	
22ab: 88        -         dey
22ac: d0 f9     -         bne mul8
22ae: 18        -         clc
22af: a5 fb     -         lda X
22b1: 65 fd     -         adc Y
22b3: 85 fb     -         sta X
22b5: 90 02     -         bcc skip
22b7: e6 fc     -         inc X+1
22b9: 18        - skip:   clc
22ba: a5 fc     -         lda X+1
22bc: 65 fe     -         adc Y+1
22be: 85 fc     -         sta X+1	
22c0: a0 02     -         ldy #02	
22c2: 06 fd     - mul32:  asl X
22c4: 26 fe     -         rol X+1	
22c6: 88        -         dey
22c7: d0 f9     -         bne mul32
22c9: 18        -         clc
22ca: a5 fb     -         lda X
22cc: 65 fd     -         adc Y
22ce: 85 fb     -         sta X
22d0: 90 02     -         bcc skip
22d2: e6 fc     -         inc X+1
22d4: 18        - skip:   clc
22d5: a5 fc     -         lda X+1
22d7: 65 fe     -         adc Y+1
22d9: 85 fc     -         sta X+1	
22db: 18        -         clc
22dc: a5 fb     -         lda X
22de: 6d 19 28  -         adc y	
22e1: 85 fb     -         sta X
22e3: 90 02     -         bcc out+2
22e5: e6 fc     - out:    inc X+1
22e7: a0 00     -         ldy #0
22e9: b1 fb     -         lda (ZP1),y
22eb: c9 20     -         cmp #DOT
22ed: f0 04     -         beq shift
22ef: ca        - cont:   dex
22f0: 10 90     -         bpl each
22f2: 60        - out:    rts
22f3: 86 3f     - shift:  stx TEMPX									//save x
22f5: 86 47     -         stx VAR_A									//set index to VAR_A
22f7: ad 2f 28  -         lda X
22fa: 85 48     -         sta Y
22fc: a9 1f     -         lda #<addr
22fe: 85 43     -         sta X
2300: a9 28     -         lda #>addr
2302: 85 44     -         sta X+1
2304: a9 02     -         lda #data_size
2306: 85 49     -         sta VAR_C
2308: 20 00 20  -         jsr SPLICE
230b: ad 2f 28  -         lda X
230e: 85 48     -         sta Y
2310: a9 27     -         lda #<addr
2312: 85 43     -         sta X
2314: a9 28     -         lda #>addr
2316: 85 44     -         sta X+1
2318: a9 02     -         lda #data_size
231a: 85 49     -         sta VAR_C
231c: 20 00 20  -         jsr SPLICE
231f: ce 2f 28  -         dec candidates_length						//dec array length
2322: a6 3f     -         ldx TEMPX									//restore x
2324: 4c ef 22  -         jmp cont									//return to loop
2327: a5 02     - PUSH_REST_ON_STACK:lda ZP0										//index was stored in ZP0
2329: 85 47     -         sta VAR_A									//set index to VAR_A
232b: ad 2f 28  -         lda X
232e: 85 48     -         sta Y
2330: a9 1f     -         lda #<addr
2332: 85 43     -         sta X
2334: a9 28     -         lda #>addr
2336: 85 44     -         sta X+1
2338: a9 02     -         lda #data_size
233a: 85 49     -         sta VAR_C
233c: 20 00 20  -         jsr SPLICE
233f: ad 2f 28  -         lda X
2342: 85 48     -         sta Y
2344: a9 27     -         lda #<addr
2346: 85 43     -         sta X
2348: a9 28     -         lda #>addr
234a: 85 44     -         sta X+1
234c: a9 02     -         lda #data_size
234e: 85 49     -         sta VAR_C
2350: 20 00 20  -         jsr SPLICE
2353: ce 2f 28  -         dec candidates_length						//dec array length
2356: a2 00     -         ldx #0
2358: a0 00     - each:   ldy #0
235a: 86 3f     -         stx TEMPX									//save x
235c: 8a        -         txa											//x = x *2	
235d: 0a        -         asl 
235e: aa        -         tax									
235f: bd 1f 28  -         lda candidates,x							//x
2362: 91 71     -         sta (STKPTR1),y
2364: c8        -         iny
2365: e8        -         inx
2366: bd 1f 28  -         lda candidates,x							//y
2369: 91 71     -         sta (STKPTR1),y
236b: 18        -         clc
236c: a5 71     -         lda X
236e: 69 02     -         adc #C
2370: 85 71     -         sta X
2372: 90 02     -         bcc out+2
2374: e6 72     - out:    inc X+1
2376: 88        -         dey
2377: ca        -         dex
2378: bd 27 28  -         lda candidates_vectors,x					//x
237b: 91 71     -         sta (STKPTR1),y
237d: c8        -         iny
237e: e8        -         inx
237f: bd 27 28  -         lda candidates_vectors,x					//y
2382: 91 71     -         sta (STKPTR1),y
2384: 18        -         clc
2385: a5 71     -         lda X
2387: 69 02     -         adc #C
2389: 85 71     -         sta X
238b: 90 02     -         bcc out+2
238d: e6 72     - out:    inc X+1
238f: a6 3f     -         ldx TEMPX									//restore x
2391: e8        -         inx
2392: ec 2f 28  -         cpx candidates_length
2395: d0 c1     -         bne each
2397: 60        - out:    rts		
2398: ad 2f 28  - FILTER_IF_CLOSE_PRIMARY:lda candidates_length
239b: c9 01     -         cmp #1
239d: b0 01     -         bcs start										//cont if 1 or more
239f: 60        -         rts												//else exit, if no candidates
23a0: ae 2f 28  - start:  ldx candidates_length							//number of grids yet to check
23a3: ca        -         dex												//to zero offset
23a4: 8a        - each:   txa
23a5: 0a        -         asl												//double, because datasize is 2
23a6: a8        -         tay												//offset in y (zero based x * datasize)
23a7: b9 1f 28  -         lda candidates,y
23aa: 8d 19 28  -         sta grid_pointer
23ad: b9 27 28  -         lda candidates_vectors,y
23b0: 8d 1b 28  -         sta direction_pointer
23b3: c8        -         iny
23b4: b9 1f 28  -         lda candidates,y
23b7: 8d 1a 28  -         sta grid_pointer+1
23ba: b9 27 28  -         lda candidates_vectors,y
23bd: 8d 1c 28  -         sta direction_pointer+1
23c0: 18        -         clc
23c1: ad 19 28  -         lda grid_pointer
23c4: 6d 1b 28  -         adc direction_pointer
23c7: 8d 1d 28  -         sta test_pointer
23ca: 18        -         clc
23cb: ad 1a 28  -         lda grid_pointer+1
23ce: 6d 1c 28  -         adc direction_pointer+1
23d1: 8d 1e 28  -         sta test_pointer+1
23d4: ad 15 28  -         lda X
23d7: 85 fb     -         sta Y
23d9: ad 16 28  -         lda X + 1
23dc: 85 fc     -         sta Y + 1
23de: a9 00     -         lda #0
23e0: 85 fe     -         sta ZP4				
23e2: ad 1e 28  -         lda grid+1		
23e5: 85 fd     -         sta ZP3
23e7: a0 03     -         ldy #03
23e9: 06 fd     - mul8:   asl X
23eb: 26 fe     -         rol X+1	
23ed: 88        -         dey
23ee: d0 f9     -         bne mul8
23f0: 18        -         clc
23f1: a5 fb     -         lda X
23f3: 65 fd     -         adc Y
23f5: 85 fb     -         sta X
23f7: 90 02     -         bcc skip
23f9: e6 fc     -         inc X+1
23fb: 18        - skip:   clc
23fc: a5 fc     -         lda X+1
23fe: 65 fe     -         adc Y+1
2400: 85 fc     -         sta X+1	
2402: a0 02     -         ldy #02	
2404: 06 fd     - mul32:  asl X
2406: 26 fe     -         rol X+1	
2408: 88        -         dey
2409: d0 f9     -         bne mul32
240b: 18        -         clc
240c: a5 fb     -         lda X
240e: 65 fd     -         adc Y
2410: 85 fb     -         sta X
2412: 90 02     -         bcc skip
2414: e6 fc     -         inc X+1
2416: 18        - skip:   clc
2417: a5 fc     -         lda X+1
2419: 65 fe     -         adc Y+1
241b: 85 fc     -         sta X+1	
241d: 18        -         clc
241e: a5 fb     -         lda X
2420: 6d 1d 28  -         adc y	
2423: 85 fb     -         sta X
2425: 90 02     -         bcc out+2
2427: e6 fc     - out:    inc X+1
2429: a0 00     -         ldy #0
242b: b1 fb     -         lda (ZP1),y
242d: c9 20     -         cmp #DOT									//is dot? (empty)
242f: f0 07     -         beq shift									//yes
2431: ca        - cont:   dex
2432: 30 03     -         bmi out										//less than zero, stop
2434: 4c a4 23  -         jmp each									//loop back, branch too far
2437: 60        - out:    rts
2438: 86 3f     - shift:  stx TEMPX									//save x
243a: 86 47     -         stx VAR_A									//set index to VAR_A
243c: ad 2f 28  -         lda X
243f: 85 48     -         sta Y
2441: a9 1f     -         lda #<addr
2443: 85 43     -         sta X
2445: a9 28     -         lda #>addr
2447: 85 44     -         sta X+1
2449: a9 02     -         lda #data_size
244b: 85 49     -         sta VAR_C
244d: 20 00 20  -         jsr SPLICE
2450: ad 2f 28  -         lda X
2453: 85 48     -         sta Y
2455: a9 27     -         lda #<addr
2457: 85 43     -         sta X
2459: a9 28     -         lda #>addr
245b: 85 44     -         sta X+1
245d: a9 02     -         lda #data_size
245f: 85 49     -         sta VAR_C
2461: 20 00 20  -         jsr SPLICE
2464: ce 2f 28  -         dec candidates_length						//dec array length
2467: a6 3f     -         ldx TEMPX									//restore x
2469: 4c 31 24  -         jmp cont									//return to loop
246c: ad 2f 28  - FILTER_SIDE_PROXIMIY:lda candidates_length
246f: c9 01     -         cmp #1
2471: b0 01     -         bcs start										//cont if 1 or more
2473: 60        -         rts												//else exit, if no candidates
2474: ae 2f 28  - start:  ldx candidates_length							//number of grids yet to check
2477: ca        -         dex												//to zero offset
2478: 8a        - each:   txa
2479: 0a        -         asl												//double, because datasize is 2
247a: a8        -         tay												//offset in y (zero based x * datasize)
247b: b9 1f 28  -         lda candidates, y
247e: 8d 19 28  -         sta grid_pointer
2481: b9 27 28  -         lda candidates_vectors,y
2484: 8d 1b 28  -         sta direction_pointer
2487: c8        -         iny
2488: b9 1f 28  -         lda candidates, y
248b: 8d 1a 28  -         sta grid_pointer+1
248e: b9 27 28  -         lda candidates_vectors,y
2491: 8d 1c 28  -         sta direction_pointer+1
2494: a9 94     -         lda #<addr
2496: 85 50     -         sta X
2498: a9 20     -         lda #>addr
249a: 85 51     -         sta X+1
249c: a9 30     -         lda #<addr
249e: 85 4e     -         sta X
24a0: a9 28     -         lda #>addr
24a2: 85 4f     -         sta X+1
24a4: a0 08     -         ldy #length											
24a6: 88        -         dey
24a7: b1 50     - copy:   lda (BV7),y
24a9: 91 4e     -         sta (BV9),y
24ab: 88        -         dey
24ac: 10 f9     -         bpl copy
24ae: a0 01     -         ldy #01											//y?
24b0: b9 1b 28  -         lda direction_pointer,y
24b3: d0 01     -         bne ok											//if not zero, than this is right dimension
24b5: 88        -         dey												//not y, but x
24b6: b9 1b 28  - ok:     lda direction_pointer,y							//index of dimension now in y register
24b9: 99 30 28  -         sta proximity_vectors,y							//set sequence 1,1,0,0 on the right dimension, datasize=2
24bc: c8        -         iny
24bd: c8        -         iny
24be: 99 30 28  -         sta proximity_vectors,y	
24c1: c8        -         iny
24c2: c8        -         iny
24c3: a9 00     -         lda #0
24c5: 99 30 28  -         sta proximity_vectors,y	
24c8: c8        -         iny
24c9: c8        -         iny
24ca: 99 30 28  -         sta proximity_vectors,y							//proximity vectors ready
24cd: a0 00     -         ldy #00
24cf: ad 19 28  - repeat: lda grid_pointer
24d2: 18        -         clc
24d3: 79 30 28  -         adc proximity_vectors,y
24d6: 8d 1d 28  -         sta test_pointer
24d9: c8        -         iny
24da: ad 1a 28  -         lda grid_pointer+1
24dd: 18        -         clc
24de: 79 30 28  -         adc proximity_vectors,y
24e1: 8d 1e 28  -         sta test_pointer+1								//next grid now in test_pointer
24e4: 84 40     -         sty TEMPY										//save y
24e6: ad 15 28  -         lda X
24e9: 85 fb     -         sta Y
24eb: ad 16 28  -         lda X + 1
24ee: 85 fc     -         sta Y + 1
24f0: a9 00     -         lda #0
24f2: 85 fe     -         sta ZP4				
24f4: ad 1e 28  -         lda grid+1		
24f7: 85 fd     -         sta ZP3
24f9: a0 03     -         ldy #03
24fb: 06 fd     - mul8:   asl X
24fd: 26 fe     -         rol X+1	
24ff: 88        -         dey
2500: d0 f9     -         bne mul8
2502: 18        -         clc
2503: a5 fb     -         lda X
2505: 65 fd     -         adc Y
2507: 85 fb     -         sta X
2509: 90 02     -         bcc skip
250b: e6 fc     -         inc X+1
250d: 18        - skip:   clc
250e: a5 fc     -         lda X+1
2510: 65 fe     -         adc Y+1
2512: 85 fc     -         sta X+1	
2514: a0 02     -         ldy #02	
2516: 06 fd     - mul32:  asl X
2518: 26 fe     -         rol X+1	
251a: 88        -         dey
251b: d0 f9     -         bne mul32
251d: 18        -         clc
251e: a5 fb     -         lda X
2520: 65 fd     -         adc Y
2522: 85 fb     -         sta X
2524: 90 02     -         bcc skip
2526: e6 fc     -         inc X+1
2528: 18        - skip:   clc
2529: a5 fc     -         lda X+1
252b: 65 fe     -         adc Y+1
252d: 85 fc     -         sta X+1	
252f: 18        -         clc
2530: a5 fb     -         lda X
2532: 6d 1d 28  -         adc y	
2535: 85 fb     -         sta X
2537: 90 02     -         bcc out+2
2539: e6 fc     - out:    inc X+1
253b: a0 00     -         ldy #0
253d: b1 fb     -         lda (ZP1),y
253f: c9 20     -         cmp #DOT										//is dot? (empty)
2541: f0 0e     -         beq shift										//yes, shift on x
2543: a4 40     -         ldy TEMPY										//restore y
2545: c8        -         iny
2546: c0 08     -         cpy #08
2548: d0 85     -         bne repeat
254a: ca        - cont:   dex
254b: 30 03     -         bmi out										//less than zero, stop
254d: 4c 78 24  -         jmp each										//loop back, branch too far
2550: 60        - out:    rts
2551: 86 3f     - shift:  stx TEMPX									//save x
2553: 86 47     -         stx VAR_A									//set index to VAR_A
2555: ad 2f 28  -         lda X
2558: 85 48     -         sta Y
255a: a9 1f     -         lda #<addr
255c: 85 43     -         sta X
255e: a9 28     -         lda #>addr
2560: 85 44     -         sta X+1
2562: a9 02     -         lda #data_size
2564: 85 49     -         sta VAR_C
2566: 20 00 20  -         jsr SPLICE
2569: ad 2f 28  -         lda X
256c: 85 48     -         sta Y
256e: a9 27     -         lda #<addr
2570: 85 43     -         sta X
2572: a9 28     -         lda #>addr
2574: 85 44     -         sta X+1
2576: a9 02     -         lda #data_size
2578: 85 49     -         sta VAR_C
257a: 20 00 20  -         jsr SPLICE
257d: ce 2f 28  -         dec candidates_length						//dec array length
2580: a6 3f     -         ldx TEMPX									//restore x
2582: 4c 4a 25  -         jmp cont									//return to loop
2585: a5 71     - CANDIDATE_FROM_STACK:lda X
2587: 38        -         sec
2588: e9 02     -         sbc #C
258a: 85 71     -         sta X
258c: b0 02     -         bcs out+2
258e: c6 72     - out:    dec X+1
2590: a0 00     -         ldy #0									//x
2592: b1 71     -         lda (STKPTR1),y
2594: 99 27 28  -         sta candidates_vectors,y
2597: c8        -         iny										//y
2598: b1 71     -         lda (STKPTR1),y
259a: 99 27 28  -         sta candidates_vectors,y
259d: a5 71     -         lda X
259f: 38        -         sec
25a0: e9 02     -         sbc #C
25a2: 85 71     -         sta X
25a4: b0 02     -         bcs out+2
25a6: c6 72     - out:    dec X+1
25a8: a0 00     -         ldy #0									//x
25aa: b1 71     -         lda (STKPTR1),y
25ac: 99 1f 28  -         sta candidates,y
25af: c8        -         iny										//y
25b0: b1 71     -         lda (STKPTR1),y
25b2: 99 1f 28  -         sta candidates,y
25b5: a9 01     -         lda #01
25b7: 8d 2f 28  -         sta candidates_length
25ba: 60        - out:    rts
25bb: ae 2f 28  - CHECK_BIAS:ldx candidates_length
25be: ca        -         dex
25bf: 8a        - each:   txa
25c0: 0a        -         asl 								// length to offset in
25c1: a8        -         tay									// y
25c2: b9 27 28  -         lda candidates_vectors,y			// x dim
25c5: cd 3a 28  -         cmp bias_direction
25c8: d0 09     -         bne not 							//not same
25ca: c8        -         iny
25cb: b9 27 28  -         lda	candidates_vectors,y			// y dim	
25ce: cd 3b 28  -         cmp bias_direction+1				//the same
25d1: f0 06     -         beq found
25d3: ca        - not:    dex
25d4: 10 e9     -         bpl each
25d6: a9 ff     -         lda #-1								//not found: -1
25d8: 60        -         rts
25d9: 8a        - found:  txa									//index in acc
25da: 60        -         rts
25db: a0 00     - STORE_DEAD_END:ldy #0
25dd: ad 17 28  -         lda maze_start			//x
25e0: 91 5c     -         sta (STKPTR3),y
25e2: c8        -         iny
25e3: ad 18 28  -         lda maze_start+1		//y
25e6: 91 5c     -         sta (STKPTR3),y
25e8: ee 3c 28  -         inc DE_counter			//assumption always less than 255
25eb: 18        -         clc
25ec: a5 5c     -         lda X
25ee: 69 02     -         adc #C
25f0: 85 5c     -         sta X
25f2: 90 02     -         bcc out+2
25f4: e6 5d     - out:    inc X+1
25f6: 60        - out:    rts
25f7: 60        - CONNECT_DEAD_ENDS,out:rts
25f8: a2 00     - MAKE_ROOMS:ldx #0
25fa: 86 3f     - each:   stx TEMPX
25fc: 8a        -         txa
25fd: 0a        -         asl
25fe: 0a        -         asl
25ff: a8        -         tay					//datasize 4 from x to y
2600: a9 00     -         lda #0
2602: 85 fc     -         sta ZP2
2604: 85 fe     -         sta ZP4
2606: b9 4e 28  -         lda room_def,y
2609: 85 fb     -         sta ZP1				//x from
260b: b9 4f 28  -         lda room_def+1,y
260e: 85 fd     -         sta ZP3				//x to
2610: 84 40     -         sty TEMPY
2612: 20 9c 20  -         jsr rnd_XY
2615: a5 14     -         lda WINT
2617: a4 40     -         ldy TEMPY
2619: 99 3e 28  -         sta rooms,y			//top x random(from, to)
261c: a9 00     -         lda #0
261e: 85 fc     -         sta ZP2
2620: 85 fe     -         sta ZP4
2622: b9 50 28  -         lda room_def+2,y
2625: 85 fb     -         sta ZP1				//y from
2627: b9 51 28  -         lda room_def+3,y
262a: 85 fd     -         sta ZP3				//y to
262c: 84 40     -         sty TEMPY
262e: 20 9c 20  -         jsr rnd_XY
2631: a5 14     -         lda WINT
2633: a4 40     -         ldy TEMPY
2635: c8        -         iny
2636: 99 3e 28  -         sta rooms,y			//top y random(from, to)
2639: a9 00     -         lda #0
263b: 85 fc     -         sta ZP2
263d: 85 fe     -         sta ZP4
263f: a9 03     -         lda #MIN_W
2641: 85 fb     -         sta ZP1
2643: a9 04     -         lda #MAX_W
2645: 85 fd     -         sta ZP3
2647: 84 40     -         sty TEMPY
2649: 20 9c 20  -         jsr rnd_XY
264c: a5 14     -         lda WINT
264e: a4 40     -         ldy TEMPY
2650: c8        -         iny	
2651: 99 3e 28  -         sta rooms,y			//w
2654: a9 00     -         lda #0
2656: 85 fc     -         sta ZP2
2658: 85 fe     -         sta ZP4
265a: a9 03     -         lda #MIN_W
265c: 85 fb     -         sta ZP1
265e: a9 04     -         lda #MAX_W
2660: 85 fd     -         sta ZP3
2662: 84 40     -         sty TEMPY
2664: 20 9c 20  -         jsr rnd_XY
2667: a5 14     -         lda WINT
2669: a4 40     -         ldy TEMPY
266b: c8        -         iny	
266c: 99 3e 28  -         sta rooms,y			//h
266f: a6 3f     -         ldx TEMPX
2671: e8        -         inx
2672: e0 04     -         cpx #04
2674: d0 84     -         bne each
2676: 60        - out:    rts
2677: a2 00     - GET_EXIT_CANDIDATES,init:ldx #0
2679: 8e 9e 28  -         stx exit_candidates_length		//reset ...
267c: 0a        -         asl 							//room index in A
267d: 0a        -         asl 							//* 4 and to y	
267e: a8        -         tay								//y offset of room index, datzasize = 4
267f: b9 3f 28  -         lda rooms+1,y					//y
2682: 85 40     -         sta TEMPY
2684: c6 40     -         dec TEMPY						//y-1
2686: 18        -         clc
2687: 79 41 28  -         adc rooms+3,y
268a: 85 53     -         sta TEMPY2						//y+h
268c: b9 40 28  -         lda rooms+2,y
268f: 85 02     -         sta ZP0	
2691: b9 3e 28  -         lda rooms,y
2694: 85 52     -         sta BV0							//x + i
2696: 84 47     -         sty VAR_A						//save offset of room index
2698: a2 00     -         ldx #00
269a: ad 9e 28  - width_loop:lda	exit_candidates_length
269d: 0a        -         asl 							//datasize of candidates = 2
269e: a8        -         tay								//exit_candidates offset in y
269f: a5 52     -         lda	BV0							//x+i
26a1: 99 5e 28  -         sta exit_candidates,y	
26a4: a9 00     -         lda #0
26a6: 99 7e 28  -         sta exit_candidate_dirs,y
26a9: c8        -         iny
26aa: a5 40     -         lda TEMPY						//y-1
26ac: 99 5e 28  -         sta exit_candidates,y
26af: a9 ff     -         lda #-1							
26b1: 99 7e 28  -         sta exit_candidate_dirs,y
26b4: c8        -         iny
26b5: ee 9e 28  -         inc exit_candidates_length
26b8: a5 52     -         lda	BV0							//x+i
26ba: 99 5e 28  -         sta exit_candidates,y	
26bd: a9 00     -         lda #0
26bf: 99 7e 28  -         sta exit_candidate_dirs,y
26c2: c8        -         iny
26c3: a5 53     -         lda TEMPY2						//y+h
26c5: 99 5e 28  -         sta	exit_candidates,y	
26c8: a9 01     -         lda #1
26ca: 99 7e 28  -         sta exit_candidate_dirs,y
26cd: ee 9e 28  -         inc exit_candidates_length		
26d0: e6 52     -         inc BV0							//i++
26d2: e8        -         inx
26d3: e4 02     -         cpx ZP0
26d5: d0 c3     -         bne width_loop
26d7: a4 47     -         ldy VAR_A						//restore offset of room index
26d9: b9 3e 28  -         lda rooms,y						//x
26dc: 85 3f     -         sta TEMPX
26de: c6 3f     -         dec TEMPX						//x-1
26e0: 18        -         clc
26e1: 79 40 28  -         adc rooms+2,y
26e4: 85 4d     -         sta TEMPX2						//x+w
26e6: b9 41 28  -         lda rooms+3,y					//h
26e9: 85 02     -         sta ZP0
26eb: b9 3f 28  -         lda rooms+1,y
26ee: 85 52     -         sta BV0							//y + i
26f0: a2 00     -         ldx #00
26f2: ad 9e 28  - height_loop:lda	exit_candidates_length
26f5: 0a        -         asl 							//datasize of candidates = 2
26f6: a8        -         tay								//exit_candidates offset in y
26f7: a5 3f     -         lda TEMPX						//x-1
26f9: 99 5e 28  -         sta exit_candidates,y
26fc: a9 ff     -         lda #-1
26fe: 99 7e 28  -         sta exit_candidate_dirs,y
2701: c8        -         iny
2702: a5 52     -         lda BV0							//y+i
2704: 99 5e 28  -         sta exit_candidates,y
2707: a9 00     -         lda #0
2709: 99 7e 28  -         sta exit_candidate_dirs,y
270c: c8        -         iny
270d: ee 9e 28  -         inc exit_candidates_length
2710: a5 4d     -         lda TEMPX2						//x+w
2712: 99 5e 28  -         sta exit_candidates,y
2715: a9 01     -         lda #01
2717: 99 7e 28  -         sta exit_candidate_dirs,y
271a: c8        -         iny
271b: a5 52     -         lda BV0							//y+i
271d: 99 5e 28  -         sta exit_candidates,y
2720: a9 00     -         lda #0
2722: 99 7e 28  -         sta exit_candidate_dirs,y
2725: c8        -         iny
2726: ee 9e 28  -         inc exit_candidates_length
2729: e6 52     -         inc BV0							//i++
272b: e8        -         inx
272c: e4 02     -         cpx ZP0
272e: d0 c2     -         bne height_loop
2730: 60        - out:    rts
2731: a9 00     - SET_START:lda #0							//room index in A
2733: 20 77 26  -         jsr GET_EXIT_CANDIDATES
2736: ad 9e 28  -         lda exit_candidates_length
2739: 85 02     -         sta ZP0
273b: c6 02     -         dec ZP0
273d: a5 02     -         lda X	
273f: 85 fd     -         sta ZP3
2741: a9 00     -         lda #0
2743: 85 fe     -         sta ZP4
2745: 20 dd 20  -         jsr rnd_X
2748: a5 14     -         lda WINT
274a: 0a        -         asl 
274b: a8        -         tay
274c: b9 5e 28  -         lda exit_candidates,y
274f: 8d 17 28  -         sta maze_start
2752: c8        -         iny
2753: b9 5e 28  -         lda exit_candidates,y
2756: 8d 18 28  -         sta maze_start+1
2759: 60        - out:    rts
275a: 20 db 25  - MAZE:   jsr STORE_DEAD_END
275d: 20 28 21  - outer,P_LOOP:jsr MAZE_DOT
2760: 20 db 21  -         jsr POINTERS_FROM_START
2763: 20 13 22  -         jsr FILTER_IF_OUT
2766: 20 76 22  -         jsr FILTER_IF_DOT
2769: 20 98 23  -         jsr FILTER_IF_CLOSE_PRIMARY
276c: 20 6c 24  -         jsr FILTER_SIDE_PROXIMIY
276f: ad 2f 28  -         lda candidates_length						//check how many we have
2772: c9 00     -         cmp #00										//if zero break;
2774: d0 06     -         bne more									//more than 0
2776: 20 db 25  -         jsr STORE_DEAD_END							//store dead end
2779: 4c e6 27  -         jmp S_LOOP
277c: c9 02     - more:   cmp #02										//if it is two or more
277e: b0 05     -         bcs then									//go to else/then
2780: a9 00     -         lda #0										//otherwise, index->0 in A									
2782: 4c ac 27  -         jmp skip_else
2785: ad 39 28  - then:   lda bias_counter
2788: c9 00     -         cmp #00
278a: f0 07     -         beq select_random							//use random, not bias
278c: 20 bb 25  -         jsr CHECK_BIAS								//index in a, or -1 if not found
278f: c9 ff     -         cmp #-1
2791: d0 19     -         bne skip_else								//not -1, select this direction
2793: a9 00     - select_random:lda #0										//reset bias counter when selection is random	
2795: 8d 39 28  -         sta bias_counter
2798: ad 2f 28  -         lda candidates_length						//random index (, candidates length-1)
279b: aa        -         tax
279c: ca        -         dex
279d: 86 02     -         stx ZP0
279f: a5 02     -         lda X	
27a1: 85 fd     -         sta ZP3
27a3: a9 00     -         lda #0
27a5: 85 fe     -         sta ZP4
27a7: 20 dd 20  -         jsr rnd_X
27aa: a5 14     -         lda WINT
27ac: 85 02     - skip_else:sta ZP0										//store index in ZP0	
27ae: 0a        -         asl 										//datasize=2	
27af: a8        -         tay											//offset in y
27b0: b9 1f 28  -         lda candidates,y
27b3: 8d 17 28  -         sta maze_start
27b6: b9 27 28  -         lda candidates_vectors,y
27b9: 8d 3a 28  -         sta bias_direction
27bc: c8        -         iny
27bd: b9 1f 28  -         lda candidates,y
27c0: 8d 18 28  -         sta maze_start+1
27c3: b9 27 28  -         lda candidates_vectors,y
27c6: 8d 3b 28  -         sta bias_direction+1
27c9: ee 39 28  -         inc bias_counter
27cc: ad 39 28  -         lda bias_counter
27cf: cd 38 28  -         cmp bias
27d2: d0 05     -         bne out+3
27d4: a9 00     -         lda #00
27d6: 8d 39 28  - out:    sta bias_counter
27d9: ad 2f 28  -         lda candidates_length
27dc: c9 02     -         cmp #02										//if there are 2 or more, selected has not been discarded yet
27de: 90 03     -         bcc repeat_P								//no, repeat loop
27e0: 20 27 23  -         jsr PUSH_REST_ON_STACK													
27e3: 4c 5d 27  - repeat_P:jmp P_LOOP
27e6: a5 71     - S_LOOP: lda STKPTR1
27e8: c9 00     -         cmp #<STACK
27ea: d0 09     -         bne cont
27ec: a5 72     -         lda STKPTR2
27ee: c9 c0     -         cmp #>STACK
27f0: d0 03     -         bne cont
27f2: 4c 14 28  -         jmp quit									//stack pointer == STACK, stack is empty
27f5: 20 85 25  - cont:   jsr CANDIDATE_FROM_STACK					//take on grid an its direction from stack
27f8: 20 98 23  -         jsr FILTER_IF_CLOSE_PRIMARY					//recheck if they are still 'safe'
27fb: 20 6c 24  -         jsr FILTER_SIDE_PROXIMIY					//in terms of proximity
27fe: ad 2f 28  -         lda candidates_length						//check if it is still ok
2801: c9 00     -         cmp #00										//if zero break; 
2803: f0 e1     -         beq S_LOOP									//no, find another
2805: ad 1f 28  -         lda candidates								//set it to maze_start
2808: 8d 17 28  -         sta maze_start
280b: ad 20 28  -         lda candidates+1
280e: 8d 18 28  -         sta maze_start+1
2811: 4c 5d 27  -         jmp P_LOOP									//make next branch
2814: 60        - quit:   rts

[MAZE Memory]
2815: 04 00     - MAZE_memory,maze_memory_alloc:.word $0004 					//screen by default
2817: 00 00     - maze_start:.word 0
2819: 00 00     - grid_pointer:.word 0
281b: 00 00     - direction_pointer:.word 0
281d: 00 00     - test_pointer:.word 0
281f: 00 00     - candidates:.fill 2,0
2821: 00 00     -         .fill 2,0
2823: 00 00     -         .fill 2,0
2825: 00 00     -         .fill 2,0
2827: 00 00     - candidates_vectors:.fill 2,0
2829: 00 00     -         .fill 2,0
282b: 00 00     -         .fill 2,0
282d: 00 00     -         .fill 2,0
282f: 00        - candidates_length:.byte 0
2830: 00 00     - proximity_vectors:.fill 2,0
2832: 00 00     -         .fill 2,0
2834: 00 00     -         .fill 2,0
2836: 00 00     -         .fill 2,0
2838: 02        - bias:   .byte 2
2839: 00        - bias_counter:.byte 0
283a: 00 00     - bias_direction:.word 0
283c: 00        - DE_counter:.byte 0
283d: 00        - REM_DE_counter:.byte 0
283e: 00 00 00 00                                      - rooms:  .fill 4,0
2842: 00 00 00 00                                      -         .fill 4,0
2846: 00 00 00 00                                      -         .fill 4,0
284a: 00 00 00 00                                      -         .fill 4,0
284e: 03 0e 03 06                                      - room_def:.byte 3, 14, 3, 6
2852: 17 21 03 06                                      -         .byte 23, 33, 3, 6
2856: 03 0e 0e 11                                      -         .byte 3, 14, 14, 17
285a: 17 21 0e 11                                      -         .byte 23, 33, 14, 17
285e: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - exit_candidates:.fill MAX_W * 4 * 2, 0
286e: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
287e: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - exit_candidate_dirs:.fill MAX_W * 4 * 2, 0
288e: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
289e: 00        - exit_candidates_length:.byte 0
