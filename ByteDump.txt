******************************* Segment: Default *******************************
******************************** Segment: MAZE *********************************
[Header]
0801: 0c 08     -         .word bend
0803: 0d 00     -         .byte $0d, $00			//;line number
0805: 9e        -         .byte $9E				//;SYS
0806: 20        -         .byte $20				//;space
0807: 32 30 36 34                                      -         .byte $32,$30,$36,$34	//;start 2064
080b: 00        -         .byte $00				//;end of line
080c: 00 00     - bend:   .byte $00, $00			//;end of basic program

[Main]
0810: 78        -         sei							//set interrupt
0811: a9 7f     -         lda #$7f
0813: 8d 0d dc  -         sta CIA_ICR
0816: 8d 0d dd  -         sta CIA2_ICR
0819: ad 0d dc  -         lda CIA_ICR
081c: ad 0d dd  -         lda CIA2_ICR
081f: ad 1a d0  -         lda INTERRUPT_MASK_REGISTER	
0822: 09 01     -         ora #$01
0824: 8d 1a d0  -         sta INTERRUPT_MASK_REGISTER
0827: ad 11 d0  -         lda CONTROL_REGISTER1
082a: 29 7f     -         and #$7f
082c: 8d 11 d0  -         sta CONTROL_REGISTER1
082f: a9 32     -         lda #startRaster
0831: 8d 12 d0  -         sta RASTER_COUNTER
0834: a9 a4     -         lda #<address
0836: 8d 14 03  -         sta IRQVEC
0839: a9 09     -         lda #>address
083b: 8d 15 03  -         sta	IRQVEC+1
083e: 58        -         cli
083f: a9 ff     - begin,init:lda #$ff
0841: 8d 0e d4  -         sta FV3LO
0844: 8d 0f d4  -         sta FV3HI
0847: a9 80     -         lda #$80
0849: 8d 12 d4  -         sta CTRLREG_V3
084c: a9 26     -         lda #<end	
084e: 85 fd     -         sta ZP3
0850: a9 00     -         lda #>end
0852: 85 fe     -         sta ZP4
0854: a9 01     -         lda #<start
0856: 85 fb     -         sta ZP1
0858: a9 00     -         lda #>start
085a: 85 fc     -         sta ZP2
085c: 20 57 09  -         jsr rnd_XY
085f: a5 14     -         lda X
0861: 8d da 09  -         sta Y
0864: a9 17     -         lda #<end	
0866: 85 fd     -         sta ZP3
0868: a9 00     -         lda #>end
086a: 85 fe     -         sta ZP4
086c: a9 01     -         lda #<start
086e: 85 fb     -         sta ZP1
0870: a9 00     -         lda #>start
0872: 85 fc     -         sta ZP2
0874: 20 57 09  -         jsr rnd_XY
0877: a5 14     -         lda X
0879: 8d db 09  -         sta Y
087c: a9 00     -         lda #<memory
087e: 8d a2 09  -         sta maze_memory_alloc
0881: a9 04     -         lda #>memory
0883: 8d a3 09  -         sta maze_memory_alloc+1
0886: ad a2 09  -         lda X
0889: 85 fb     -         sta Y
088b: ad a3 09  -         lda X + 1
088e: 85 fc     -         sta Y + 1
0890: a9 e0     -         lda	#value
0892: a2 04     -         ldx #4
0894: a0 00     - block:  ldy #0
0896: 91 fb     - fill:   sta (ZP1),y
0898: c8        -         iny
0899: d0 fb     -         bne fill
089b: e6 fc     -         inc ZP2
089d: ca        -         dex
089e: d0 f4     -         bne block
08a0: ad a2 09  - begin:  lda X
08a3: 85 fb     -         sta Y
08a5: ad a3 09  -         lda X + 1
08a8: 85 fc     -         sta Y + 1
08aa: a9 00     -         lda #0
08ac: 85 fe     -         sta ZP4			//clear, we don't know what is there
08ae: ad db 09  -         lda grid+1		//grid.y
08b1: 85 fd     -         sta ZP3
08b3: a0 03     - dot:    ldy #03
08b5: 06 fd     - mul8:   asl ZP3
08b7: 26 fe     -         rol ZP4
08b9: 88        -         dey
08ba: d0 f9     -         bne mul8
08bc: 18        -         clc
08bd: a5 fb     -         lda X
08bf: 65 fd     -         adc Y
08c1: 85 fb     -         sta X
08c3: 90 02     -         bcc skip
08c5: e6 fc     -         inc X+1
08c7: 18        - skip:   clc
08c8: a5 fc     -         lda X+1
08ca: 65 fe     -         adc Y+1
08cc: 85 fc     -         sta X+1	
08ce: a0 02     -         ldy #02	
08d0: 06 fd     - mul32:  asl ZP3
08d2: 26 fe     -         rol ZP4
08d4: 88        -         dey
08d5: d0 f9     -         bne mul32
08d7: 18        -         clc
08d8: a5 fb     -         lda X
08da: 65 fd     -         adc Y
08dc: 85 fb     -         sta X
08de: 90 02     -         bcc skip
08e0: e6 fc     -         inc X+1
08e2: 18        - skip:   clc
08e3: a5 fc     -         lda X+1
08e5: 65 fe     -         adc Y+1
08e7: 85 fc     -         sta X+1	
08e9: 18        -         clc
08ea: a5 fb     -         lda X
08ec: 6d da 09  -         adc y	
08ef: 85 fb     -         sta X
08f1: 90 02     -         bcc out+2
08f3: e6 fc     - out:    inc X+1
08f5: a9 20     - skip4,paint:lda #DOT
08f7: a0 00     -         ldy #0
08f9: 91 fb     -         sta (ZP1),y
08fb: a5 c5     - key:    lda LSTX		//get character in A
08fd: c9 40     -         cmp #64			//no key
08ff: f0 fa     -         beq key
0901: a9 00     -         lda #00
0903: ae da 09  -         ldx x
0906: 20 cd bd  -         jsr PRINT_INT
0909: a9 2c     -         lda #CHR_Comma
090b: 20 d2 ff  -         jsr CHROUT
090e: a9 00     -         lda #00
0910: ae db 09  -         ldx x
0913: 20 cd bd  -         jsr PRINT_INT
0916: a9 0d     -         lda #CHR_Return
0918: 20 d2 ff  -         jsr CHROUT
091b: a5 c5     - end,key:lda LSTX		//get character in A
091d: c9 40     -         cmp #64			//no key
091f: f0 fa     -         beq key
0921: 60        -         rts

[Subroutines]
0922: 20 d2 ff  - subs,printSequence:jsr CHROUT
0925: ca        -         dex
0926: d0 fa     -         bne printSequence
0928: 60        -         rts
0929: 86 fb     - printString:stx ZP1			//lo
092b: 84 fc     -         sty	ZP2			//hi
092d: a0 00     - next:   ldy #$00
092f: b1 fb     -         lda (ZP1),y		//load character
0931: c9 00     -         cmp #$00
0933: f0 0d     -         beq	out			//null terminator
0935: 20 d2 ff  -         jsr CHROUT
0938: 18        -         clc
0939: e6 fb     -         inc	ZP1
093b: d0 f0     -         bne	next
093d: e6 fc     -         inc ZP2
093f: 4c 2d 09  -         jmp next
0942: 60        - out:    rts
0943: 86 fb     - lenString:stx ZP1			//lo
0945: 84 fc     -         sty	ZP2			//hi
0947: a0 00     -         ldy #$00		
0949: 84 fd     -         sty ZP3			//counter
094b: b1 fb     - next:   lda (ZP1),y		//load character
094d: c9 00     -         cmp #$00
094f: f0 04     -         beq	out			//null terminator
0951: c8        -         iny
0952: 4c 4b 09  -         jmp next
0955: 98        - out:    tya
0956: 60        -         rts
0957: a9 00     - rnd_XY: lda #00
0959: 20 9a e0  -         jsr RND
095c: e6 fd     -         inc ZP3
095e: d0 02     -         bne skip1
0960: e6 fe     -         inc ZP4
0962: a5 fd     - skip1:  lda ZP3
0964: 38        -         sec
0965: e5 fb     -         sbc ZP1
0967: 85 fd     -         sta ZP3
0969: a5 fe     -         lda ZP4
096b: e5 fc     -         sbc ZP2
096d: 85 fe     -         sta ZP4			
096f: a4 fd     - toFloat:ldy ZP3
0971: a5 fe     -         lda ZP4
0973: 20 91 b3  -         jsr GIVAYF //A(h),Y(L) - FAC
0976: a2 9d     -         ldx #<flt
0978: a0 09     -         ldy #>flt
097a: 20 d4 bb  -         jsr MOVMF	//store FAC to flt
097d: a9 7f     -         lda #$7f
097f: 20 9a e0  -         jsr RND
0982: a9 9d     -         lda #<flt
0984: a0 09     -         ldy #>flt
0986: 20 28 ba  -         jsr FMULT
0989: 20 cc bc  -         jsr FAINT
098c: 20 bf b1  -         jsr AYINT
098f: a5 65     -         lda $65			
0991: 18        -         clc
0992: 65 fb     -         adc ZP1
0994: 85 14     -         sta WINT
0996: a5 64     -         lda $64
0998: 65 fc     -         adc ZP2
099a: 85 15     -         sta WINT+1
099c: 60        - over:   rts

[Data RND]
099d: 00 00 00 00 00                                   - dataRND,flt:.byte 0,0,0,0,0

[MAZE Memory]
09a2: 40 00     - MAZE_memory,maze_memory_alloc:.word $0040 	//screen by default, safe
09a4: ad d9 09  - irqcode:lda modeflag
09a7: f0 03     -         beq mode1
09a9: 4c c1 09  -         jmp mode2
09ac: a9 01     - mode1:  lda #$01
09ae: 8d d9 09  -         sta modeflag
09b1: a9 0e     -         lda #LIGHTBLUE
09b3: 8d 20 d0  -         sta BORDER
09b6: a9 32     -         lda #startRaster
09b8: 8d 12 d0  -         sta RASTER_COUNTER
09bb: 0e 19 d0  -         asl INTERRUPT_REQUEST_REGISTER
09be: 4c 31 ea  -         jmp IRQOUT
09c1: a9 00     - mode2:  lda #$00
09c3: 8d d9 09  -         sta modeflag
09c6: a9 06     -         lda #BLUE
09c8: 8d 20 d0  -         sta BORDER
09cb: a9 fa     -         lda #endRaster
09cd: 8d 12 d0  -         sta RASTER_COUNTER
09d0: 0e 19 d0  -         asl INTERRUPT_REQUEST_REGISTER
09d3: 68        -         pla
09d4: a8        -         tay
09d5: 68        -         pla
09d6: aa        -         tax
09d7: 68        -         pla
09d8: 40        -         rti

[Data]
09d9: 00        - text,data,modeflag:.byte 0
09da: 00        - startX: .byte 0
09db: 00        - startY: .byte 0
