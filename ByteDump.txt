******************************* Segment: Default *******************************
[Default]
2000: c6 48     - SPLICE: dec VAR_B								//array length - 1, last index
2002: a4 47     -         ldy VAR_A								//index
2004: c4 48     - loop:   cpy VAR_B								//stop if index
2006: 10 35     -         bpl out 								//equal or greater than last index
2008: a2 00     -         ldx #0									//number of properties (data_size), start from 0
200a: c8        - each:   iny		
200b: 84 40     -         sty TEMPY
200d: a5 49     -         lda	VAR_C 								//data size
200f: 20 3e 20  -         jsr MUL_Y_A
2012: 84 02     -         sty ZP0
2014: 8a        -         txa
2015: 18        -         clc
2016: 65 02     -         adc ZP0
2018: a8        -         tay
2019: b1 43     -         lda (BV1),y
201b: 85 41     -         sta TEMPA1
201d: a4 40     -         ldy TEMPY
201f: 88        -         dey
2020: 84 40     -         sty TEMPY
2022: a5 49     -         lda	VAR_C 								//data size
2024: 20 3e 20  -         jsr MUL_Y_A
2027: 84 02     -         sty ZP0
2029: 8a        -         txa
202a: 18        -         clc
202b: 65 02     -         adc ZP0
202d: a8        -         tay
202e: a5 41     -         lda TEMPA1
2030: 91 43     -         sta (BV1),y
2032: a4 40     -         ldy TEMPY
2034: e8        -         inx
2035: e4 49     -         cpx VAR_C								//all props? less than VAR_C ?
2037: 90 d1     -         bcc each
2039: c8        -         iny
203a: 4c 04 20  -         jmp loop
203d: 60        - out:    rts
203e: c0 00     - MUL_Y_A,multiply:cpy #00
2040: f0 18     -         beq end
2042: 88        -         dey
2043: 8c 50 20  -         sty mod+1
2046: 4a        -         lsr
2047: 85 02     -         sta ZP0
2049: a9 00     -         lda #00
204b: a0 08     -         ldy #$08
204d: 90 02     - loop:   bcc skip
204f: 69 00     - mod:    adc #0
2051: 6a        - skip:   ror
2052: 66 02     -         ror ZP0
2054: 88        -         dey
2055: d0 f6     -         bne loop
2057: a4 02     -         ldy ZP0
2059: 60        -         rts
205a: 98        - end:    tya
205b: 60        -         rts

[SYSTEM_data]
205c: 20 d2 ff  - SYS_data,printSequence:jsr CHROUT
205f: ca        -         dex
2060: d0 fa     -         bne printSequence
2062: 60        -         rts
2063: 86 fb     - printString:stx ZP1			//lo
2065: 84 fc     -         sty	ZP2			//hi
2067: a0 00     - next:   ldy #$00
2069: b1 fb     -         lda (ZP1),y		//load character
206b: c9 00     -         cmp #$00
206d: f0 0d     -         beq	out			//null terminator
206f: 20 d2 ff  -         jsr CHROUT
2072: 18        -         clc
2073: e6 fb     -         inc	ZP1
2075: d0 f0     -         bne	next
2077: e6 fc     -         inc ZP2
2079: 4c 67 20  -         jmp next
207c: 60        - out:    rts
207d: 86 fb     - lenString:stx ZP1			//lo
207f: 84 fc     -         sty	ZP2			//hi
2081: a0 00     -         ldy #$00		
2083: 84 fd     -         sty ZP3			//counter
2085: b1 fb     - next:   lda (ZP1),y		//load character
2087: c9 00     -         cmp #$00
2089: f0 04     -         beq	out			//null terminator
208b: c8        -         iny
208c: 4c 85 20  -         jmp next
208f: 98        - out:    tya
2090: 60        -         rts

[Grid_Constants]
2091: 00 ff     - Grid_Constants,BASIC_DIRS,UP:.byte 	0, -1
2093: 00 01     - DOWN:   .byte 	0, 1
2095: ff 00     - LEFT:   .byte	-1, 0
2097: 01 00     - RIGHT:  .byte 	1,0
2099: ff ff     - PROX_TEMPLATE:.byte 	-1, -1
209b: 01 01     -         .byte 	1, 1
209d: ff ff     -         .byte 	-1, -1
209f: 01 01     -         .byte 	1, 1
20a1: e6 fd     - rnd_XY: inc ZP3
20a3: d0 02     -         bne skip1
20a5: e6 fe     -         inc ZP4
20a7: a5 fd     - skip1:  lda ZP3
20a9: 38        -         sec
20aa: e5 fb     -         sbc ZP1
20ac: 85 fd     -         sta ZP3
20ae: a5 fe     -         lda ZP4
20b0: e5 fc     -         sbc ZP2
20b2: 85 fe     -         sta ZP4			
20b4: a4 fd     - toFloat:ldy ZP3
20b6: a5 fe     -         lda ZP4
20b8: 20 91 b3  -         jsr GIVAYF 					//A(h),Y(L) - FAC
20bb: a2 0d     -         ldx #<flt
20bd: a0 21     -         ldy #>flt
20bf: 20 d4 bb  -         jsr MOVMF					//store FAC to flt		
20c2: a9 00     -         lda #$00					//RND(0)
20c4: 20 9a e0  -         jsr RND						//$E09A
20c7: a9 0d     -         lda #<flt
20c9: a0 21     -         ldy #>flt
20cb: 20 28 ba  -         jsr FMULT					//Multiplies a number from RAM (A,y) and FAC	
20ce: 20 cc bc  -         jsr FAINT					//to integer
20d1: 20 bf b1  -         jsr AYINT					//fac to signed int HI $64 LO $65
20d4: a5 65     -         lda $65						//FAC mantissa lo
20d6: 18        -         clc
20d7: 65 fb     -         adc ZP1						//add number to start	
20d9: 85 14     -         sta WINT
20db: a5 64     -         lda $64						//FAC mantissa hi
20dd: 65 fc     -         adc ZP2
20df: 85 15     -         sta WINT+1
20e1: 60        - over:   rts			
20e2: e6 fd     - rnd_X:  inc ZP3
20e4: d0 02     -         bne toFloat
20e6: e6 fe     -         inc ZP4	
20e8: a4 fd     - toFloat:ldy ZP3
20ea: a5 fe     -         lda ZP4
20ec: 20 91 b3  -         jsr GIVAYF 					//A(h),Y(L) - FAC
20ef: a2 0d     -         ldx #<flt
20f1: a0 21     -         ldy #>flt
20f3: 20 d4 bb  -         jsr MOVMF					//store FAC to flt		
20f6: a9 00     -         lda #$00					//get actual RND(0)
20f8: 20 9a e0  -         jsr RND						//$E09A
20fb: a9 0d     -         lda #<flt
20fd: a0 21     -         ldy #>flt
20ff: 20 28 ba  -         jsr FMULT					//Multiplies a number from RAM (A,y) and FAC	
2102: 20 cc bc  -         jsr FAINT					//to integer
2105: 20 bf b1  -         jsr AYINT					//fac to signed int HI $64 LO $65
2108: a5 65     -         lda $65						//FAC mantissa lo
210a: 85 14     -         sta WINT					
210c: 60        -         rts			

[Data RND]
210d: 00 00 00 00 00                                   - dataRND,flt:.byte 0,0,0,0,0
2112: ad c5 25  - MAZE_FILL:lda X
2115: 85 fb     -         sta Y
2117: ad c6 25  -         lda X + 1
211a: 85 fc     -         sta Y + 1
211c: a9 e0     -         lda	#WALL
211e: a2 04     -         ldx #4
2120: a0 00     - block:  ldy #0
2122: 91 fb     - fill:   sta (ZP1),y
2124: c8        -         iny
2125: d0 fb     -         bne fill
2127: e6 fc     -         inc ZP2
2129: ca        -         dex
212a: d0 f4     -         bne block
212c: 60        -         rts
212d: ad c5 25  - MAZE_DOT:lda X
2130: 85 fb     -         sta Y
2132: ad c6 25  -         lda X + 1
2135: 85 fc     -         sta Y + 1
2137: a9 00     -         lda #0
2139: 85 fe     -         sta ZP4				
213b: ad c8 25  -         lda grid+1		
213e: 85 fd     -         sta ZP3
2140: a0 03     -         ldy #03
2142: 06 fd     - mul8:   asl X
2144: 26 fe     -         rol X+1	
2146: 88        -         dey
2147: d0 f9     -         bne mul8
2149: 18        -         clc
214a: a5 fb     -         lda X
214c: 65 fd     -         adc Y
214e: 85 fb     -         sta X
2150: 90 02     -         bcc skip
2152: e6 fc     -         inc X+1
2154: 18        - skip:   clc
2155: a5 fc     -         lda X+1
2157: 65 fe     -         adc Y+1
2159: 85 fc     -         sta X+1	
215b: a0 02     -         ldy #02	
215d: 06 fd     - mul32:  asl X
215f: 26 fe     -         rol X+1	
2161: 88        -         dey
2162: d0 f9     -         bne mul32
2164: 18        -         clc
2165: a5 fb     -         lda X
2167: 65 fd     -         adc Y
2169: 85 fb     -         sta X
216b: 90 02     -         bcc skip
216d: e6 fc     -         inc X+1
216f: 18        - skip:   clc
2170: a5 fc     -         lda X+1
2172: 65 fe     -         adc Y+1
2174: 85 fc     -         sta X+1	
2176: 18        -         clc
2177: a5 fb     -         lda X
2179: 6d c7 25  -         adc y	
217c: 85 fb     -         sta X
217e: 90 02     -         bcc out+2
2180: e6 fc     - out:    inc X+1
2182: a9 20     -         lda #DOT
2184: a0 00     -         ldy #0
2186: 91 fb     -         sta (ZP1),y
2188: 60        -         rts
2189: a9 cf     - POINTERS_FROM_START:lda #<addr
218b: 85 45     -         sta X
218d: a9 25     -         lda #>addr
218f: 85 46     -         sta X+1
2191: a9 91     -         lda #<addr
2193: 85 fd     -         sta X
2195: a9 20     -         lda #>addr
2197: 85 fe     -         sta X+1
2199: a2 03     -         ldx #03
219b: 8a        - add:    txa
219c: 0a        -         asl
219d: a8        -         tay		
219e: 18        -         clc
219f: ad c7 25  -         lda maze_start
21a2: 71 fd     -         adc (ZP3),y
21a4: 91 45     -         sta (BV3),y
21a6: c8        -         iny
21a7: 18        -         clc
21a8: ad c8 25  -         lda maze_start+1
21ab: 71 fd     -         adc (ZP3),y
21ad: 91 45     -         sta (BV3),y
21af: ca        -         dex
21b0: 10 e9     -         bpl add
21b2: a9 d7     -         lda #<addr
21b4: 85 4b     -         sta X
21b6: a9 25     -         lda #>addr
21b8: 85 4c     -         sta X+1
21ba: a2 03     -         ldx #03
21bc: 8a        - copy:   txa
21bd: 0a        -         asl
21be: a8        -         tay	
21bf: b1 fd     -         lda (ZP3),y
21c1: 91 4b     -         sta (BV5),y
21c3: c8        -         iny
21c4: b1 fd     -         lda (ZP3),y
21c6: 91 4b     -         sta (BV5),y
21c8: ca        -         dex
21c9: 10 f1     -         bpl copy
21cb: a9 04     -         lda #04
21cd: 8d df 25  -         sta candidates_length
21d0: 60        -         rts
21d1: ad df 25  - FILTER_IF_OUT:lda candidates_length
21d4: c9 01     -         cmp #1
21d6: b0 01     -         bcs start
21d8: 60        -         rts
21d9: a9 cf     - start:  lda #<addr
21db: 85 45     -         sta X
21dd: a9 25     -         lda #>addr
21df: 85 46     -         sta X+1
21e1: ae df 25  -         ldx candidates_length				//number of grids yet to check
21e4: ca        -         dex
21e5: 8a        - each:   txa
21e6: 0a        -         asl
21e7: a8        -         tay
21e8: 18        -         clc
21e9: b1 45     -         lda (BV3),y	
21eb: c9 27     -         cmp #MAX_X+1
21ed: b0 17     -         bcs shift
21ef: c9 01     -         cmp #MIN_X
21f1: 90 13     -         bcc shift
21f3: c8        -         iny
21f4: 18        -         clc
21f5: b1 45     -         lda (BV3),y
21f7: c9 18     -         cmp #MAX_Y+1
21f9: b0 0b     -         bcs shift
21fb: c9 01     -         cmp #MIN_Y
21fd: 90 07     -         bcc shift
21ff: ca        - cont:   dex
2200: 30 03     -         bmi out
2202: 4c e5 21  -         jmp each
2205: 60        - out:    rts
2206: 86 3f     - shift:  stx TEMPX									//save x							
2208: 86 47     -         stx VAR_A									//set index to VAR_A
220a: ad df 25  -         lda X
220d: 85 48     -         sta Y
220f: a9 cf     -         lda #<addr
2211: 85 43     -         sta X
2213: a9 25     -         lda #>addr
2215: 85 44     -         sta X+1
2217: a9 02     -         lda #data_size
2219: 85 49     -         sta VAR_C
221b: 20 00 20  -         jsr SPLICE
221e: ad df 25  -         lda X
2221: 85 48     -         sta Y
2223: a9 d7     -         lda #<addr
2225: 85 43     -         sta X
2227: a9 25     -         lda #>addr
2229: 85 44     -         sta X+1
222b: a9 02     -         lda #data_size
222d: 85 49     -         sta VAR_C
222f: 20 00 20  -         jsr SPLICE
2232: ce df 25  -         dec candidates_length						//dec array length
2235: a6 3f     -         ldx TEMPX									//restore x
2237: 4c ff 21  -         jmp cont									//return to loop
223a: ad df 25  - FILTER_IF_DOT:lda candidates_length
223d: c9 01     -         cmp #1
223f: b0 01     -         bcs start
2241: 60        -         rts
2242: a9 cf     - start:  lda #<addr
2244: 85 45     -         sta X
2246: a9 25     -         lda #>addr
2248: 85 46     -         sta X+1
224a: ae df 25  -         ldx candidates_length						//number of grids yet to check
224d: ca        -         dex
224e: 8a        - each:   txa
224f: 0a        -         asl
2250: a8        -         tay
2251: b1 45     -         lda (BV3),y
2253: 8d c9 25  -         sta grid_pointer
2256: c8        -         iny
2257: b1 45     -         lda (BV3),y
2259: 8d ca 25  -         sta grid_pointer+1
225c: ad c5 25  -         lda X
225f: 85 fb     -         sta Y
2261: ad c6 25  -         lda X + 1
2264: 85 fc     -         sta Y + 1
2266: a9 00     -         lda #0
2268: 85 fe     -         sta ZP4				
226a: ad ca 25  -         lda grid+1		
226d: 85 fd     -         sta ZP3
226f: a0 03     -         ldy #03
2271: 06 fd     - mul8:   asl X
2273: 26 fe     -         rol X+1	
2275: 88        -         dey
2276: d0 f9     -         bne mul8
2278: 18        -         clc
2279: a5 fb     -         lda X
227b: 65 fd     -         adc Y
227d: 85 fb     -         sta X
227f: 90 02     -         bcc skip
2281: e6 fc     -         inc X+1
2283: 18        - skip:   clc
2284: a5 fc     -         lda X+1
2286: 65 fe     -         adc Y+1
2288: 85 fc     -         sta X+1	
228a: a0 02     -         ldy #02	
228c: 06 fd     - mul32:  asl X
228e: 26 fe     -         rol X+1	
2290: 88        -         dey
2291: d0 f9     -         bne mul32
2293: 18        -         clc
2294: a5 fb     -         lda X
2296: 65 fd     -         adc Y
2298: 85 fb     -         sta X
229a: 90 02     -         bcc skip
229c: e6 fc     -         inc X+1
229e: 18        - skip:   clc
229f: a5 fc     -         lda X+1
22a1: 65 fe     -         adc Y+1
22a3: 85 fc     -         sta X+1	
22a5: 18        -         clc
22a6: a5 fb     -         lda X
22a8: 6d c9 25  -         adc y	
22ab: 85 fb     -         sta X
22ad: 90 02     -         bcc out+2
22af: e6 fc     - out:    inc X+1
22b1: a0 00     -         ldy #0
22b3: b1 fb     -         lda (ZP1),y
22b5: c9 20     -         cmp #DOT
22b7: f0 04     -         beq shift
22b9: ca        - cont:   dex
22ba: 10 92     -         bpl each
22bc: 60        - out:    rts
22bd: 86 3f     - shift:  stx TEMPX									//save x
22bf: 86 47     -         stx VAR_A									//set index to VAR_A
22c1: ad df 25  -         lda X
22c4: 85 48     -         sta Y
22c6: a9 cf     -         lda #<addr
22c8: 85 43     -         sta X
22ca: a9 25     -         lda #>addr
22cc: 85 44     -         sta X+1
22ce: a9 02     -         lda #data_size
22d0: 85 49     -         sta VAR_C
22d2: 20 00 20  -         jsr SPLICE
22d5: ad df 25  -         lda X
22d8: 85 48     -         sta Y
22da: a9 d7     -         lda #<addr
22dc: 85 43     -         sta X
22de: a9 25     -         lda #>addr
22e0: 85 44     -         sta X+1
22e2: a9 02     -         lda #data_size
22e4: 85 49     -         sta VAR_C
22e6: 20 00 20  -         jsr SPLICE
22e9: ce df 25  -         dec candidates_length						//dec array length
22ec: a6 3f     -         ldx TEMPX									//restore x
22ee: 4c b9 22  -         jmp cont									//return to loop
22f1: a5 02     - PUSH_REST_ON_STACK:lda ZP0										//index was stored in ZP0
22f3: 85 47     -         sta VAR_A									//set index to VAR_A
22f5: ad df 25  -         lda X
22f8: 85 48     -         sta Y
22fa: a9 cf     -         lda #<addr
22fc: 85 43     -         sta X
22fe: a9 25     -         lda #>addr
2300: 85 44     -         sta X+1
2302: a9 02     -         lda #data_size
2304: 85 49     -         sta VAR_C
2306: 20 00 20  -         jsr SPLICE
2309: ad df 25  -         lda X
230c: 85 48     -         sta Y
230e: a9 d7     -         lda #<addr
2310: 85 43     -         sta X
2312: a9 25     -         lda #>addr
2314: 85 44     -         sta X+1
2316: a9 02     -         lda #data_size
2318: 85 49     -         sta VAR_C
231a: 20 00 20  -         jsr SPLICE
231d: ce df 25  -         dec candidates_length						//dec array length
2320: a2 00     -         ldx #0
2322: a0 00     - each:   ldy #0
2324: 86 3f     -         stx TEMPX									//save x
2326: 8a        -         txa											//x = x *2	
2327: 0a        -         asl 
2328: aa        -         tax									
2329: bd cf 25  -         lda candidates,x							//x
232c: 91 71     -         sta (STKPTR1),y
232e: c8        -         iny
232f: e8        -         inx
2330: bd cf 25  -         lda candidates,x							//y
2333: 91 71     -         sta (STKPTR1),y
2335: 18        -         clc
2336: a5 71     -         lda X
2338: 69 02     -         adc #C
233a: 85 71     -         sta X
233c: 90 02     -         bcc out+2
233e: e6 72     - out:    inc X+1
2340: 88        -         dey
2341: ca        -         dex
2342: bd d7 25  -         lda candidates_vectors,x					//x
2345: 91 71     -         sta (STKPTR1),y
2347: c8        -         iny
2348: e8        -         inx
2349: bd d7 25  -         lda candidates_vectors,x					//y
234c: 91 71     -         sta (STKPTR1),y
234e: 18        -         clc
234f: a5 71     -         lda X
2351: 69 02     -         adc #C
2353: 85 71     -         sta X
2355: 90 02     -         bcc out+2
2357: e6 72     - out:    inc X+1
2359: a6 3f     -         ldx TEMPX									//restore x
235b: e8        -         inx
235c: ec df 25  -         cpx candidates_length
235f: d0 c1     -         bne each
2361: 60        - out:    rts		
2362: ad df 25  - FILTER_IF_CLOSE_PRIMARY:lda candidates_length
2365: c9 01     -         cmp #1
2367: b0 01     -         bcs start										//cont if 1 or more
2369: 60        -         rts												//else exit, if no candidates
236a: a9 cf     - start:  lda #<addr
236c: 85 45     -         sta X
236e: a9 25     -         lda #>addr
2370: 85 46     -         sta X+1
2372: a9 d7     -         lda #<addr
2374: 85 4b     -         sta X
2376: a9 25     -         lda #>addr
2378: 85 4c     -         sta X+1
237a: ae df 25  -         ldx candidates_length							//number of grids yet to check
237d: ca        -         dex												//to zero offset
237e: 8a        - each:   txa
237f: 0a        -         asl												//double, because datasize is 2
2380: a8        -         tay												//offset in y (zero based x * datasize)
2381: b1 45     -         lda (BV3),y
2383: 8d c9 25  -         sta grid_pointer
2386: b1 4b     -         lda (BV5),y
2388: 8d cb 25  -         sta direction_pointer
238b: c8        -         iny
238c: b1 45     -         lda (BV3),y
238e: 8d ca 25  -         sta grid_pointer+1
2391: b1 4b     -         lda (BV5),y
2393: 8d cc 25  -         sta direction_pointer+1
2396: 18        -         clc
2397: ad c9 25  -         lda grid_pointer
239a: 6d cb 25  -         adc direction_pointer
239d: 8d cd 25  -         sta test_pointer
23a0: 18        -         clc
23a1: ad ca 25  -         lda grid_pointer+1
23a4: 6d cc 25  -         adc direction_pointer+1
23a7: 8d ce 25  -         sta test_pointer+1
23aa: ad c5 25  -         lda X
23ad: 85 fb     -         sta Y
23af: ad c6 25  -         lda X + 1
23b2: 85 fc     -         sta Y + 1
23b4: a9 00     -         lda #0
23b6: 85 fe     -         sta ZP4				
23b8: ad ce 25  -         lda grid+1		
23bb: 85 fd     -         sta ZP3
23bd: a0 03     -         ldy #03
23bf: 06 fd     - mul8:   asl X
23c1: 26 fe     -         rol X+1	
23c3: 88        -         dey
23c4: d0 f9     -         bne mul8
23c6: 18        -         clc
23c7: a5 fb     -         lda X
23c9: 65 fd     -         adc Y
23cb: 85 fb     -         sta X
23cd: 90 02     -         bcc skip
23cf: e6 fc     -         inc X+1
23d1: 18        - skip:   clc
23d2: a5 fc     -         lda X+1
23d4: 65 fe     -         adc Y+1
23d6: 85 fc     -         sta X+1	
23d8: a0 02     -         ldy #02	
23da: 06 fd     - mul32:  asl X
23dc: 26 fe     -         rol X+1	
23de: 88        -         dey
23df: d0 f9     -         bne mul32
23e1: 18        -         clc
23e2: a5 fb     -         lda X
23e4: 65 fd     -         adc Y
23e6: 85 fb     -         sta X
23e8: 90 02     -         bcc skip
23ea: e6 fc     -         inc X+1
23ec: 18        - skip:   clc
23ed: a5 fc     -         lda X+1
23ef: 65 fe     -         adc Y+1
23f1: 85 fc     -         sta X+1	
23f3: 18        -         clc
23f4: a5 fb     -         lda X
23f6: 6d cd 25  -         adc y	
23f9: 85 fb     -         sta X
23fb: 90 02     -         bcc out+2
23fd: e6 fc     - out:    inc X+1
23ff: a0 00     -         ldy #0
2401: b1 fb     -         lda (ZP1),y
2403: c9 20     -         cmp #DOT									//is dot? (empty)
2405: f0 07     -         beq shift									//yes
2407: ca        - cont:   dex
2408: 30 03     -         bmi out										//less than zero, stop
240a: 4c 7e 23  -         jmp each									//loop back, branch too far
240d: 60        - out:    rts
240e: 86 3f     - shift:  stx TEMPX									//save x
2410: 86 47     -         stx VAR_A									//set index to VAR_A
2412: ad df 25  -         lda X
2415: 85 48     -         sta Y
2417: a9 cf     -         lda #<addr
2419: 85 43     -         sta X
241b: a9 25     -         lda #>addr
241d: 85 44     -         sta X+1
241f: a9 02     -         lda #data_size
2421: 85 49     -         sta VAR_C
2423: 20 00 20  -         jsr SPLICE
2426: ad df 25  -         lda X
2429: 85 48     -         sta Y
242b: a9 d7     -         lda #<addr
242d: 85 43     -         sta X
242f: a9 25     -         lda #>addr
2431: 85 44     -         sta X+1
2433: a9 02     -         lda #data_size
2435: 85 49     -         sta VAR_C
2437: 20 00 20  -         jsr SPLICE
243a: ce df 25  -         dec candidates_length						//dec array length
243d: a6 3f     -         ldx TEMPX									//restore x
243f: 4c 07 24  -         jmp cont									//return to loop
2442: ad df 25  - FILTER_SIDE_PROXIMIY:lda candidates_length
2445: c9 01     -         cmp #1
2447: b0 01     -         bcs start										//cont if 1 or more
2449: 60        -         rts												//else exit, if no candidates
244a: a9 cf     - start:  lda #<addr
244c: 85 45     -         sta X
244e: a9 25     -         lda #>addr
2450: 85 46     -         sta X+1
2452: a9 d7     -         lda #<addr
2454: 85 4b     -         sta X
2456: a9 25     -         lda #>addr
2458: 85 4c     -         sta X+1
245a: ae df 25  -         ldx candidates_length							//number of grids yet to check
245d: ca        -         dex												//to zero offset
245e: 8a        - each:   txa
245f: 0a        -         asl												//double, because datasize is 2
2460: a8        -         tay												//offset in y (zero based x * datasize)
2461: b1 45     -         lda (BV3),y
2463: 8d c9 25  -         sta grid_pointer
2466: b1 4b     -         lda (BV5),y
2468: 8d cb 25  -         sta direction_pointer
246b: c8        -         iny
246c: b1 45     -         lda (BV3),y
246e: 8d ca 25  -         sta grid_pointer+1
2471: b1 4b     -         lda (BV5),y
2473: 8d cc 25  -         sta direction_pointer+1
2476: a9 99     -         lda #<addr
2478: 85 50     -         sta X
247a: a9 20     -         lda #>addr
247c: 85 51     -         sta X+1
247e: a9 e0     -         lda #<addr
2480: 85 4e     -         sta X
2482: a9 25     -         lda #>addr
2484: 85 4f     -         sta X+1
2486: a0 08     -         ldy #length											
2488: 88        -         dey
2489: b1 50     - copy:   lda (BV7),y
248b: 91 4e     -         sta (BV9),y
248d: 88        -         dey
248e: 10 f9     -         bpl copy
2490: a0 01     -         ldy #01											//y?
2492: b9 cb 25  -         lda direction_pointer,y
2495: d0 01     -         bne ok											//if not zero, than this is right dimension
2497: 88        -         dey												//not y, but x
2498: b9 cb 25  - ok:     lda direction_pointer,y							//index of dimension now in y register
249b: 99 e0 25  -         sta proximity_vectors,y							//set sequence 1,1,0,0 on the right dimension, datasize=2
249e: c8        -         iny
249f: c8        -         iny
24a0: 99 e0 25  -         sta proximity_vectors,y	
24a3: c8        -         iny
24a4: c8        -         iny
24a5: a9 00     -         lda #0
24a7: 99 e0 25  -         sta proximity_vectors,y	
24aa: c8        -         iny
24ab: c8        -         iny
24ac: 99 e0 25  -         sta proximity_vectors,y							//proximity vectors ready
24af: a0 00     -         ldy #00
24b1: ad c9 25  - repeat: lda grid_pointer
24b4: 18        -         clc
24b5: 79 e0 25  -         adc proximity_vectors,y
24b8: 8d cd 25  -         sta test_pointer
24bb: c8        -         iny
24bc: ad ca 25  -         lda grid_pointer+1
24bf: 18        -         clc
24c0: 79 e0 25  -         adc proximity_vectors,y
24c3: 8d ce 25  -         sta test_pointer+1								//next grid now in test_pointer
24c6: 84 40     -         sty TEMPY										//save y
24c8: ad c5 25  -         lda X
24cb: 85 fb     -         sta Y
24cd: ad c6 25  -         lda X + 1
24d0: 85 fc     -         sta Y + 1
24d2: a9 00     -         lda #0
24d4: 85 fe     -         sta ZP4				
24d6: ad ce 25  -         lda grid+1		
24d9: 85 fd     -         sta ZP3
24db: a0 03     -         ldy #03
24dd: 06 fd     - mul8:   asl X
24df: 26 fe     -         rol X+1	
24e1: 88        -         dey
24e2: d0 f9     -         bne mul8
24e4: 18        -         clc
24e5: a5 fb     -         lda X
24e7: 65 fd     -         adc Y
24e9: 85 fb     -         sta X
24eb: 90 02     -         bcc skip
24ed: e6 fc     -         inc X+1
24ef: 18        - skip:   clc
24f0: a5 fc     -         lda X+1
24f2: 65 fe     -         adc Y+1
24f4: 85 fc     -         sta X+1	
24f6: a0 02     -         ldy #02	
24f8: 06 fd     - mul32:  asl X
24fa: 26 fe     -         rol X+1	
24fc: 88        -         dey
24fd: d0 f9     -         bne mul32
24ff: 18        -         clc
2500: a5 fb     -         lda X
2502: 65 fd     -         adc Y
2504: 85 fb     -         sta X
2506: 90 02     -         bcc skip
2508: e6 fc     -         inc X+1
250a: 18        - skip:   clc
250b: a5 fc     -         lda X+1
250d: 65 fe     -         adc Y+1
250f: 85 fc     -         sta X+1	
2511: 18        -         clc
2512: a5 fb     -         lda X
2514: 6d cd 25  -         adc y	
2517: 85 fb     -         sta X
2519: 90 02     -         bcc out+2
251b: e6 fc     - out:    inc X+1
251d: a0 00     -         ldy #0
251f: b1 fb     -         lda (ZP1),y
2521: c9 20     -         cmp #DOT										//is dot? (empty)
2523: f0 0e     -         beq shift										//yes, shift on x
2525: a4 40     -         ldy TEMPY										//restore y
2527: c8        -         iny
2528: c0 08     -         cpy #08
252a: d0 85     -         bne repeat
252c: ca        - cont:   dex
252d: 30 03     -         bmi out										//less than zero, stop
252f: 4c 5e 24  -         jmp each										//loop back, branch too far
2532: 60        - out:    rts
2533: 86 3f     - shift:  stx TEMPX									//save x
2535: 86 47     -         stx VAR_A									//set index to VAR_A
2537: ad df 25  -         lda X
253a: 85 48     -         sta Y
253c: a9 cf     -         lda #<addr
253e: 85 43     -         sta X
2540: a9 25     -         lda #>addr
2542: 85 44     -         sta X+1
2544: a9 02     -         lda #data_size
2546: 85 49     -         sta VAR_C
2548: 20 00 20  -         jsr SPLICE
254b: ad df 25  -         lda X
254e: 85 48     -         sta Y
2550: a9 d7     -         lda #<addr
2552: 85 43     -         sta X
2554: a9 25     -         lda #>addr
2556: 85 44     -         sta X+1
2558: a9 02     -         lda #data_size
255a: 85 49     -         sta VAR_C
255c: 20 00 20  -         jsr SPLICE
255f: ce df 25  -         dec candidates_length						//dec array length
2562: a6 3f     -         ldx TEMPX									//restore x
2564: 4c 2c 25  -         jmp cont									//return to loop
2567: 20 12 21  - MAZE:   jsr MAZE_FILL
256a: 20 2d 21  - outer,P_LOOP:jsr MAZE_DOT
256d: 20 89 21  -         jsr POINTERS_FROM_START
2570: 20 d1 21  -         jsr FILTER_IF_OUT
2573: 20 3a 22  -         jsr FILTER_IF_DOT
2576: 20 62 23  -         jsr FILTER_IF_CLOSE_PRIMARY
2579: 20 42 24  -         jsr FILTER_SIDE_PROXIMIY
257c: ad df 25  -         lda candidates_length						//check how many we have
257f: c9 00     -         cmp #00										//if zero break;
2581: f0 41     -         beq S_LOOP									//goto stack loop
2583: c9 02     -         cmp #02										//if it is two or more
2585: b0 05     -         bcs then									//go to else/then
2587: a9 00     -         lda #0										//otherwise, index->0 in A									
2589: 4c a0 25  -         jmp skip_else
258c: ad df 25  - then:   lda candidates_length
258f: aa        -         tax
2590: ca        -         dex
2591: 86 02     -         stx ZP0
2593: a5 02     -         lda X	
2595: 85 fd     -         sta ZP3
2597: a9 00     -         lda #0
2599: 85 fe     -         sta ZP4
259b: 20 e2 20  -         jsr rnd_X
259e: a5 14     -         lda WINT
25a0: 85 02     - skip_else:sta ZP0										//store index in ZP0	
25a2: 0a        -         asl 										//datasize=2	
25a3: a8        -         tay											//offset in y
25a4: a9 cf     -         lda #<addr
25a6: 85 43     -         sta X
25a8: a9 25     -         lda #>addr
25aa: 85 44     -         sta X+1
25ac: b1 43     -         lda (BV1),y
25ae: 8d c7 25  -         sta maze_start
25b1: c8        -         iny
25b2: b1 43     -         lda (BV1),y
25b4: 8d c8 25  -         sta maze_start+1
25b7: ad df 25  -         lda candidates_length
25ba: c9 02     -         cmp #02										//if there are 2 or more, selected has not been discarded yet
25bc: 90 03     -         bcc repeat_P								//no, repeat loop
25be: 20 f1 22  -         jsr PUSH_REST_ON_STACK						//!!!! incomplete !!!!							
25c1: 4c 6a 25  - repeat_P:jmp P_LOOP
25c4: 60        - S_LOOP,quit:rts

[MAZE Memory]
25c5: 40 00     - MAZE_memory,maze_memory_alloc:.word $0040 	//screen by default, safe
25c7: 00 00     - maze_start:.word 0
25c9: 00 00     - grid_pointer:.word 0
25cb: 00 00     - direction_pointer:.word 0
25cd: 00 00     - test_pointer:.word 0
25cf: 00 00     - candidates:.fill 2,0
25d1: 00 00     -         .fill 2,0
25d3: 00 00     -         .fill 2,0
25d5: 00 00     -         .fill 2,0
25d7: 00 00     - candidates_vectors:.fill 2,0
25d9: 00 00     -         .fill 2,0
25db: 00 00     -         .fill 2,0
25dd: 00 00     -         .fill 2,0
25df: 00        - candidates_length:.byte 0
25e0: 00 00     - proximity_vectors:.fill 2,0
25e2: 00 00     -         .fill 2,0
25e4: 00 00     -         .fill 2,0
25e6: 00 00     -         .fill 2,0
25e8: 2e 20     - debug:  .text ". "
25ea: 00        -         brk
