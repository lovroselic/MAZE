******************************* Segment: Default *******************************
[Header]
0801: 0c 08     -         .word bend
0803: 0d 00     -         .byte $0d, $00				//;line number
0805: 9e        -         .byte $9E					//;SYS
0806: 20        -         .byte $20					//;space
0807: 32 30 36 34                                      -         .byte $32,$30,$36,$34		//;start 2064
080b: 00        -         .byte $00					//;end of line
080c: 00 00     - bend:   .byte $00, $00				//;end of basic program

[Main]
0810: 78        -         sei							//set interrupt
0811: a9 7f     -         lda #$7f
0813: 8d 0d dc  -         sta CIA_ICR
0816: 8d 0d dd  -         sta CIA2_ICR
0819: ad 0d dc  -         lda CIA_ICR
081c: ad 0d dd  -         lda CIA2_ICR
081f: ad 1a d0  -         lda INTERRUPT_MASK_REGISTER	
0822: 09 01     -         ora #$01
0824: 8d 1a d0  -         sta INTERRUPT_MASK_REGISTER
0827: ad 11 d0  -         lda CONTROL_REGISTER1
082a: 29 7f     -         and #$7f
082c: 8d 11 d0  -         sta CONTROL_REGISTER1
082f: a9 32     -         lda #startRaster
0831: 8d 12 d0  -         sta RASTER_COUNTER
0834: a9 04     -         lda #<address
0836: 8d 14 03  -         sta IRQVEC
0839: a9 0d     -         lda #>address
083b: 8d 15 03  -         sta	IRQVEC+1
083e: 58        -         cli
083f: a9 ff     - begin,init:lda #$ff
0841: 8d 0e d4  -         sta FV3LO
0844: 8d 0f d4  -         sta FV3HI
0847: a9 80     -         lda #$80
0849: 8d 12 d4  -         sta CTRLREG_V3
084c: a9 26     -         lda #<end	
084e: 85 fd     -         sta ZP3
0850: a9 00     -         lda #>end
0852: 85 fe     -         sta ZP4
0854: a9 01     -         lda #<start
0856: 85 fb     -         sta ZP1
0858: a9 00     -         lda #>start
085a: 85 fc     -         sta ZP2
085c: 20 38 09  -         jsr rnd_XY
085f: a5 14     -         lda X
0861: 8d 3a 0d  -         sta Y
0864: a9 17     -         lda #<end	
0866: 85 fd     -         sta ZP3
0868: a9 00     -         lda #>end
086a: 85 fe     -         sta ZP4
086c: a9 01     -         lda #<start
086e: 85 fb     -         sta ZP1
0870: a9 00     -         lda #>start
0872: 85 fc     -         sta ZP2
0874: 20 38 09  -         jsr rnd_XY
0877: a5 14     -         lda X
0879: 8d 3b 0d  -         sta Y
087c: a9 00     -         lda #<addr
087e: 8d de 0c  -         sta X
0881: a9 04     -         lda #>addr
0883: 8d df 0c  -         sta X+1
0886: ad 3a 0d  -         lda X
0889: 8d e0 0c  -         sta Y
088c: ad 3b 0d  -         lda X + 1
088f: 8d e1 0c  -         sta Y + 1
0892: a9 00     -         lda #<addr
0894: 8d e6 0c  -         sta X
0897: a9 c0     -         lda #>addr
0899: 8d e7 0c  -         sta X+1
089c: 20 7b 0c  -         jsr MAZE
089f: a5 c5     - end,key:lda LSTX		//get character in A
08a1: c9 40     -         cmp #64			//no key
08a3: f0 fa     -         beq key
08a5: 60        -         rts

[Imports]
08a6: 20 d2 ff  - imports,printSequence:jsr CHROUT
08a9: ca        -         dex
08aa: d0 fa     -         bne printSequence
08ac: 60        -         rts
08ad: 86 fb     - printString:stx ZP1			//lo
08af: 84 fc     -         sty	ZP2			//hi
08b1: a0 00     - next:   ldy #$00
08b3: b1 fb     -         lda (ZP1),y		//load character
08b5: c9 00     -         cmp #$00
08b7: f0 0d     -         beq	out			//null terminator
08b9: 20 d2 ff  -         jsr CHROUT
08bc: 18        -         clc
08bd: e6 fb     -         inc	ZP1
08bf: d0 f0     -         bne	next
08c1: e6 fc     -         inc ZP2
08c3: 4c b1 08  -         jmp next
08c6: 60        - out:    rts
08c7: 86 fb     - lenString:stx ZP1			//lo
08c9: 84 fc     -         sty	ZP2			//hi
08cb: a0 00     -         ldy #$00		
08cd: 84 fd     -         sty ZP3			//counter
08cf: b1 fb     - next:   lda (ZP1),y		//load character
08d1: c9 00     -         cmp #$00
08d3: f0 04     -         beq	out			//null terminator
08d5: c8        -         iny
08d6: 4c cf 08  -         jmp next
08d9: 98        - out:    tya
08da: 60        -         rts
08db: d8        - SPLICE: cld
08dc: c6 48     -         dec VAR_B	//array length - 1
08de: a4 47     -         ldy VAR_A	//index
08e0: c4 48     - loop:   cpy VAR_B
08e2: b0 35     -         bcs out 	
08e4: a2 00     -         ldx #0			//number of properties (data_size), start from 0
08e6: c8        - each:   iny		
08e7: 84 40     -         sty TEMPY
08e9: a5 49     -         lda	VAR_C 		//data size
08eb: 20 1a 09  -         jsr MUL_Y_A
08ee: 84 02     -         sty ZP0
08f0: 8a        -         txa
08f1: 18        -         clc
08f2: 65 02     -         adc ZP0
08f4: a8        -         tay
08f5: b1 43     -         lda (BV1),y
08f7: 85 41     -         sta TEMPA1
08f9: a4 40     -         ldy TEMPY
08fb: 88        -         dey
08fc: 84 40     -         sty TEMPY
08fe: a5 49     -         lda	VAR_C 		//data size
0900: 20 1a 09  -         jsr MUL_Y_A
0903: 84 02     -         sty ZP0
0905: 8a        -         txa
0906: 18        -         clc
0907: 65 02     -         adc ZP0
0909: a8        -         tay
090a: a5 41     -         lda TEMPA1
090c: 91 43     -         sta (BV1),y
090e: e8        -         inx
090f: e4 49     -         cpx VAR_C		//all props? less than VAR_C ?
0911: a4 40     -         ldy TEMPY
0913: 90 d1     -         bcc each
0915: c8        -         iny
0916: 4c e0 08  -         jmp loop
0919: 60        - out:    rts
091a: c0 00     - MUL_Y_A,multiply:cpy #00
091c: f0 18     -         beq end
091e: 88        -         dey
091f: 8c 2c 09  -         sty mod+1
0922: 4a        -         lsr
0923: 85 02     -         sta ZP0
0925: a9 00     -         lda #00
0927: a0 08     -         ldy #$08
0929: 90 02     - loop:   bcc skip
092b: 69 00     - mod:    adc #0
092d: 6a        - skip:   ror
092e: 66 02     -         ror ZP0
0930: 88        -         dey
0931: d0 f6     -         bne loop
0933: a4 02     -         ldy ZP0
0935: 60        -         rts
0936: 98        - end:    tya
0937: 60        -         rts

[SYSTEM_data]
0938: a9 00     - SYS_data,rnd_XY:lda #00
093a: 20 9a e0  -         jsr RND
093d: e6 fd     -         inc ZP3
093f: d0 02     -         bne skip1
0941: e6 fe     -         inc ZP4
0943: a5 fd     - skip1:  lda ZP3
0945: 38        -         sec
0946: e5 fb     -         sbc ZP1
0948: 85 fd     -         sta ZP3
094a: a5 fe     -         lda ZP4
094c: e5 fc     -         sbc ZP2
094e: 85 fe     -         sta ZP4			
0950: a4 fd     - toFloat:ldy ZP3
0952: a5 fe     -         lda ZP4
0954: 20 91 b3  -         jsr GIVAYF //A(h),Y(L) - FAC
0957: a2 7e     -         ldx #<flt
0959: a0 09     -         ldy #>flt
095b: 20 d4 bb  -         jsr MOVMF	//store FAC to flt
095e: a9 7f     -         lda #$7f
0960: 20 9a e0  -         jsr RND
0963: a9 7e     -         lda #<flt
0965: a0 09     -         ldy #>flt
0967: 20 28 ba  -         jsr FMULT
096a: 20 cc bc  -         jsr FAINT
096d: 20 bf b1  -         jsr AYINT
0970: a5 65     -         lda $65			
0972: 18        -         clc
0973: 65 fb     -         adc ZP1
0975: 85 14     -         sta WINT
0977: a5 64     -         lda $64
0979: 65 fc     -         adc ZP2
097b: 85 15     -         sta WINT+1
097d: 60        - over:   rts

[Data RND]
097e: 00 00 00 00 00                                   - dataRND,flt:.byte 0,0,0,0,0

[Grid_Constants]
0983: 00 ff     - Grid_Constants,BASIC_DIRS,UP:.byte 	0, -1
0985: 00 01     - DOWN:   .byte 	0, 1
0987: ff 00     - LEFT:   .byte	-1, 0
0989: 01 00     - RIGHT:  .byte 	1,0
098b: ff ff     - CORNERS,UL:.byte 	-1, -1
098d: 01 ff     - UR:     .byte 	1, -1
098f: ff 01     - DL:     .byte 	-1, 1
0991: 01 01     - DR:     .byte 	1, 1
0993: ad de 0c  - MAZE_FILL:lda X
0996: 85 fb     -         sta Y
0998: ad df 0c  -         lda X + 1
099b: 85 fc     -         sta Y + 1
099d: a9 e0     -         lda	#WALL
099f: a2 04     -         ldx #4
09a1: a0 00     - block:  ldy #0
09a3: 91 fb     - fill:   sta (ZP1),y
09a5: c8        -         iny
09a6: d0 fb     -         bne fill
09a8: e6 fc     -         inc ZP2
09aa: ca        -         dex
09ab: d0 f4     -         bne block
09ad: 60        -         rts
09ae: ad de 0c  - MAZE_DOT:lda X
09b1: 85 fb     -         sta Y
09b3: ad df 0c  -         lda X + 1
09b6: 85 fc     -         sta Y + 1
09b8: a9 00     -         lda #0
09ba: 85 fe     -         sta ZP4				
09bc: ad e1 0c  -         lda grid+1		
09bf: 85 fd     -         sta ZP3
09c1: a0 03     -         ldy #03
09c3: 06 fd     - mul8:   asl X
09c5: 26 fe     -         rol X+1	
09c7: 88        -         dey
09c8: d0 f9     -         bne mul8
09ca: 18        -         clc
09cb: a5 fb     -         lda X
09cd: 65 fd     -         adc Y
09cf: 85 fb     -         sta X
09d1: 90 02     -         bcc skip
09d3: e6 fc     -         inc X+1
09d5: 18        - skip:   clc
09d6: a5 fc     -         lda X+1
09d8: 65 fe     -         adc Y+1
09da: 85 fc     -         sta X+1	
09dc: a0 02     -         ldy #02	
09de: 06 fd     - mul32:  asl X
09e0: 26 fe     -         rol X+1	
09e2: 88        -         dey
09e3: d0 f9     -         bne mul32
09e5: 18        -         clc
09e6: a5 fb     -         lda X
09e8: 65 fd     -         adc Y
09ea: 85 fb     -         sta X
09ec: 90 02     -         bcc skip
09ee: e6 fc     -         inc X+1
09f0: 18        - skip:   clc
09f1: a5 fc     -         lda X+1
09f3: 65 fe     -         adc Y+1
09f5: 85 fc     -         sta X+1	
09f7: 18        -         clc
09f8: a5 fb     -         lda X
09fa: 6d e0 0c  -         adc y	
09fd: 85 fb     -         sta X
09ff: 90 02     -         bcc out+2
0a01: e6 fc     - out:    inc X+1
0a03: a9 20     -         lda #DOT
0a05: a0 00     -         ldy #0
0a07: 91 fb     -         sta (ZP1),y
0a09: 60        -         rts
0a0a: d8        - POINTERS_FROM_START:cld
0a0b: a9 e8     -         lda #<addr
0a0d: 85 fb     -         sta X
0a0f: a9 0c     -         lda #>addr
0a11: 85 fc     -         sta X+1
0a13: a9 83     -         lda #<addr
0a15: 85 fd     -         sta X
0a17: a9 09     -         lda #>addr
0a19: 85 fe     -         sta X+1
0a1b: a2 03     -         ldx #03
0a1d: 8a        - add:    txa
0a1e: 0a        -         asl
0a1f: a8        -         tay		
0a20: 18        -         clc
0a21: ad e0 0c  -         lda maze_start
0a24: 71 fd     -         adc (ZP3),y
0a26: 91 fb     -         sta (ZP1),y
0a28: c8        -         iny
0a29: 18        -         clc
0a2a: ad e1 0c  -         lda maze_start+1
0a2d: 71 fd     -         adc (ZP3),y
0a2f: 91 fb     -         sta (ZP1),y
0a31: ca        -         dex
0a32: 10 e9     -         bpl add
0a34: a9 f0     -         lda #<addr
0a36: 85 fb     -         sta X
0a38: a9 0c     -         lda #>addr
0a3a: 85 fc     -         sta X+1
0a3c: a2 03     -         ldx #03
0a3e: 8a        - copy:   txa
0a3f: 0a        -         asl
0a40: a8        -         tay	
0a41: b1 fd     -         lda (ZP3),y
0a43: 91 fb     -         sta (ZP1),y
0a45: c8        -         iny
0a46: b1 fd     -         lda (ZP3),y
0a48: 91 fb     -         sta (ZP1),y
0a4a: ca        -         dex
0a4b: 10 f1     -         bpl copy
0a4d: a9 04     -         lda #04
0a4f: 8d f8 0c  -         sta candidates_length
0a52: 60        -         rts
0a53: d8        - FILTER_IF_OUT:cld
0a54: a9 e8     -         lda #<addr
0a56: 85 fb     -         sta X
0a58: a9 0c     -         lda #>addr
0a5a: 85 fc     -         sta X+1
0a5c: ad f8 0c  -         lda candidates_length
0a5f: c9 00     -         cmp #0
0a61: f0 1f     -         beq out
0a63: aa        -         tax
0a64: ca        -         dex
0a65: 8a        - each:   txa
0a66: 0a        -         asl
0a67: a8        -         tay
0a68: 18        -         clc
0a69: b1 fb     -         lda (ZP1),y	
0a6b: c9 27     -         cmp #MAX_X+1
0a6d: b0 14     -         bcs shift
0a6f: c9 01     -         cmp #MIN_X
0a71: 90 10     -         bcc shift
0a73: c8        -         iny
0a74: 18        -         clc
0a75: b1 fb     -         lda (ZP1),y
0a77: c9 18     -         cmp #MAX_Y+1
0a79: b0 08     -         bcs shift
0a7b: c9 01     -         cmp #MIN_Y
0a7d: 90 04     -         bcc shift
0a7f: ca        - cont:   dex
0a80: 10 e3     -         bpl each
0a82: 60        - out:    rts
0a83: 86 3f     - shift:  stx TEMPX									//save x							
0a85: 86 47     -         stx VAR_A									//set index to VAR_A
0a87: ad f8 0c  -         lda X
0a8a: 85 48     -         sta Y
0a8c: a9 e8     -         lda #<addr
0a8e: 85 43     -         sta X
0a90: a9 0c     -         lda #>addr
0a92: 85 44     -         sta X+1
0a94: a9 02     -         lda #data_size
0a96: 85 49     -         sta VAR_C
0a98: 20 db 08  -         jsr SPLICE
0a9b: ad f8 0c  -         lda X
0a9e: 85 48     -         sta Y
0aa0: a9 f0     -         lda #<addr
0aa2: 85 43     -         sta X
0aa4: a9 0c     -         lda #>addr
0aa6: 85 44     -         sta X+1
0aa8: a9 02     -         lda #data_size
0aaa: 85 49     -         sta VAR_C
0aac: 20 db 08  -         jsr SPLICE
0aaf: ce f8 0c  -         dec candidates_length						//dec array length
0ab2: a6 3f     -         ldx TEMPX									//restore x
0ab4: 4c 7f 0a  -         jmp cont									//return to loop
0ab7: d8        - FILTER_IF_DOT:cld
0ab8: a9 e8     -         lda #<addr
0aba: 85 45     -         sta X
0abc: a9 0c     -         lda #>addr
0abe: 85 46     -         sta X+1
0ac0: ad f8 0c  -         lda candidates_length
0ac3: c9 00     -         cmp #0
0ac5: f0 70     -         beq out
0ac7: aa        -         tax											//number of grids yet to check
0ac8: ca        -         dex
0ac9: 8a        - each:   txa
0aca: 0a        -         asl
0acb: a8        -         tay
0acc: b1 45     -         lda (BV3),y
0ace: 8d e2 0c  -         sta grid_pointer
0ad1: c8        -         iny
0ad2: b1 45     -         lda (BV3),y
0ad4: 8d e3 0c  -         sta grid_pointer+1
0ad7: ad de 0c  -         lda X
0ada: 85 fb     -         sta Y
0adc: ad df 0c  -         lda X + 1
0adf: 85 fc     -         sta Y + 1
0ae1: a9 00     -         lda #0
0ae3: 85 fe     -         sta ZP4				
0ae5: ad e3 0c  -         lda grid+1		
0ae8: 85 fd     -         sta ZP3
0aea: a0 03     -         ldy #03
0aec: 06 fd     - mul8:   asl X
0aee: 26 fe     -         rol X+1	
0af0: 88        -         dey
0af1: d0 f9     -         bne mul8
0af3: 18        -         clc
0af4: a5 fb     -         lda X
0af6: 65 fd     -         adc Y
0af8: 85 fb     -         sta X
0afa: 90 02     -         bcc skip
0afc: e6 fc     -         inc X+1
0afe: 18        - skip:   clc
0aff: a5 fc     -         lda X+1
0b01: 65 fe     -         adc Y+1
0b03: 85 fc     -         sta X+1	
0b05: a0 02     -         ldy #02	
0b07: 06 fd     - mul32:  asl X
0b09: 26 fe     -         rol X+1	
0b0b: 88        -         dey
0b0c: d0 f9     -         bne mul32
0b0e: 18        -         clc
0b0f: a5 fb     -         lda X
0b11: 65 fd     -         adc Y
0b13: 85 fb     -         sta X
0b15: 90 02     -         bcc skip
0b17: e6 fc     -         inc X+1
0b19: 18        - skip:   clc
0b1a: a5 fc     -         lda X+1
0b1c: 65 fe     -         adc Y+1
0b1e: 85 fc     -         sta X+1	
0b20: 18        -         clc
0b21: a5 fb     -         lda X
0b23: 6d e2 0c  -         adc y	
0b26: 85 fb     -         sta X
0b28: 90 02     -         bcc out+2
0b2a: e6 fc     - out:    inc X+1
0b2c: a0 00     -         ldy #0
0b2e: b1 fb     -         lda (ZP1),y
0b30: c9 20     -         cmp #DOT
0b32: f0 04     -         beq shift
0b34: ca        - cont:   dex
0b35: 10 92     -         bpl each
0b37: 60        - out:    rts
0b38: 86 3f     - shift:  stx TEMPX									//save x
0b3a: 86 47     -         stx VAR_A									//set index to VAR_A
0b3c: ad f8 0c  -         lda X
0b3f: 85 48     -         sta Y
0b41: a9 e8     -         lda #<addr
0b43: 85 43     -         sta X
0b45: a9 0c     -         lda #>addr
0b47: 85 44     -         sta X+1
0b49: a9 02     -         lda #data_size
0b4b: 85 49     -         sta VAR_C
0b4d: 20 db 08  -         jsr SPLICE
0b50: ad f8 0c  -         lda X
0b53: 85 48     -         sta Y
0b55: a9 f0     -         lda #<addr
0b57: 85 43     -         sta X
0b59: a9 0c     -         lda #>addr
0b5b: 85 44     -         sta X+1
0b5d: a9 02     -         lda #data_size
0b5f: 85 49     -         sta VAR_C
0b61: 20 db 08  -         jsr SPLICE
0b64: ce f8 0c  -         dec candidates_length						//dec array length
0b67: a6 3f     -         ldx TEMPX									//restore x
0b69: 4c 34 0b  -         jmp cont									//return to loop
0b6c: a5 02     - PUSH_REST_ON_STACK:lda ZP0										//index was stored in ZP0
0b6e: 85 47     -         sta VAR_A									//set index to VAR_A
0b70: ad f8 0c  -         lda X
0b73: 85 48     -         sta Y
0b75: a9 e8     -         lda #<addr
0b77: 85 43     -         sta X
0b79: a9 0c     -         lda #>addr
0b7b: 85 44     -         sta X+1
0b7d: a9 02     -         lda #data_size
0b7f: 85 49     -         sta VAR_C
0b81: 20 db 08  -         jsr SPLICE
0b84: ad f8 0c  -         lda X
0b87: 85 48     -         sta Y
0b89: a9 f0     -         lda #<addr
0b8b: 85 43     -         sta X
0b8d: a9 0c     -         lda #>addr
0b8f: 85 44     -         sta X+1
0b91: a9 02     -         lda #data_size
0b93: 85 49     -         sta VAR_C
0b95: 20 db 08  -         jsr SPLICE
0b98: ce f8 0c  -         dec candidates_length						//dec array length
0b9b: 60        - out:    rts		
0b9c: d8        - FILTER_IF_CLOSE_PRIMARY:cld
0b9d: a9 e8     -         lda #<addr
0b9f: 85 45     -         sta X
0ba1: a9 0c     -         lda #>addr
0ba3: 85 46     -         sta X+1
0ba5: a9 f0     -         lda #<addr
0ba7: 85 4b     -         sta X
0ba9: a9 0c     -         lda #>addr
0bab: 85 4c     -         sta X+1
0bad: ad f8 0c  -         lda candidates_length
0bb0: c9 01     -         cmp #1
0bb2: 10 01     -         bpl start										//cont if 1 or more
0bb4: 60        -         rts												//else exit, if no candidates
0bb5: aa        - start:  tax												//number of grids yet to check
0bb6: ca        -         dex												//to zero offset
0bb7: 8a        - each:   txa
0bb8: 0a        -         asl												//double, because datasize is 2
0bb9: a8        -         tay												//offset in y (zero based x * datasize)
0bba: b1 45     -         lda (BV3),y
0bbc: 8d e2 0c  -         sta grid_pointer
0bbf: b1 4b     -         lda (BV5),y
0bc1: 8d e4 0c  -         sta direction_pointer
0bc4: c8        -         iny
0bc5: b1 45     -         lda (BV3),y
0bc7: 8d e3 0c  -         sta grid_pointer+1
0bca: b1 4b     -         lda (BV5),y
0bcc: 8d e5 0c  -         sta direction_pointer+1
0bcf: ad e2 0c  -         lda grid_pointer
0bd2: 18        -         clc
0bd3: 6d e4 0c  -         adc direction_pointer
0bd6: 8d e2 0c  -         sta grid_pointer
0bd9: ad e3 0c  -         lda grid_pointer+1
0bdc: 18        -         clc
0bdd: 6d e5 0c  -         adc direction_pointer+1
0be0: 8d e3 0c  -         sta grid_pointer+1
0be3: ad de 0c  -         lda X
0be6: 85 fb     -         sta Y
0be8: ad df 0c  -         lda X + 1
0beb: 85 fc     -         sta Y + 1
0bed: a9 00     -         lda #0
0bef: 85 fe     -         sta ZP4				
0bf1: ad e3 0c  -         lda grid+1		
0bf4: 85 fd     -         sta ZP3
0bf6: a0 03     -         ldy #03
0bf8: 06 fd     - mul8:   asl X
0bfa: 26 fe     -         rol X+1	
0bfc: 88        -         dey
0bfd: d0 f9     -         bne mul8
0bff: 18        -         clc
0c00: a5 fb     -         lda X
0c02: 65 fd     -         adc Y
0c04: 85 fb     -         sta X
0c06: 90 02     -         bcc skip
0c08: e6 fc     -         inc X+1
0c0a: 18        - skip:   clc
0c0b: a5 fc     -         lda X+1
0c0d: 65 fe     -         adc Y+1
0c0f: 85 fc     -         sta X+1	
0c11: a0 02     -         ldy #02	
0c13: 06 fd     - mul32:  asl X
0c15: 26 fe     -         rol X+1	
0c17: 88        -         dey
0c18: d0 f9     -         bne mul32
0c1a: 18        -         clc
0c1b: a5 fb     -         lda X
0c1d: 65 fd     -         adc Y
0c1f: 85 fb     -         sta X
0c21: 90 02     -         bcc skip
0c23: e6 fc     -         inc X+1
0c25: 18        - skip:   clc
0c26: a5 fc     -         lda X+1
0c28: 65 fe     -         adc Y+1
0c2a: 85 fc     -         sta X+1	
0c2c: 18        -         clc
0c2d: a5 fb     -         lda X
0c2f: 6d e2 0c  -         adc y	
0c32: 85 fb     -         sta X
0c34: 90 02     -         bcc out+2
0c36: e6 fc     - out:    inc X+1
0c38: a0 00     -         ldy #0
0c3a: b1 fb     -         lda (ZP1),y
0c3c: c9 20     -         cmp #DOT									//is dot? (empty)
0c3e: f0 07     -         beq shift									//yes
0c40: ca        - cont:   dex
0c41: 30 03     -         bmi out										//less than zero, stop
0c43: 4c b7 0b  -         jmp each									//loop back, branch too far
0c46: 60        - out:    rts
0c47: 86 3f     - shift:  stx TEMPX									//save x
0c49: 86 47     -         stx VAR_A									//set index to VAR_A
0c4b: ad f8 0c  -         lda X
0c4e: 85 48     -         sta Y
0c50: a9 e8     -         lda #<addr
0c52: 85 43     -         sta X
0c54: a9 0c     -         lda #>addr
0c56: 85 44     -         sta X+1
0c58: a9 02     -         lda #data_size
0c5a: 85 49     -         sta VAR_C
0c5c: 20 db 08  -         jsr SPLICE
0c5f: ad f8 0c  -         lda X
0c62: 85 48     -         sta Y
0c64: a9 f0     -         lda #<addr
0c66: 85 43     -         sta X
0c68: a9 0c     -         lda #>addr
0c6a: 85 44     -         sta X+1
0c6c: a9 02     -         lda #data_size
0c6e: 85 49     -         sta VAR_C
0c70: 20 db 08  -         jsr SPLICE
0c73: ce f8 0c  -         dec candidates_length						//dec array length
0c76: a6 3f     -         ldx TEMPX									//restore x
0c78: 4c 40 0c  -         jmp cont									//return to loop
0c7b: 20 93 09  - MAZE:   jsr MAZE_FILL
0c7e: 20 ae 09  - outer,P_LOOP:jsr MAZE_DOT
0c81: 20 0a 0a  -         jsr POINTERS_FROM_START
0c84: 20 53 0a  -         jsr FILTER_IF_OUT
0c87: 20 b7 0a  -         jsr FILTER_IF_DOT
0c8a: 20 9c 0b  -         jsr FILTER_IF_CLOSE_PRIMARY
0c8d: ad f8 0c  -         lda candidates_length						//check how many we have
0c90: c9 00     -         cmp #00										//if zero break;
0c92: f0 49     -         beq S_LOOP									//goto stack loop
0c94: c9 01     -         cmp #01										//if just one
0c96: b0 05     -         bcs then									//if not go to else/then
0c98: a9 00     -         lda #0										//index in A									
0c9a: 4c b9 0c  -         jmp skip_else
0c9d: ad f8 0c  - then:   lda candidates_length
0ca0: aa        -         tax
0ca1: ca        -         dex
0ca2: 86 02     -         stx ZP0
0ca4: a9 02     -         lda #<end	
0ca6: 85 fd     -         sta ZP3
0ca8: a9 00     -         lda #>end
0caa: 85 fe     -         sta ZP4
0cac: a9 00     -         lda #<start
0cae: 85 fb     -         sta ZP1
0cb0: a9 00     -         lda #>start
0cb2: 85 fc     -         sta ZP2
0cb4: 20 38 09  -         jsr rnd_XY
0cb7: a5 14     -         lda WINT
0cb9: 85 02     - skip_else:sta ZP0										//store index in ZP0	
0cbb: 0a        -         asl 										//datasize=2	
0cbc: a8        -         tay											//offset in y
0cbd: a9 e8     -         lda #<addr
0cbf: 85 43     -         sta X
0cc1: a9 0c     -         lda #>addr
0cc3: 85 44     -         sta X+1
0cc5: b1 43     -         lda (BV1),y
0cc7: 8d e0 0c  -         sta maze_start
0cca: c8        -         iny
0ccb: b1 43     -         lda (BV1),y
0ccd: 8d e1 0c  -         sta maze_start+1
0cd0: ad f8 0c  -         lda candidates_length
0cd3: c9 02     -         cmp #02										//if there are 2 or more, selected has not been discarded yet
0cd5: 90 03     -         bcc repeat_P								//no, repeat loop
0cd7: 20 6c 0b  -         jsr PUSH_REST_ON_STACK						//!!!! incomplete !!!!							
0cda: 4c 7e 0c  - repeat_P:jmp P_LOOP
0cdd: 60        - S_LOOP,quit:rts

[MAZE Memory]
0cde: 40 00     - MAZE_memory,maze_memory_alloc:.word $0040 	//screen by default, safe
0ce0: 00 00     - maze_start:.word 0
0ce2: 00 00     - grid_pointer:.word 0
0ce4: 00 00     - direction_pointer:.word 0
0ce6: 00 00     - stack_pointer:.word 0
0ce8: 00 00     - candidates:.fill 2,0
0cea: 00 00     -         .fill 2,0
0cec: 00 00     -         .fill 2,0
0cee: 00 00     -         .fill 2,0
0cf0: 00 00     - candidates_vectors:.fill 2,0
0cf2: 00 00     -         .fill 2,0
0cf4: 00 00     -         .fill 2,0
0cf6: 00 00     -         .fill 2,0
0cf8: 00        - candidates_length:.byte 0
0cf9: 00 00     - proximity:.fill 2,0
0cfb: 00 00     -         .fill 2,0
0cfd: 00 00     -         .fill 2,0
0cff: 00 00     -         .fill 2,0
0d01: 2e 20     - debug:  .text ". "
0d03: 00        -         brk

[Subroutines]
0d04: ad 39 0d  - subs,irqcode:lda modeflag
0d07: f0 03     -         beq mode1
0d09: 4c 21 0d  -         jmp mode2
0d0c: a9 01     - mode1:  lda #$01
0d0e: 8d 39 0d  -         sta modeflag
0d11: a9 0e     -         lda #LIGHTBLUE
0d13: 8d 20 d0  -         sta BORDER
0d16: a9 32     -         lda #startRaster
0d18: 8d 12 d0  -         sta RASTER_COUNTER
0d1b: 0e 19 d0  -         asl INTERRUPT_REQUEST_REGISTER
0d1e: 4c 31 ea  -         jmp IRQOUT
0d21: a9 00     - mode2:  lda #$00
0d23: 8d 39 0d  -         sta modeflag
0d26: a9 06     -         lda #BLUE
0d28: 8d 20 d0  -         sta BORDER
0d2b: a9 fa     -         lda #endRaster
0d2d: 8d 12 d0  -         sta RASTER_COUNTER
0d30: 0e 19 d0  -         asl INTERRUPT_REQUEST_REGISTER
0d33: 68        -         pla
0d34: a8        -         tay
0d35: 68        -         pla
0d36: aa        -         tax
0d37: 68        -         pla
0d38: 40        -         rti

[Data]
0d39: 00        - text,data,modeflag:.byte 0
0d3a: 00        - startX: .byte 0
0d3b: 00        - startY: .byte 0
