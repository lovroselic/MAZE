******************************* Segment: Default *******************************
[Header]
0801: 0c 08     -         .word bend
0803: 0d 00     -         .byte $0d, $00				//;line number
0805: 9e        -         .byte $9E					//;SYS
0806: 20        -         .byte $20					//;space
0807: 32 30 36 34                                      -         .byte $32,$30,$36,$34		//;start 2064
080b: 00        -         .byte $00					//;end of line
080c: 00 00     - bend:   .byte $00, $00				//;end of basic program

[Main]
0810: 78        -         sei							//set interrupt
0811: a9 7f     -         lda #$7f
0813: 8d 0d dc  -         sta CIA_ICR
0816: 8d 0d dd  -         sta CIA2_ICR
0819: ad 0d dc  -         lda CIA_ICR
081c: ad 0d dd  -         lda CIA2_ICR
081f: ad 1a d0  -         lda INTERRUPT_MASK_REGISTER	
0822: 09 01     -         ora #$01
0824: 8d 1a d0  -         sta INTERRUPT_MASK_REGISTER
0827: ad 11 d0  -         lda CONTROL_REGISTER1
082a: 29 7f     -         and #$7f
082c: 8d 11 d0  -         sta CONTROL_REGISTER1
082f: a9 32     -         lda #startRaster
0831: 8d 12 d0  -         sta RASTER_COUNTER
0834: a9 a5     -         lda #<address
0836: 8d 14 03  -         sta IRQVEC
0839: a9 0e     -         lda #>address
083b: 8d 15 03  -         sta	IRQVEC+1
083e: 58        -         cli
083f: d8        - begin:  cld
0840: a9 26     - init:   lda #<end	
0842: 85 fd     -         sta ZP3
0844: a9 00     -         lda #>end
0846: 85 fe     -         sta ZP4
0848: a9 01     -         lda #<start
084a: 85 fb     -         sta ZP1
084c: a9 00     -         lda #>start
084e: 85 fc     -         sta ZP2
0850: 20 f7 08  -         jsr rnd_XY
0853: a5 14     -         lda X
0855: 8d db 0e  -         sta Y
0858: a9 17     -         lda #<end	
085a: 85 fd     -         sta ZP3
085c: a9 00     -         lda #>end
085e: 85 fe     -         sta ZP4
0860: a9 01     -         lda #<start
0862: 85 fb     -         sta ZP1
0864: a9 00     -         lda #>start
0866: 85 fc     -         sta ZP2
0868: 20 f7 08  -         jsr rnd_XY
086b: a5 14     -         lda X
086d: 8d dc 0e  -         sta Y
0870: a9 00     -         lda #<addr
0872: 8d 7f 0e  -         sta X
0875: a9 04     -         lda #>addr
0877: 8d 80 0e  -         sta X+1
087a: ad db 0e  -         lda X
087d: 8d 81 0e  -         sta Y
0880: ad dc 0e  -         lda X + 1
0883: 8d 82 0e  -         sta Y + 1
0886: a9 00     -         lda #<addr
0888: 85 71     -         sta X
088a: a9 c0     -         lda #>addr
088c: 85 72     -         sta X+1
088e: 20 f3 0d  -         jsr MAZE
0891: a5 c5     - end,key:lda LSTX		//get character in A
0893: c9 40     -         cmp #64			//no key
0895: f0 fa     -         beq key
0897: 4c 40 08  -         jmp init
089a: 60        -         rts

[Imports]
089b: c6 48     - imports,SPLICE:dec VAR_B								//array length - 1, last index
089d: a4 47     -         ldy VAR_A								//index
089f: c4 48     - loop:   cpy VAR_B								//stop if index
08a1: 10 35     -         bpl out 								//equal or greater than last index
08a3: a2 00     -         ldx #0									//number of properties (data_size), start from 0
08a5: c8        - each:   iny		
08a6: 84 40     -         sty TEMPY
08a8: a5 49     -         lda	VAR_C 								//data size
08aa: 20 d9 08  -         jsr MUL_Y_A
08ad: 84 02     -         sty ZP0
08af: 8a        -         txa
08b0: 18        -         clc
08b1: 65 02     -         adc ZP0
08b3: a8        -         tay
08b4: b1 43     -         lda (BV1),y
08b6: 85 41     -         sta TEMPA1
08b8: a4 40     -         ldy TEMPY
08ba: 88        -         dey
08bb: 84 40     -         sty TEMPY
08bd: a5 49     -         lda	VAR_C 								//data size
08bf: 20 d9 08  -         jsr MUL_Y_A
08c2: 84 02     -         sty ZP0
08c4: 8a        -         txa
08c5: 18        -         clc
08c6: 65 02     -         adc ZP0
08c8: a8        -         tay
08c9: a5 41     -         lda TEMPA1
08cb: 91 43     -         sta (BV1),y
08cd: a4 40     -         ldy TEMPY
08cf: e8        -         inx
08d0: e4 49     -         cpx VAR_C								//all props? less than VAR_C ?
08d2: 90 d1     -         bcc each
08d4: c8        -         iny
08d5: 4c 9f 08  -         jmp loop
08d8: 60        - out:    rts
08d9: c0 00     - MUL_Y_A,multiply:cpy #00
08db: f0 18     -         beq end
08dd: 88        -         dey
08de: 8c eb 08  -         sty mod+1
08e1: 4a        -         lsr
08e2: 85 02     -         sta ZP0
08e4: a9 00     -         lda #00
08e6: a0 08     -         ldy #$08
08e8: 90 02     - loop:   bcc skip
08ea: 69 00     - mod:    adc #0
08ec: 6a        - skip:   ror
08ed: 66 02     -         ror ZP0
08ef: 88        -         dey
08f0: d0 f6     -         bne loop
08f2: a4 02     -         ldy ZP0
08f4: 60        -         rts
08f5: 98        - end:    tya
08f6: 60        -         rts

[SYSTEM_data]
08f7: e6 fd     - SYS_data,rnd_XY:inc ZP3
08f9: d0 02     -         bne skip1
08fb: e6 fe     -         inc ZP4
08fd: a5 fd     - skip1:  lda ZP3
08ff: 38        -         sec
0900: e5 fb     -         sbc ZP1
0902: 85 fd     -         sta ZP3
0904: a5 fe     -         lda ZP4
0906: e5 fc     -         sbc ZP2
0908: 85 fe     -         sta ZP4			
090a: a4 fd     - toFloat:ldy ZP3
090c: a5 fe     -         lda ZP4
090e: 20 91 b3  -         jsr GIVAYF 					//A(h),Y(L) - FAC
0911: a2 63     -         ldx #<flt
0913: a0 09     -         ldy #>flt
0915: 20 d4 bb  -         jsr MOVMF					//store FAC to flt		
0918: a9 00     -         lda #$00					//RND(0)
091a: 20 9a e0  -         jsr RND						//$E09A
091d: a9 63     -         lda #<flt
091f: a0 09     -         ldy #>flt
0921: 20 28 ba  -         jsr FMULT					//Multiplies a number from RAM (A,y) and FAC	
0924: 20 cc bc  -         jsr FAINT					//to integer
0927: 20 bf b1  -         jsr AYINT					//fac to signed int HI $64 LO $65
092a: a5 65     -         lda $65						//FAC mantissa lo
092c: 18        -         clc
092d: 65 fb     -         adc ZP1						//add number to start	
092f: 85 14     -         sta WINT
0931: a5 64     -         lda $64						//FAC mantissa hi
0933: 65 fc     -         adc ZP2
0935: 85 15     -         sta WINT+1
0937: 60        - over:   rts			
0938: e6 fd     - rnd_X:  inc ZP3
093a: d0 02     -         bne toFloat
093c: e6 fe     -         inc ZP4	
093e: a4 fd     - toFloat:ldy ZP3
0940: a5 fe     -         lda ZP4
0942: 20 91 b3  -         jsr GIVAYF 					//A(h),Y(L) - FAC
0945: a2 63     -         ldx #<flt
0947: a0 09     -         ldy #>flt
0949: 20 d4 bb  -         jsr MOVMF					//store FAC to flt		
094c: a9 00     -         lda #$00					//get actual RND(0)
094e: 20 9a e0  -         jsr RND						//$E09A
0951: a9 63     -         lda #<flt
0953: a0 09     -         ldy #>flt
0955: 20 28 ba  -         jsr FMULT					//Multiplies a number from RAM (A,y) and FAC	
0958: 20 cc bc  -         jsr FAINT					//to integer
095b: 20 bf b1  -         jsr AYINT					//fac to signed int HI $64 LO $65
095e: a5 65     -         lda $65						//FAC mantissa lo
0960: 85 14     -         sta WINT					
0962: 60        -         rts			

[Data RND]
0963: 00 00 00 00 00                                   - dataRND,flt:.byte 0,0,0,0,0

[Grid_Constants]
0968: 00 ff     - Grid_Constants,BASIC_DIRS,UP:.byte 	0, -1
096a: 00 01     - DOWN:   .byte 	0, 1
096c: ff 00     - LEFT:   .byte	-1, 0
096e: 01 00     - RIGHT:  .byte 	1,0
0970: ff ff     - PROX_TEMPLATE:.byte 	-1, -1
0972: 01 01     -         .byte 	1, 1
0974: ff ff     -         .byte 	-1, -1
0976: 01 01     -         .byte 	1, 1
0978: ad 7f 0e  - MAZE_FILL:lda X
097b: 85 fb     -         sta Y
097d: ad 80 0e  -         lda X + 1
0980: 85 fc     -         sta Y + 1
0982: a9 e0     -         lda	#WALL
0984: a2 04     -         ldx #4
0986: a0 00     - block:  ldy #0
0988: 91 fb     - fill:   sta (ZP1),y
098a: c8        -         iny
098b: d0 fb     -         bne fill
098d: e6 fc     -         inc ZP2
098f: ca        -         dex
0990: d0 f4     -         bne block
0992: 60        -         rts
0993: ad 7f 0e  - MAZE_DOT:lda X
0996: 85 fb     -         sta Y
0998: ad 80 0e  -         lda X + 1
099b: 85 fc     -         sta Y + 1
099d: a9 00     -         lda #0
099f: 85 fe     -         sta ZP4				
09a1: ad 82 0e  -         lda grid+1		
09a4: 85 fd     -         sta ZP3
09a6: a0 03     -         ldy #03
09a8: 06 fd     - mul8:   asl X
09aa: 26 fe     -         rol X+1	
09ac: 88        -         dey
09ad: d0 f9     -         bne mul8
09af: 18        -         clc
09b0: a5 fb     -         lda X
09b2: 65 fd     -         adc Y
09b4: 85 fb     -         sta X
09b6: 90 02     -         bcc skip
09b8: e6 fc     -         inc X+1
09ba: 18        - skip:   clc
09bb: a5 fc     -         lda X+1
09bd: 65 fe     -         adc Y+1
09bf: 85 fc     -         sta X+1	
09c1: a0 02     -         ldy #02	
09c3: 06 fd     - mul32:  asl X
09c5: 26 fe     -         rol X+1	
09c7: 88        -         dey
09c8: d0 f9     -         bne mul32
09ca: 18        -         clc
09cb: a5 fb     -         lda X
09cd: 65 fd     -         adc Y
09cf: 85 fb     -         sta X
09d1: 90 02     -         bcc skip
09d3: e6 fc     -         inc X+1
09d5: 18        - skip:   clc
09d6: a5 fc     -         lda X+1
09d8: 65 fe     -         adc Y+1
09da: 85 fc     -         sta X+1	
09dc: 18        -         clc
09dd: a5 fb     -         lda X
09df: 6d 81 0e  -         adc y	
09e2: 85 fb     -         sta X
09e4: 90 02     -         bcc out+2
09e6: e6 fc     - out:    inc X+1
09e8: a9 20     -         lda #DOT
09ea: a0 00     -         ldy #0
09ec: 91 fb     -         sta (ZP1),y
09ee: 60        -         rts
09ef: a2 03     - POINTERS_FROM_START:ldx #03
09f1: 8a        - add:    txa
09f2: 0a        -         asl
09f3: a8        -         tay		
09f4: 18        -         clc
09f5: ad 81 0e  -         lda maze_start
09f8: 79 68 09  -         adc BASIC_DIRS,y
09fb: 99 89 0e  -         sta candidates,y
09fe: c8        -         iny
09ff: 18        -         clc
0a00: ad 82 0e  -         lda maze_start+1
0a03: 79 68 09  -         adc BASIC_DIRS,y
0a06: 99 89 0e  -         sta candidates,y
0a09: ca        -         dex
0a0a: 10 e5     -         bpl add
0a0c: a2 03     -         ldx #03
0a0e: 8a        - copy:   txa
0a0f: 0a        -         asl
0a10: a8        -         tay	
0a11: b9 68 09  -         lda BASIC_DIRS,y
0a14: 99 91 0e  -         sta candidates_vectors,y
0a17: c8        -         iny
0a18: b9 68 09  -         lda BASIC_DIRS,y
0a1b: 99 91 0e  -         sta candidates_vectors,y
0a1e: ca        -         dex
0a1f: 10 ed     -         bpl copy
0a21: a9 04     -         lda #04
0a23: 8d 99 0e  -         sta candidates_length
0a26: 60        -         rts
0a27: ad 99 0e  - FILTER_IF_OUT:lda candidates_length
0a2a: c9 01     -         cmp #1
0a2c: b0 01     -         bcs start
0a2e: 60        -         rts
0a2f: a9 89     - start:  lda #<addr
0a31: 85 45     -         sta X
0a33: a9 0e     -         lda #>addr
0a35: 85 46     -         sta X+1
0a37: ae 99 0e  -         ldx candidates_length				//number of grids yet to check
0a3a: ca        -         dex
0a3b: 8a        - each:   txa
0a3c: 0a        -         asl
0a3d: a8        -         tay
0a3e: 18        -         clc
0a3f: b1 45     -         lda (BV3),y	
0a41: c9 27     -         cmp #MAX_X+1
0a43: b0 17     -         bcs shift
0a45: c9 01     -         cmp #MIN_X
0a47: 90 13     -         bcc shift
0a49: c8        -         iny
0a4a: 18        -         clc
0a4b: b1 45     -         lda (BV3),y
0a4d: c9 18     -         cmp #MAX_Y+1
0a4f: b0 0b     -         bcs shift
0a51: c9 01     -         cmp #MIN_Y
0a53: 90 07     -         bcc shift
0a55: ca        - cont:   dex
0a56: 30 03     -         bmi out
0a58: 4c 3b 0a  -         jmp each
0a5b: 60        - out:    rts
0a5c: 86 3f     - shift:  stx TEMPX									//save x							
0a5e: 86 47     -         stx VAR_A									//set index to VAR_A
0a60: ad 99 0e  -         lda X
0a63: 85 48     -         sta Y
0a65: a9 89     -         lda #<addr
0a67: 85 43     -         sta X
0a69: a9 0e     -         lda #>addr
0a6b: 85 44     -         sta X+1
0a6d: a9 02     -         lda #data_size
0a6f: 85 49     -         sta VAR_C
0a71: 20 9b 08  -         jsr SPLICE
0a74: ad 99 0e  -         lda X
0a77: 85 48     -         sta Y
0a79: a9 91     -         lda #<addr
0a7b: 85 43     -         sta X
0a7d: a9 0e     -         lda #>addr
0a7f: 85 44     -         sta X+1
0a81: a9 02     -         lda #data_size
0a83: 85 49     -         sta VAR_C
0a85: 20 9b 08  -         jsr SPLICE
0a88: ce 99 0e  -         dec candidates_length						//dec array length
0a8b: a6 3f     -         ldx TEMPX									//restore x
0a8d: 4c 55 0a  -         jmp cont									//return to loop
0a90: ad 99 0e  - FILTER_IF_DOT:lda candidates_length
0a93: c9 01     -         cmp #1
0a95: b0 01     -         bcs start
0a97: 60        -         rts
0a98: a9 89     - start:  lda #<addr
0a9a: 85 45     -         sta X
0a9c: a9 0e     -         lda #>addr
0a9e: 85 46     -         sta X+1
0aa0: ae 99 0e  -         ldx candidates_length						//number of grids yet to check
0aa3: ca        -         dex
0aa4: 8a        - each:   txa
0aa5: 0a        -         asl
0aa6: a8        -         tay
0aa7: b1 45     -         lda (BV3),y
0aa9: 8d 83 0e  -         sta grid_pointer
0aac: c8        -         iny
0aad: b1 45     -         lda (BV3),y
0aaf: 8d 84 0e  -         sta grid_pointer+1
0ab2: ad 7f 0e  -         lda X
0ab5: 85 fb     -         sta Y
0ab7: ad 80 0e  -         lda X + 1
0aba: 85 fc     -         sta Y + 1
0abc: a9 00     -         lda #0
0abe: 85 fe     -         sta ZP4				
0ac0: ad 84 0e  -         lda grid+1		
0ac3: 85 fd     -         sta ZP3
0ac5: a0 03     -         ldy #03
0ac7: 06 fd     - mul8:   asl X
0ac9: 26 fe     -         rol X+1	
0acb: 88        -         dey
0acc: d0 f9     -         bne mul8
0ace: 18        -         clc
0acf: a5 fb     -         lda X
0ad1: 65 fd     -         adc Y
0ad3: 85 fb     -         sta X
0ad5: 90 02     -         bcc skip
0ad7: e6 fc     -         inc X+1
0ad9: 18        - skip:   clc
0ada: a5 fc     -         lda X+1
0adc: 65 fe     -         adc Y+1
0ade: 85 fc     -         sta X+1	
0ae0: a0 02     -         ldy #02	
0ae2: 06 fd     - mul32:  asl X
0ae4: 26 fe     -         rol X+1	
0ae6: 88        -         dey
0ae7: d0 f9     -         bne mul32
0ae9: 18        -         clc
0aea: a5 fb     -         lda X
0aec: 65 fd     -         adc Y
0aee: 85 fb     -         sta X
0af0: 90 02     -         bcc skip
0af2: e6 fc     -         inc X+1
0af4: 18        - skip:   clc
0af5: a5 fc     -         lda X+1
0af7: 65 fe     -         adc Y+1
0af9: 85 fc     -         sta X+1	
0afb: 18        -         clc
0afc: a5 fb     -         lda X
0afe: 6d 83 0e  -         adc y	
0b01: 85 fb     -         sta X
0b03: 90 02     -         bcc out+2
0b05: e6 fc     - out:    inc X+1
0b07: a0 00     -         ldy #0
0b09: b1 fb     -         lda (ZP1),y
0b0b: c9 20     -         cmp #DOT
0b0d: f0 04     -         beq shift
0b0f: ca        - cont:   dex
0b10: 10 92     -         bpl each
0b12: 60        - out:    rts
0b13: 86 3f     - shift:  stx TEMPX									//save x
0b15: 86 47     -         stx VAR_A									//set index to VAR_A
0b17: ad 99 0e  -         lda X
0b1a: 85 48     -         sta Y
0b1c: a9 89     -         lda #<addr
0b1e: 85 43     -         sta X
0b20: a9 0e     -         lda #>addr
0b22: 85 44     -         sta X+1
0b24: a9 02     -         lda #data_size
0b26: 85 49     -         sta VAR_C
0b28: 20 9b 08  -         jsr SPLICE
0b2b: ad 99 0e  -         lda X
0b2e: 85 48     -         sta Y
0b30: a9 91     -         lda #<addr
0b32: 85 43     -         sta X
0b34: a9 0e     -         lda #>addr
0b36: 85 44     -         sta X+1
0b38: a9 02     -         lda #data_size
0b3a: 85 49     -         sta VAR_C
0b3c: 20 9b 08  -         jsr SPLICE
0b3f: ce 99 0e  -         dec candidates_length						//dec array length
0b42: a6 3f     -         ldx TEMPX									//restore x
0b44: 4c 0f 0b  -         jmp cont									//return to loop
0b47: a5 02     - PUSH_REST_ON_STACK:lda ZP0										//index was stored in ZP0
0b49: 85 47     -         sta VAR_A									//set index to VAR_A
0b4b: ad 99 0e  -         lda X
0b4e: 85 48     -         sta Y
0b50: a9 89     -         lda #<addr
0b52: 85 43     -         sta X
0b54: a9 0e     -         lda #>addr
0b56: 85 44     -         sta X+1
0b58: a9 02     -         lda #data_size
0b5a: 85 49     -         sta VAR_C
0b5c: 20 9b 08  -         jsr SPLICE
0b5f: ad 99 0e  -         lda X
0b62: 85 48     -         sta Y
0b64: a9 91     -         lda #<addr
0b66: 85 43     -         sta X
0b68: a9 0e     -         lda #>addr
0b6a: 85 44     -         sta X+1
0b6c: a9 02     -         lda #data_size
0b6e: 85 49     -         sta VAR_C
0b70: 20 9b 08  -         jsr SPLICE
0b73: ce 99 0e  -         dec candidates_length						//dec array length
0b76: a2 00     -         ldx #0
0b78: a0 00     - each:   ldy #0
0b7a: 86 3f     -         stx TEMPX									//save x
0b7c: 8a        -         txa											//x = x *2	
0b7d: 0a        -         asl 
0b7e: aa        -         tax									
0b7f: bd 89 0e  -         lda candidates,x							//x
0b82: 91 71     -         sta (STKPTR1),y
0b84: c8        -         iny
0b85: e8        -         inx
0b86: bd 89 0e  -         lda candidates,x							//y
0b89: 91 71     -         sta (STKPTR1),y
0b8b: 18        -         clc
0b8c: a5 71     -         lda X
0b8e: 69 02     -         adc #C
0b90: 85 71     -         sta X
0b92: 90 02     -         bcc out+2
0b94: e6 72     - out:    inc X+1
0b96: 88        -         dey
0b97: ca        -         dex
0b98: bd 91 0e  -         lda candidates_vectors,x					//x
0b9b: 91 71     -         sta (STKPTR1),y
0b9d: c8        -         iny
0b9e: e8        -         inx
0b9f: bd 91 0e  -         lda candidates_vectors,x					//y
0ba2: 91 71     -         sta (STKPTR1),y
0ba4: 18        -         clc
0ba5: a5 71     -         lda X
0ba7: 69 02     -         adc #C
0ba9: 85 71     -         sta X
0bab: 90 02     -         bcc out+2
0bad: e6 72     - out:    inc X+1
0baf: a6 3f     -         ldx TEMPX									//restore x
0bb1: e8        -         inx
0bb2: ec 99 0e  -         cpx candidates_length
0bb5: d0 c1     -         bne each
0bb7: 60        - out:    rts		
0bb8: ad 99 0e  - FILTER_IF_CLOSE_PRIMARY:lda candidates_length
0bbb: c9 01     -         cmp #1
0bbd: b0 01     -         bcs start										//cont if 1 or more
0bbf: 60        -         rts												//else exit, if no candidates
0bc0: a9 89     - start:  lda #<addr
0bc2: 85 45     -         sta X
0bc4: a9 0e     -         lda #>addr
0bc6: 85 46     -         sta X+1
0bc8: a9 91     -         lda #<addr
0bca: 85 4b     -         sta X
0bcc: a9 0e     -         lda #>addr
0bce: 85 4c     -         sta X+1
0bd0: ae 99 0e  -         ldx candidates_length							//number of grids yet to check
0bd3: ca        -         dex												//to zero offset
0bd4: 8a        - each:   txa
0bd5: 0a        -         asl												//double, because datasize is 2
0bd6: a8        -         tay												//offset in y (zero based x * datasize)
0bd7: b1 45     -         lda (BV3),y
0bd9: 8d 83 0e  -         sta grid_pointer
0bdc: b1 4b     -         lda (BV5),y
0bde: 8d 85 0e  -         sta direction_pointer
0be1: c8        -         iny
0be2: b1 45     -         lda (BV3),y
0be4: 8d 84 0e  -         sta grid_pointer+1
0be7: b1 4b     -         lda (BV5),y
0be9: 8d 86 0e  -         sta direction_pointer+1
0bec: 18        -         clc
0bed: ad 83 0e  -         lda grid_pointer
0bf0: 6d 85 0e  -         adc direction_pointer
0bf3: 8d 87 0e  -         sta test_pointer
0bf6: 18        -         clc
0bf7: ad 84 0e  -         lda grid_pointer+1
0bfa: 6d 86 0e  -         adc direction_pointer+1
0bfd: 8d 88 0e  -         sta test_pointer+1
0c00: ad 7f 0e  -         lda X
0c03: 85 fb     -         sta Y
0c05: ad 80 0e  -         lda X + 1
0c08: 85 fc     -         sta Y + 1
0c0a: a9 00     -         lda #0
0c0c: 85 fe     -         sta ZP4				
0c0e: ad 88 0e  -         lda grid+1		
0c11: 85 fd     -         sta ZP3
0c13: a0 03     -         ldy #03
0c15: 06 fd     - mul8:   asl X
0c17: 26 fe     -         rol X+1	
0c19: 88        -         dey
0c1a: d0 f9     -         bne mul8
0c1c: 18        -         clc
0c1d: a5 fb     -         lda X
0c1f: 65 fd     -         adc Y
0c21: 85 fb     -         sta X
0c23: 90 02     -         bcc skip
0c25: e6 fc     -         inc X+1
0c27: 18        - skip:   clc
0c28: a5 fc     -         lda X+1
0c2a: 65 fe     -         adc Y+1
0c2c: 85 fc     -         sta X+1	
0c2e: a0 02     -         ldy #02	
0c30: 06 fd     - mul32:  asl X
0c32: 26 fe     -         rol X+1	
0c34: 88        -         dey
0c35: d0 f9     -         bne mul32
0c37: 18        -         clc
0c38: a5 fb     -         lda X
0c3a: 65 fd     -         adc Y
0c3c: 85 fb     -         sta X
0c3e: 90 02     -         bcc skip
0c40: e6 fc     -         inc X+1
0c42: 18        - skip:   clc
0c43: a5 fc     -         lda X+1
0c45: 65 fe     -         adc Y+1
0c47: 85 fc     -         sta X+1	
0c49: 18        -         clc
0c4a: a5 fb     -         lda X
0c4c: 6d 87 0e  -         adc y	
0c4f: 85 fb     -         sta X
0c51: 90 02     -         bcc out+2
0c53: e6 fc     - out:    inc X+1
0c55: a0 00     -         ldy #0
0c57: b1 fb     -         lda (ZP1),y
0c59: c9 20     -         cmp #DOT									//is dot? (empty)
0c5b: f0 07     -         beq shift									//yes
0c5d: ca        - cont:   dex
0c5e: 30 03     -         bmi out										//less than zero, stop
0c60: 4c d4 0b  -         jmp each									//loop back, branch too far
0c63: 60        - out:    rts
0c64: 86 3f     - shift:  stx TEMPX									//save x
0c66: 86 47     -         stx VAR_A									//set index to VAR_A
0c68: ad 99 0e  -         lda X
0c6b: 85 48     -         sta Y
0c6d: a9 89     -         lda #<addr
0c6f: 85 43     -         sta X
0c71: a9 0e     -         lda #>addr
0c73: 85 44     -         sta X+1
0c75: a9 02     -         lda #data_size
0c77: 85 49     -         sta VAR_C
0c79: 20 9b 08  -         jsr SPLICE
0c7c: ad 99 0e  -         lda X
0c7f: 85 48     -         sta Y
0c81: a9 91     -         lda #<addr
0c83: 85 43     -         sta X
0c85: a9 0e     -         lda #>addr
0c87: 85 44     -         sta X+1
0c89: a9 02     -         lda #data_size
0c8b: 85 49     -         sta VAR_C
0c8d: 20 9b 08  -         jsr SPLICE
0c90: ce 99 0e  -         dec candidates_length						//dec array length
0c93: a6 3f     -         ldx TEMPX									//restore x
0c95: 4c 5d 0c  -         jmp cont									//return to loop
0c98: ad 99 0e  - FILTER_SIDE_PROXIMIY:lda candidates_length
0c9b: c9 01     -         cmp #1
0c9d: b0 01     -         bcs start										//cont if 1 or more
0c9f: 60        -         rts												//else exit, if no candidates
0ca0: a9 89     - start:  lda #<addr
0ca2: 85 45     -         sta X
0ca4: a9 0e     -         lda #>addr
0ca6: 85 46     -         sta X+1
0ca8: a9 91     -         lda #<addr
0caa: 85 4b     -         sta X
0cac: a9 0e     -         lda #>addr
0cae: 85 4c     -         sta X+1
0cb0: ae 99 0e  -         ldx candidates_length							//number of grids yet to check
0cb3: ca        -         dex												//to zero offset
0cb4: 8a        - each:   txa
0cb5: 0a        -         asl												//double, because datasize is 2
0cb6: a8        -         tay												//offset in y (zero based x * datasize)
0cb7: b1 45     -         lda (BV3),y
0cb9: 8d 83 0e  -         sta grid_pointer
0cbc: b1 4b     -         lda (BV5),y
0cbe: 8d 85 0e  -         sta direction_pointer
0cc1: c8        -         iny
0cc2: b1 45     -         lda (BV3),y
0cc4: 8d 84 0e  -         sta grid_pointer+1
0cc7: b1 4b     -         lda (BV5),y
0cc9: 8d 86 0e  -         sta direction_pointer+1
0ccc: a9 70     -         lda #<addr
0cce: 85 50     -         sta X
0cd0: a9 09     -         lda #>addr
0cd2: 85 51     -         sta X+1
0cd4: a9 9a     -         lda #<addr
0cd6: 85 4e     -         sta X
0cd8: a9 0e     -         lda #>addr
0cda: 85 4f     -         sta X+1
0cdc: a0 08     -         ldy #length											
0cde: 88        -         dey
0cdf: b1 50     - copy:   lda (BV7),y
0ce1: 91 4e     -         sta (BV9),y
0ce3: 88        -         dey
0ce4: 10 f9     -         bpl copy
0ce6: a0 01     -         ldy #01											//y?
0ce8: b9 85 0e  -         lda direction_pointer,y
0ceb: d0 01     -         bne ok											//if not zero, than this is right dimension
0ced: 88        -         dey												//not y, but x
0cee: b9 85 0e  - ok:     lda direction_pointer,y							//index of dimension now in y register
0cf1: 99 9a 0e  -         sta proximity_vectors,y							//set sequence 1,1,0,0 on the right dimension, datasize=2
0cf4: c8        -         iny
0cf5: c8        -         iny
0cf6: 99 9a 0e  -         sta proximity_vectors,y	
0cf9: c8        -         iny
0cfa: c8        -         iny
0cfb: a9 00     -         lda #0
0cfd: 99 9a 0e  -         sta proximity_vectors,y	
0d00: c8        -         iny
0d01: c8        -         iny
0d02: 99 9a 0e  -         sta proximity_vectors,y							//proximity vectors ready
0d05: a0 00     -         ldy #00
0d07: ad 83 0e  - repeat: lda grid_pointer
0d0a: 18        -         clc
0d0b: 79 9a 0e  -         adc proximity_vectors,y
0d0e: 8d 87 0e  -         sta test_pointer
0d11: c8        -         iny
0d12: ad 84 0e  -         lda grid_pointer+1
0d15: 18        -         clc
0d16: 79 9a 0e  -         adc proximity_vectors,y
0d19: 8d 88 0e  -         sta test_pointer+1								//next grid now in test_pointer
0d1c: 84 40     -         sty TEMPY										//save y
0d1e: ad 7f 0e  -         lda X
0d21: 85 fb     -         sta Y
0d23: ad 80 0e  -         lda X + 1
0d26: 85 fc     -         sta Y + 1
0d28: a9 00     -         lda #0
0d2a: 85 fe     -         sta ZP4				
0d2c: ad 88 0e  -         lda grid+1		
0d2f: 85 fd     -         sta ZP3
0d31: a0 03     -         ldy #03
0d33: 06 fd     - mul8:   asl X
0d35: 26 fe     -         rol X+1	
0d37: 88        -         dey
0d38: d0 f9     -         bne mul8
0d3a: 18        -         clc
0d3b: a5 fb     -         lda X
0d3d: 65 fd     -         adc Y
0d3f: 85 fb     -         sta X
0d41: 90 02     -         bcc skip
0d43: e6 fc     -         inc X+1
0d45: 18        - skip:   clc
0d46: a5 fc     -         lda X+1
0d48: 65 fe     -         adc Y+1
0d4a: 85 fc     -         sta X+1	
0d4c: a0 02     -         ldy #02	
0d4e: 06 fd     - mul32:  asl X
0d50: 26 fe     -         rol X+1	
0d52: 88        -         dey
0d53: d0 f9     -         bne mul32
0d55: 18        -         clc
0d56: a5 fb     -         lda X
0d58: 65 fd     -         adc Y
0d5a: 85 fb     -         sta X
0d5c: 90 02     -         bcc skip
0d5e: e6 fc     -         inc X+1
0d60: 18        - skip:   clc
0d61: a5 fc     -         lda X+1
0d63: 65 fe     -         adc Y+1
0d65: 85 fc     -         sta X+1	
0d67: 18        -         clc
0d68: a5 fb     -         lda X
0d6a: 6d 87 0e  -         adc y	
0d6d: 85 fb     -         sta X
0d6f: 90 02     -         bcc out+2
0d71: e6 fc     - out:    inc X+1
0d73: a0 00     -         ldy #0
0d75: b1 fb     -         lda (ZP1),y
0d77: c9 20     -         cmp #DOT										//is dot? (empty)
0d79: f0 0e     -         beq shift										//yes, shift on x
0d7b: a4 40     -         ldy TEMPY										//restore y
0d7d: c8        -         iny
0d7e: c0 08     -         cpy #08
0d80: d0 85     -         bne repeat
0d82: ca        - cont:   dex
0d83: 30 03     -         bmi out										//less than zero, stop
0d85: 4c b4 0c  -         jmp each										//loop back, branch too far
0d88: 60        - out:    rts
0d89: 86 3f     - shift:  stx TEMPX									//save x
0d8b: 86 47     -         stx VAR_A									//set index to VAR_A
0d8d: ad 99 0e  -         lda X
0d90: 85 48     -         sta Y
0d92: a9 89     -         lda #<addr
0d94: 85 43     -         sta X
0d96: a9 0e     -         lda #>addr
0d98: 85 44     -         sta X+1
0d9a: a9 02     -         lda #data_size
0d9c: 85 49     -         sta VAR_C
0d9e: 20 9b 08  -         jsr SPLICE
0da1: ad 99 0e  -         lda X
0da4: 85 48     -         sta Y
0da6: a9 91     -         lda #<addr
0da8: 85 43     -         sta X
0daa: a9 0e     -         lda #>addr
0dac: 85 44     -         sta X+1
0dae: a9 02     -         lda #data_size
0db0: 85 49     -         sta VAR_C
0db2: 20 9b 08  -         jsr SPLICE
0db5: ce 99 0e  -         dec candidates_length						//dec array length
0db8: a6 3f     -         ldx TEMPX									//restore x
0dba: 4c 82 0d  -         jmp cont									//return to loop
0dbd: a5 71     - CANDIDATE_FROM_STACK:lda X
0dbf: 38        -         sec
0dc0: e9 02     -         sbc #C
0dc2: 85 71     -         sta X
0dc4: b0 02     -         bcs out+2
0dc6: c6 72     - out:    dec X+1
0dc8: a0 00     -         ldy #0									//x
0dca: b1 71     -         lda (STKPTR1),y
0dcc: 99 91 0e  -         sta candidates_vectors,y
0dcf: c8        -         iny										//y
0dd0: b1 71     -         lda (STKPTR1),y
0dd2: 99 91 0e  -         sta candidates_vectors,y
0dd5: a5 71     -         lda X
0dd7: 38        -         sec
0dd8: e9 02     -         sbc #C
0dda: 85 71     -         sta X
0ddc: b0 02     -         bcs out+2
0dde: c6 72     - out:    dec X+1
0de0: a0 00     -         ldy #0									//x
0de2: b1 71     -         lda (STKPTR1),y
0de4: 99 89 0e  -         sta candidates,y
0de7: c8        -         iny										//y
0de8: b1 71     -         lda (STKPTR1),y
0dea: 99 89 0e  -         sta candidates,y
0ded: a9 01     -         lda #01
0def: 8d 99 0e  -         sta candidates_length
0df2: 60        - out:    rts
0df3: 20 78 09  - MAZE:   jsr MAZE_FILL
0df6: 20 93 09  - outer,P_LOOP:jsr MAZE_DOT
0df9: 20 ef 09  -         jsr POINTERS_FROM_START
0dfc: 20 27 0a  -         jsr FILTER_IF_OUT
0dff: 20 90 0a  -         jsr FILTER_IF_DOT
0e02: 20 b8 0b  -         jsr FILTER_IF_CLOSE_PRIMARY
0e05: 20 98 0c  -         jsr FILTER_SIDE_PROXIMIY
0e08: ad 99 0e  -         lda candidates_length						//check how many we have
0e0b: c9 00     -         cmp #00										//if zero break;
0e0d: f0 41     -         beq S_LOOP									//goto stack loop
0e0f: c9 02     -         cmp #02										//if it is two or more
0e11: b0 05     -         bcs then									//go to else/then
0e13: a9 00     -         lda #0										//otherwise, index->0 in A									
0e15: 4c 2c 0e  -         jmp skip_else
0e18: ad 99 0e  - then:   lda candidates_length
0e1b: aa        -         tax
0e1c: ca        -         dex
0e1d: 86 02     -         stx ZP0
0e1f: a5 02     -         lda X	
0e21: 85 fd     -         sta ZP3
0e23: a9 00     -         lda #0
0e25: 85 fe     -         sta ZP4
0e27: 20 38 09  -         jsr rnd_X
0e2a: a5 14     -         lda WINT
0e2c: 85 02     - skip_else:sta ZP0										//store index in ZP0	
0e2e: 0a        -         asl 										//datasize=2	
0e2f: a8        -         tay											//offset in y
0e30: a9 89     -         lda #<addr
0e32: 85 43     -         sta X
0e34: a9 0e     -         lda #>addr
0e36: 85 44     -         sta X+1
0e38: b1 43     -         lda (BV1),y
0e3a: 8d 81 0e  -         sta maze_start
0e3d: c8        -         iny
0e3e: b1 43     -         lda (BV1),y
0e40: 8d 82 0e  -         sta maze_start+1
0e43: ad 99 0e  -         lda candidates_length
0e46: c9 02     -         cmp #02										//if there are 2 or more, selected has not been discarded yet
0e48: 90 03     -         bcc repeat_P								//no, repeat loop
0e4a: 20 47 0b  -         jsr PUSH_REST_ON_STACK													
0e4d: 4c f6 0d  - repeat_P:jmp P_LOOP
0e50: a5 71     - S_LOOP: lda STKPTR1
0e52: c9 00     -         cmp #<STACK
0e54: d0 09     -         bne cont
0e56: a5 72     -         lda STKPTR2
0e58: c9 c0     -         cmp #>STACK
0e5a: d0 03     -         bne cont
0e5c: 4c 7e 0e  -         jmp quit									//stack pointer == STACK, stack is empty
0e5f: 20 bd 0d  - cont:   jsr CANDIDATE_FROM_STACK					//take on grid an its direction from stack
0e62: 20 b8 0b  -         jsr FILTER_IF_CLOSE_PRIMARY					//recheck if they are still 'safe'
0e65: 20 98 0c  -         jsr FILTER_SIDE_PROXIMIY					//in terms of proximity
0e68: ad 99 0e  -         lda candidates_length						//check if it is still ok
0e6b: c9 00     -         cmp #00										//if zero break; 
0e6d: f0 e1     -         beq S_LOOP									//no, find another
0e6f: ad 89 0e  -         lda candidates								//set it to maze_start
0e72: 8d 81 0e  -         sta maze_start
0e75: ad 8a 0e  -         lda candidates+1
0e78: 8d 82 0e  -         sta maze_start+1
0e7b: 4c f6 0d  -         jmp P_LOOP									//make next branch
0e7e: 60        - quit:   rts

[MAZE Memory]
0e7f: 40 00     - MAZE_memory,maze_memory_alloc:.word $0040 	//screen by default, safe
0e81: 00 00     - maze_start:.word 0
0e83: 00 00     - grid_pointer:.word 0
0e85: 00 00     - direction_pointer:.word 0
0e87: 00 00     - test_pointer:.word 0
0e89: 00 00     - candidates:.fill 2,0
0e8b: 00 00     -         .fill 2,0
0e8d: 00 00     -         .fill 2,0
0e8f: 00 00     -         .fill 2,0
0e91: 00 00     - candidates_vectors:.fill 2,0
0e93: 00 00     -         .fill 2,0
0e95: 00 00     -         .fill 2,0
0e97: 00 00     -         .fill 2,0
0e99: 00        - candidates_length:.byte 0
0e9a: 00 00     - proximity_vectors:.fill 2,0
0e9c: 00 00     -         .fill 2,0
0e9e: 00 00     -         .fill 2,0
0ea0: 00 00     -         .fill 2,0
0ea2: 2e 20     - debug:  .text ". "
0ea4: 00        -         brk

[Subroutines]
0ea5: ad da 0e  - subs,irqcode:lda modeflag
0ea8: f0 03     -         beq mode1
0eaa: 4c c2 0e  -         jmp mode2
0ead: a9 01     - mode1:  lda #$01
0eaf: 8d da 0e  -         sta modeflag
0eb2: a9 06     -         lda #BLUE
0eb4: 8d 20 d0  -         sta BORDER
0eb7: a9 32     -         lda #startRaster
0eb9: 8d 12 d0  -         sta RASTER_COUNTER
0ebc: 0e 19 d0  -         asl INTERRUPT_REQUEST_REGISTER
0ebf: 4c 31 ea  -         jmp IRQOUT
0ec2: a9 00     - mode2:  lda #$00
0ec4: 8d da 0e  -         sta modeflag
0ec7: a9 0e     -         lda #LIGHTBLUE
0ec9: 8d 20 d0  -         sta BORDER
0ecc: a9 fa     -         lda #endRaster
0ece: 8d 12 d0  -         sta RASTER_COUNTER
0ed1: 0e 19 d0  -         asl INTERRUPT_REQUEST_REGISTER
0ed4: 68        -         pla
0ed5: a8        -         tay
0ed6: 68        -         pla
0ed7: aa        -         tax
0ed8: 68        -         pla
0ed9: 40        -         rti

[Data]
0eda: 00        - text,data,modeflag:.byte 0
0edb: 00        - startX: .byte 0
0edc: 00        - startY: .byte 0
