******************************* Segment: Default *******************************
[Header]
0801: 0c 08     -         .word bend
0803: 0d 00     -         .byte $0d, $00				//;line number
0805: 9e        -         .byte $9E					//;SYS
0806: 20        -         .byte $20					//;space
0807: 32 30 36 34                                      -         .byte $32,$30,$36,$34		//;start 2064
080b: 00        -         .byte $00					//;end of line
080c: 00 00     - bend:   .byte $00, $00				//;end of basic program

[Main]
0810: 20 25 09  - setup:  jsr COPY_CHAR_ROM_TO_RAM
0813: 20 bf 16  -         jsr set_bricks
0816: a9 0f     -         lda	#color
0818: a0 00     -         ldy #0
081a: 99 00 d8  - fill:   sta COLOR_RAM,y
081d: 99 00 d9  -         sta COLOR_RAM + 256,y
0820: 99 00 da  -         sta COLOR_RAM + 512,y
0823: 99 00 db  -         sta COLOR_RAM + 768,y
0826: c8        -         iny
0827: d0 f1     -         bne fill
0829: a9 00     -         lda #BLACK
082b: 8d 21 d0  -         sta BACKGROUND
082e: 78        - interrupt:sei							//set interrupt
082f: a9 7f     -         lda #$7f
0831: 8d 0d dc  -         sta CIA_ICR
0834: 8d 0d dd  -         sta CIA2_ICR
0837: ad 0d dc  -         lda CIA_ICR
083a: ad 0d dd  -         lda CIA2_ICR
083d: ad 1a d0  -         lda INTERRUPT_MASK_REGISTER	
0840: 09 01     -         ora #$01
0842: 8d 1a d0  -         sta INTERRUPT_MASK_REGISTER
0845: ad 11 d0  -         lda CONTROL_REGISTER1
0848: 29 7f     -         and #$7f
084a: 8d 11 d0  -         sta CONTROL_REGISTER1
084d: a9 32     -         lda #startRaster
084f: 8d 12 d0  -         sta RASTER_COUNTER
0852: a9 8a     -         lda #<address
0854: 8d 14 03  -         sta IRQVEC
0857: a9 16     -         lda #>address
0859: 8d 15 03  -         sta	IRQVEC+1
085c: 58        -         cli
085d: d8        - begin:  cld
085e: a9 02     - init:   lda #B
0860: 8d 23 16  -         sta bias
0863: a9 00     -         lda #00
0865: 8d 24 16  -         sta bias_counter
0868: a9 00     -         lda #<addr
086a: 8d 00 16  -         sta X
086d: a9 04     -         lda #>addr
086f: 8d 01 16  -         sta X+1
0872: a9 00     -         lda #<addr
0874: 85 71     -         sta X
0876: a9 c0     -         lda #>addr
0878: 85 72     -         sta X+1
087a: a9 00     -         lda #<addr
087c: 85 5c     -         sta X
087e: a9 c4     -         lda #>addr
0880: 85 5d     -         sta X+1
0882: a9 00     -         lda #<addr
0884: 85 5e     -         sta X
0886: a9 c5     -         lda #>addr
0888: 85 5f     -         sta X+1
088a: a9 00     -         lda #00
088c: 8d 27 16  -         sta DE_counter
088f: 8d 28 16  -         sta REM_DE_counter
0892: 20 f7 09  -         jsr MAZE_FILL
0895: a9 0f     -         lda	#color
0897: a0 00     -         ldy #0
0899: 99 00 d8  - fill:   sta COLOR_RAM,y
089c: 99 00 d9  -         sta COLOR_RAM + 256,y
089f: 99 00 da  -         sta COLOR_RAM + 512,y
08a2: 99 00 db  -         sta COLOR_RAM + 768,y
08a5: c8        -         iny
08a6: d0 f1     -         bne fill
08a8: 20 6e 0a  -         jsr ROOMS
08ab: 20 44 13  -         jsr SET_START
08ae: 20 3d 15  -         jsr MAZE
08b1: 20 6d 13  -         jsr CONNECT_ROOMS
08b4: a9 00     -         lda #<addr
08b6: 85 5c     -         sta X
08b8: a9 c4     -         lda #>addr
08ba: 85 5d     -         sta X+1
08bc: 20 ac 0f  -         jsr CONNECT_DEAD_ENDS
08bf: a5 c5     - end,key:lda LSTX		//get character in A
08c1: c9 40     -         cmp #64			//no key
08c3: f0 fa     -         beq key
08c5: 4c 5e 08  -         jmp init
08c8: 60        -         rts

[Imports]
08c9: c6 48     - imports,SPLICE:dec VAR_B								//array length - 1, last index
08cb: a4 47     -         ldy VAR_A								//index
08cd: c4 48     - loop:   cpy VAR_B								//stop if index
08cf: 10 35     -         bpl out 								//equal or greater than last index
08d1: a2 00     -         ldx #0									//number of properties (data_size), start from 0
08d3: c8        - each:   iny		
08d4: 84 40     -         sty TEMPY
08d6: a5 49     -         lda	VAR_C 								//data size
08d8: 20 07 09  -         jsr MUL_Y_A
08db: 84 02     -         sty ZP0
08dd: 8a        -         txa
08de: 18        -         clc
08df: 65 02     -         adc ZP0
08e1: a8        -         tay
08e2: b1 43     -         lda (BV1),y
08e4: 85 41     -         sta TEMPA1
08e6: a4 40     -         ldy TEMPY
08e8: 88        -         dey
08e9: 84 40     -         sty TEMPY
08eb: a5 49     -         lda	VAR_C 								//data size
08ed: 20 07 09  -         jsr MUL_Y_A
08f0: 84 02     -         sty ZP0
08f2: 8a        -         txa
08f3: 18        -         clc
08f4: 65 02     -         adc ZP0
08f6: a8        -         tay
08f7: a5 41     -         lda TEMPA1
08f9: 91 43     -         sta (BV1),y
08fb: a4 40     -         ldy TEMPY
08fd: e8        -         inx
08fe: e4 49     -         cpx VAR_C								//all props? less than VAR_C ?
0900: 90 d1     -         bcc each
0902: c8        -         iny
0903: 4c cd 08  -         jmp loop
0906: 60        - out:    rts
0907: c0 00     - MUL_Y_A,multiply:cpy #00
0909: f0 18     -         beq end
090b: 88        -         dey
090c: 8c 19 09  -         sty mod+1
090f: 4a        -         lsr
0910: 85 02     -         sta ZP0
0912: a9 00     -         lda #00
0914: a0 08     -         ldy #$08
0916: 90 02     - loop:   bcc skip
0918: 69 00     - mod:    adc #0
091a: 6a        - skip:   ror
091b: 66 02     -         ror ZP0
091d: 88        -         dey
091e: d0 f6     -         bne loop
0920: a4 02     -         ldy ZP0
0922: 60        -         rts
0923: 98        - end:    tya
0924: 60        -         rts
0925: 78        - COPY_CHAR_ROM_TO_RAM:sei
0926: a5 01     -         lda $01			//make ROM visible
0928: 29 fb     -         and #$FB
092a: 85 01     -         sta $01 
092c: a9 00     -         lda #00
092e: 85 5f     -         sta $5f			//block start
0930: 85 5a     -         sta $5a			//block end
0932: 85 58     -         sta $58			//destination end
0934: a0 d0     -         ldy #$d0
0936: 84 60     -         sty $60			//block start
0938: a0 e0     -         ldy #$e0		
093a: 84 5b     -         sty $5b			//block end
093c: a0 40     - ram:    ldy #$40
093e: 84 59     -         sty $59			//destination end
0940: 20 bf a3  -         jsr MOVE_BYTES
0943: a5 01     -         lda $01			//hide rom
0945: 09 04     -         ora #$04
0947: 85 01     -         sta $01
0949: 58        -         cli
094a: ad 18 d0  -         lda VMCSB
094d: 29 f0     -         and #%11110000
094f: 09 0c     -         ora #%00001100	//$3000
0951: 8d 18 d0  -         sta VMCSB
0954: 60        -         rts

[SYSTEM_data]
0955: e6 fd     - SYS_data,rnd_XY:inc ZP3
0957: d0 02     -         bne skip1
0959: e6 fe     -         inc ZP4
095b: a5 fd     - skip1:  lda ZP3
095d: 38        -         sec
095e: e5 fb     -         sbc ZP1
0960: 85 fd     -         sta ZP3
0962: a5 fe     -         lda ZP4
0964: e5 fc     -         sbc ZP2
0966: 85 fe     -         sta ZP4			
0968: a4 fd     - toFloat:ldy ZP3
096a: a5 fe     -         lda ZP4
096c: 20 91 b3  -         jsr GIVAYF 					//A(h),Y(L) - FAC
096f: a2 c1     -         ldx #<flt
0971: a0 09     -         ldy #>flt
0973: 20 d4 bb  -         jsr MOVMF					//store FAC to flt		
0976: a9 00     -         lda #$00					//RND(0)
0978: 20 9a e0  -         jsr RND						//$E09A
097b: a9 c1     -         lda #<flt
097d: a0 09     -         ldy #>flt
097f: 20 28 ba  -         jsr FMULT					//Multiplies a number from RAM (A,y) and FAC	
0982: 20 cc bc  -         jsr FAINT					//to integer
0985: 20 bf b1  -         jsr AYINT					//fac to signed int HI $64 LO $65
0988: a5 65     -         lda $65						//FAC mantissa lo
098a: 18        -         clc
098b: 65 fb     -         adc ZP1						//add number to start	
098d: 85 14     -         sta WINT
098f: a5 64     -         lda $64						//FAC mantissa hi
0991: 65 fc     -         adc ZP2
0993: 85 15     -         sta WINT+1
0995: 60        - over:   rts			
0996: e6 fd     - rnd_X:  inc ZP3
0998: d0 02     -         bne toFloat
099a: e6 fe     -         inc ZP4	
099c: a4 fd     - toFloat:ldy ZP3
099e: a5 fe     -         lda ZP4
09a0: 20 91 b3  -         jsr GIVAYF 					//A(h),Y(L) - FAC
09a3: a2 c1     -         ldx #<flt
09a5: a0 09     -         ldy #>flt
09a7: 20 d4 bb  -         jsr MOVMF					//store FAC to flt		
09aa: a9 00     -         lda #$00					//get actual RND(0)
09ac: 20 9a e0  -         jsr RND						//$E09A
09af: a9 c1     -         lda #<flt
09b1: a0 09     -         ldy #>flt
09b3: 20 28 ba  -         jsr FMULT					//Multiplies a number from RAM (A,y) and FAC	
09b6: 20 cc bc  -         jsr FAINT					//to integer
09b9: 20 bf b1  -         jsr AYINT					//fac to signed int HI $64 LO $65
09bc: a5 65     -         lda $65						//FAC mantissa lo
09be: 85 14     -         sta WINT					
09c0: 60        -         rts			

[Data RND]
09c1: 00 00 00 00 00                                   - dataRND,flt:.byte 0,0,0,0,0

[Grid_Constants]
09c6: 00 ff     - Grid_Constants,BASIC_DIRS,UP:.byte 	0, -1
09c8: 00 01     - DOWN:   .byte 	0, 1
09ca: ff 00     - LEFT:   .byte	-1, 0
09cc: 01 00     - RIGHT:  .byte 	1,0
09ce: ff ff     - PROX_TEMPLATE:.byte 	-1, -1
09d0: 01 01     -         .byte 	1, 1
09d2: ff ff     -         .byte 	-1, -1
09d4: 01 01     -         .byte 	1, 1
09d6: ad 27 16  - SWAP_DEAD_END_STACK:lda DE_counter
09d9: 85 52     -         sta BV0
09db: ad 28 16  -         lda REM_DE_counter
09de: 8d 27 16  -         sta DE_counter
09e1: a5 52     -         lda BV0
09e3: 8d 28 16  -         sta REM_DE_counter
09e6: a9 00     -         lda #<addr
09e8: 85 5e     -         sta X
09ea: a9 c4     -         lda #>addr
09ec: 85 5f     -         sta X+1
09ee: a9 00     -         lda #<addr
09f0: 85 5c     -         sta X
09f2: a9 c5     -         lda #>addr
09f4: 85 5d     -         sta X+1
09f6: 60        -         rts
09f7: ad 00 16  - MAZE_FILL:lda X
09fa: 85 fb     -         sta Y
09fc: ad 01 16  -         lda X + 1
09ff: 85 fc     -         sta Y + 1
0a01: a9 00     -         lda	#WALL
0a03: a2 04     -         ldx #4
0a05: a0 00     - block:  ldy #0
0a07: 91 fb     - fill:   sta (ZP1),y
0a09: c8        -         iny
0a0a: d0 fb     -         bne fill
0a0c: e6 fc     -         inc ZP2
0a0e: ca        -         dex
0a0f: d0 f4     -         bne block
0a11: 60        -         rts
0a12: ad 00 16  - MAZE_DOT:lda X
0a15: 85 fb     -         sta Y
0a17: ad 01 16  -         lda X + 1
0a1a: 85 fc     -         sta Y + 1
0a1c: a9 00     -         lda #0
0a1e: 85 fe     -         sta ZP4				
0a20: ad 03 16  -         lda grid+1		
0a23: 85 fd     -         sta ZP3
0a25: a0 03     -         ldy #03
0a27: 06 fd     - mul8:   asl X
0a29: 26 fe     -         rol X+1	
0a2b: 88        -         dey
0a2c: d0 f9     -         bne mul8
0a2e: 18        -         clc
0a2f: a5 fb     -         lda X
0a31: 65 fd     -         adc Y
0a33: 85 fb     -         sta X
0a35: 90 02     -         bcc skip
0a37: e6 fc     -         inc X+1
0a39: 18        - skip:   clc
0a3a: a5 fc     -         lda X+1
0a3c: 65 fe     -         adc Y+1
0a3e: 85 fc     -         sta X+1	
0a40: a0 02     -         ldy #02	
0a42: 06 fd     - mul32:  asl X
0a44: 26 fe     -         rol X+1	
0a46: 88        -         dey
0a47: d0 f9     -         bne mul32
0a49: 18        -         clc
0a4a: a5 fb     -         lda X
0a4c: 65 fd     -         adc Y
0a4e: 85 fb     -         sta X
0a50: 90 02     -         bcc skip
0a52: e6 fc     -         inc X+1
0a54: 18        - skip:   clc
0a55: a5 fc     -         lda X+1
0a57: 65 fe     -         adc Y+1
0a59: 85 fc     -         sta X+1	
0a5b: 18        -         clc
0a5c: a5 fb     -         lda X
0a5e: 6d 02 16  -         adc y	
0a61: 85 fb     -         sta X
0a63: 90 02     -         bcc out+2
0a65: e6 fc     - out:    inc X+1
0a67: a9 2e     -         lda #DOT
0a69: a0 00     -         ldy #0
0a6b: 91 fb     -         sta (ZP1),y
0a6d: 60        -         rts
0a6e: 20 0b 12  - ROOMS:  jsr MAKE_ROOMS
0a71: 20 75 0a  -         jsr PAINT_ROOMS
0a74: 60        -         rts
0a75: a2 00     - PAINT_ROOMS:ldx #00
0a77: 86 3f     - each:   stx TEMPX				//each room
0a79: 8a        -         txa
0a7a: 0a        -         asl
0a7b: 0a        -         asl
0a7c: a8        -         tay
0a7d: b9 29 16  -         lda rooms,y				//get top left x of room
0a80: 85 4e     -         sta BV9
0a82: c8        -         iny
0a83: b9 29 16  -         lda rooms,y				//get top left y of room
0a86: 85 4f     -         sta BV10
0a88: c8        -         iny
0a89: b9 29 16  -         lda rooms,y 			//w
0a8c: 85 02     -         sta ZP0
0a8e: c8        -         iny
0a8f: b9 29 16  -         lda rooms,y 			//h
0a92: 85 52     -         sta BV0
0a94: a2 00     -         ldx #0
0a96: a0 00     - cont_w: ldy #0
0a98: 86 41     - cont_h: stx TEMPA1
0a9a: a5 4e     -         lda BV9
0a9c: 18        -         clc
0a9d: 65 41     -         adc TEMPA1
0a9f: 8d 02 16  -         sta maze_start
0aa2: 84 41     -         sty TEMPA1
0aa4: a5 4f     -         lda BV10
0aa6: 18        -         clc
0aa7: 65 41     -         adc TEMPA1
0aa9: 8d 03 16  -         sta maze_start+1
0aac: 84 40     -         sty TEMPY
0aae: 20 12 0a  -         jsr MAZE_DOT
0ab1: a4 40     -         ldy TEMPY
0ab3: c8        -         iny
0ab4: c4 52     -         cpy BV0
0ab6: d0 e0     -         bne cont_h
0ab8: e8        -         inx
0ab9: e4 02     -         cpx ZP0
0abb: d0 d9     -         bne cont_w
0abd: a6 3f     -         ldx TEMPX
0abf: e8        -         inx
0ac0: e0 04     -         cpx #ROOM_NUMBER
0ac2: d0 b3     -         bne each
0ac4: 60        - out:    rts
0ac5: a2 03     - POINTERS_FROM_START:ldx #03
0ac7: 8a        - add:    txa
0ac8: 0a        -         asl
0ac9: a8        -         tay		
0aca: 18        -         clc
0acb: ad 02 16  -         lda maze_start
0ace: 79 c6 09  -         adc BASIC_DIRS,y
0ad1: 99 0a 16  -         sta candidates,y
0ad4: c8        -         iny
0ad5: 18        -         clc
0ad6: ad 03 16  -         lda maze_start+1
0ad9: 79 c6 09  -         adc BASIC_DIRS,y
0adc: 99 0a 16  -         sta candidates,y
0adf: ca        -         dex
0ae0: 10 e5     -         bpl add
0ae2: a2 03     -         ldx #03
0ae4: 8a        - copy:   txa
0ae5: 0a        -         asl
0ae6: a8        -         tay	
0ae7: b9 c6 09  -         lda BASIC_DIRS,y
0aea: 99 12 16  -         sta candidates_vectors,y
0aed: c8        -         iny
0aee: b9 c6 09  -         lda BASIC_DIRS,y
0af1: 99 12 16  -         sta candidates_vectors,y
0af4: ca        -         dex
0af5: 10 ed     -         bpl copy
0af7: a9 04     -         lda #04
0af9: 8d 1a 16  -         sta candidates_length
0afc: 60        -         rts
0afd: ad 1a 16  - FILTER_IF_OUT:lda candidates_length
0b00: c9 01     -         cmp #1
0b02: b0 01     -         bcs start
0b04: 60        -         rts
0b05: ae 1a 16  - start:  ldx candidates_length				//number of grids yet to check
0b08: ca        -         dex
0b09: 8a        - each:   txa
0b0a: 0a        -         asl
0b0b: a8        -         tay
0b0c: 18        -         clc
0b0d: b9 0a 16  -         lda candidates,y
0b10: c9 27     -         cmp #MAX_X+1
0b12: b0 18     -         bcs shift
0b14: c9 01     -         cmp #MIN_X
0b16: 90 14     -         bcc shift
0b18: c8        -         iny
0b19: 18        -         clc
0b1a: b9 0a 16  -         lda candidates,y
0b1d: c9 18     -         cmp #MAX_Y+1
0b1f: b0 0b     -         bcs shift
0b21: c9 01     -         cmp #MIN_Y
0b23: 90 07     -         bcc shift
0b25: ca        - cont:   dex
0b26: 30 03     -         bmi out
0b28: 4c 09 0b  -         jmp each
0b2b: 60        - out:    rts
0b2c: 86 3f     - shift:  stx TEMPX									//save x							
0b2e: 86 47     -         stx VAR_A									//set index to VAR_A
0b30: ad 1a 16  -         lda X
0b33: 85 48     -         sta Y
0b35: a9 0a     -         lda #<addr
0b37: 85 43     -         sta X
0b39: a9 16     -         lda #>addr
0b3b: 85 44     -         sta X+1
0b3d: a9 02     -         lda #data_size
0b3f: 85 49     -         sta VAR_C
0b41: 20 c9 08  -         jsr SPLICE
0b44: ad 1a 16  -         lda X
0b47: 85 48     -         sta Y
0b49: a9 12     -         lda #<addr
0b4b: 85 43     -         sta X
0b4d: a9 16     -         lda #>addr
0b4f: 85 44     -         sta X+1
0b51: a9 02     -         lda #data_size
0b53: 85 49     -         sta VAR_C
0b55: 20 c9 08  -         jsr SPLICE
0b58: ce 1a 16  -         dec candidates_length						//dec array length
0b5b: a6 3f     -         ldx TEMPX									//restore x
0b5d: 4c 25 0b  -         jmp cont									//return to loop
0b60: ad 1a 16  - FILTER_IF_DOT:lda candidates_length
0b63: c9 01     -         cmp #1
0b65: b0 01     -         bcs start
0b67: 60        -         rts
0b68: ae 1a 16  - start:  ldx candidates_length						//number of grids yet to check
0b6b: ca        -         dex
0b6c: 8a        - each:   txa
0b6d: 0a        -         asl
0b6e: a8        -         tay
0b6f: b9 0a 16  -         lda candidates,y
0b72: 8d 04 16  -         sta grid_pointer
0b75: c8        -         iny
0b76: b9 0a 16  -         lda candidates,y
0b79: 8d 05 16  -         sta grid_pointer+1
0b7c: ad 00 16  -         lda X
0b7f: 85 fb     -         sta Y
0b81: ad 01 16  -         lda X + 1
0b84: 85 fc     -         sta Y + 1
0b86: a9 00     -         lda #0
0b88: 85 fe     -         sta ZP4				
0b8a: ad 05 16  -         lda grid+1		
0b8d: 85 fd     -         sta ZP3
0b8f: a0 03     -         ldy #03
0b91: 06 fd     - mul8:   asl X
0b93: 26 fe     -         rol X+1	
0b95: 88        -         dey
0b96: d0 f9     -         bne mul8
0b98: 18        -         clc
0b99: a5 fb     -         lda X
0b9b: 65 fd     -         adc Y
0b9d: 85 fb     -         sta X
0b9f: 90 02     -         bcc skip
0ba1: e6 fc     -         inc X+1
0ba3: 18        - skip:   clc
0ba4: a5 fc     -         lda X+1
0ba6: 65 fe     -         adc Y+1
0ba8: 85 fc     -         sta X+1	
0baa: a0 02     -         ldy #02	
0bac: 06 fd     - mul32:  asl X
0bae: 26 fe     -         rol X+1	
0bb0: 88        -         dey
0bb1: d0 f9     -         bne mul32
0bb3: 18        -         clc
0bb4: a5 fb     -         lda X
0bb6: 65 fd     -         adc Y
0bb8: 85 fb     -         sta X
0bba: 90 02     -         bcc skip
0bbc: e6 fc     -         inc X+1
0bbe: 18        - skip:   clc
0bbf: a5 fc     -         lda X+1
0bc1: 65 fe     -         adc Y+1
0bc3: 85 fc     -         sta X+1	
0bc5: 18        -         clc
0bc6: a5 fb     -         lda X
0bc8: 6d 04 16  -         adc y	
0bcb: 85 fb     -         sta X
0bcd: 90 02     -         bcc out+2
0bcf: e6 fc     - out:    inc X+1
0bd1: a0 00     -         ldy #0
0bd3: b1 fb     -         lda (ZP1),y
0bd5: c9 2e     -         cmp #DOT
0bd7: f0 04     -         beq shift
0bd9: ca        - cont:   dex
0bda: 10 90     -         bpl each
0bdc: 60        - out:    rts
0bdd: 86 3f     - shift:  stx TEMPX									//save x
0bdf: 86 47     -         stx VAR_A									//set index to VAR_A
0be1: ad 1a 16  -         lda X
0be4: 85 48     -         sta Y
0be6: a9 0a     -         lda #<addr
0be8: 85 43     -         sta X
0bea: a9 16     -         lda #>addr
0bec: 85 44     -         sta X+1
0bee: a9 02     -         lda #data_size
0bf0: 85 49     -         sta VAR_C
0bf2: 20 c9 08  -         jsr SPLICE
0bf5: ad 1a 16  -         lda X
0bf8: 85 48     -         sta Y
0bfa: a9 12     -         lda #<addr
0bfc: 85 43     -         sta X
0bfe: a9 16     -         lda #>addr
0c00: 85 44     -         sta X+1
0c02: a9 02     -         lda #data_size
0c04: 85 49     -         sta VAR_C
0c06: 20 c9 08  -         jsr SPLICE
0c09: ce 1a 16  -         dec candidates_length						//dec array length
0c0c: a6 3f     -         ldx TEMPX									//restore x
0c0e: 4c d9 0b  -         jmp cont									//return to loop
0c11: a5 02     - PUSH_REST_ON_STACK:lda ZP0										//index was stored in ZP0
0c13: 85 47     -         sta VAR_A									//set index to VAR_A
0c15: ad 1a 16  -         lda X
0c18: 85 48     -         sta Y
0c1a: a9 0a     -         lda #<addr
0c1c: 85 43     -         sta X
0c1e: a9 16     -         lda #>addr
0c20: 85 44     -         sta X+1
0c22: a9 02     -         lda #data_size
0c24: 85 49     -         sta VAR_C
0c26: 20 c9 08  -         jsr SPLICE
0c29: ad 1a 16  -         lda X
0c2c: 85 48     -         sta Y
0c2e: a9 12     -         lda #<addr
0c30: 85 43     -         sta X
0c32: a9 16     -         lda #>addr
0c34: 85 44     -         sta X+1
0c36: a9 02     -         lda #data_size
0c38: 85 49     -         sta VAR_C
0c3a: 20 c9 08  -         jsr SPLICE
0c3d: ce 1a 16  -         dec candidates_length						//dec array length
0c40: a2 00     -         ldx #0
0c42: a0 00     - each:   ldy #0
0c44: 86 3f     -         stx TEMPX									//save x
0c46: 8a        -         txa											//x = x *2	
0c47: 0a        -         asl 
0c48: aa        -         tax									
0c49: bd 0a 16  -         lda candidates,x							//x
0c4c: 91 71     -         sta (STKPTR1),y
0c4e: c8        -         iny
0c4f: e8        -         inx
0c50: bd 0a 16  -         lda candidates,x							//y
0c53: 91 71     -         sta (STKPTR1),y
0c55: 18        -         clc
0c56: a5 71     -         lda X
0c58: 69 02     -         adc #C
0c5a: 85 71     -         sta X
0c5c: 90 02     -         bcc out+2
0c5e: e6 72     - out:    inc X+1
0c60: 88        -         dey
0c61: ca        -         dex
0c62: bd 12 16  -         lda candidates_vectors,x					//x
0c65: 91 71     -         sta (STKPTR1),y
0c67: c8        -         iny
0c68: e8        -         inx
0c69: bd 12 16  -         lda candidates_vectors,x					//y
0c6c: 91 71     -         sta (STKPTR1),y
0c6e: 18        -         clc
0c6f: a5 71     -         lda X
0c71: 69 02     -         adc #C
0c73: 85 71     -         sta X
0c75: 90 02     -         bcc out+2
0c77: e6 72     - out:    inc X+1
0c79: a6 3f     -         ldx TEMPX									//restore x
0c7b: e8        -         inx
0c7c: ec 1a 16  -         cpx candidates_length
0c7f: d0 c1     -         bne each
0c81: 60        - out:    rts		
0c82: ad 1a 16  - FILTER_IF_NEXT_PRIMARY:lda candidates_length
0c85: c9 01     -         cmp #1
0c87: b0 01     -         bcs start										//cont if 1 or more
0c89: 60        -         rts												//else exit, if no candidates
0c8a: ae 1a 16  - start:  ldx candidates_length							//number of grids yet to check
0c8d: ca        -         dex												//to zero offset
0c8e: 8a        - each:   txa
0c8f: 0a        -         asl												//double, because datasize is 2
0c90: a8        -         tay												//offset in y (zero based x * datasize)
0c91: b9 0a 16  -         lda candidates,y
0c94: 8d 04 16  -         sta grid_pointer
0c97: b9 12 16  -         lda candidates_vectors,y
0c9a: 8d 06 16  -         sta direction_pointer
0c9d: c8        -         iny
0c9e: b9 0a 16  -         lda candidates,y
0ca1: 8d 05 16  -         sta grid_pointer+1
0ca4: b9 12 16  -         lda candidates_vectors,y
0ca7: 8d 07 16  -         sta direction_pointer+1
0caa: 18        -         clc
0cab: ad 04 16  -         lda grid_pointer
0cae: 6d 06 16  -         adc direction_pointer
0cb1: 8d 08 16  -         sta test_pointer
0cb4: 18        -         clc
0cb5: ad 05 16  -         lda grid_pointer+1
0cb8: 6d 07 16  -         adc direction_pointer+1
0cbb: 8d 09 16  -         sta test_pointer+1
0cbe: ad 00 16  -         lda X
0cc1: 85 fb     -         sta Y
0cc3: ad 01 16  -         lda X + 1
0cc6: 85 fc     -         sta Y + 1
0cc8: a9 00     -         lda #0
0cca: 85 fe     -         sta ZP4				
0ccc: ad 09 16  -         lda grid+1		
0ccf: 85 fd     -         sta ZP3
0cd1: a0 03     -         ldy #03
0cd3: 06 fd     - mul8:   asl X
0cd5: 26 fe     -         rol X+1	
0cd7: 88        -         dey
0cd8: d0 f9     -         bne mul8
0cda: 18        -         clc
0cdb: a5 fb     -         lda X
0cdd: 65 fd     -         adc Y
0cdf: 85 fb     -         sta X
0ce1: 90 02     -         bcc skip
0ce3: e6 fc     -         inc X+1
0ce5: 18        - skip:   clc
0ce6: a5 fc     -         lda X+1
0ce8: 65 fe     -         adc Y+1
0cea: 85 fc     -         sta X+1	
0cec: a0 02     -         ldy #02	
0cee: 06 fd     - mul32:  asl X
0cf0: 26 fe     -         rol X+1	
0cf2: 88        -         dey
0cf3: d0 f9     -         bne mul32
0cf5: 18        -         clc
0cf6: a5 fb     -         lda X
0cf8: 65 fd     -         adc Y
0cfa: 85 fb     -         sta X
0cfc: 90 02     -         bcc skip
0cfe: e6 fc     -         inc X+1
0d00: 18        - skip:   clc
0d01: a5 fc     -         lda X+1
0d03: 65 fe     -         adc Y+1
0d05: 85 fc     -         sta X+1	
0d07: 18        -         clc
0d08: a5 fb     -         lda X
0d0a: 6d 08 16  -         adc y	
0d0d: 85 fb     -         sta X
0d0f: 90 02     -         bcc out+2
0d11: e6 fc     - out:    inc X+1
0d13: a0 00     -         ldy #0
0d15: b1 fb     -         lda (ZP1),y
0d17: c5 52     -         cmp BV0										//BV0 holds the value to filter out
0d19: f0 07     -         beq shift									//yes
0d1b: ca        - cont:   dex
0d1c: 30 03     -         bmi out										//less than zero, stop
0d1e: 4c 8e 0c  -         jmp each									//loop back, branch too far
0d21: 60        - out:    rts
0d22: 86 3f     - shift:  stx TEMPX									//save x
0d24: 86 47     -         stx VAR_A									//set index to VAR_A
0d26: ad 1a 16  -         lda X
0d29: 85 48     -         sta Y
0d2b: a9 0a     -         lda #<addr
0d2d: 85 43     -         sta X
0d2f: a9 16     -         lda #>addr
0d31: 85 44     -         sta X+1
0d33: a9 02     -         lda #data_size
0d35: 85 49     -         sta VAR_C
0d37: 20 c9 08  -         jsr SPLICE
0d3a: ad 1a 16  -         lda X
0d3d: 85 48     -         sta Y
0d3f: a9 12     -         lda #<addr
0d41: 85 43     -         sta X
0d43: a9 16     -         lda #>addr
0d45: 85 44     -         sta X+1
0d47: a9 02     -         lda #data_size
0d49: 85 49     -         sta VAR_C
0d4b: 20 c9 08  -         jsr SPLICE
0d4e: ce 1a 16  -         dec candidates_length						//dec array length
0d51: a6 3f     -         ldx TEMPX									//restore x
0d53: 4c 1b 0d  -         jmp cont									//return to loop
0d56: ad 1a 16  - FILTER_N_CONNECTIONS:lda candidates_length
0d59: c9 01     -         cmp #1
0d5b: b0 01     -         bcs start										//cont if 1 or more
0d5d: 60        -         rts												//else exit, if no candidates
0d5e: ae 1a 16  - start:  ldx candidates_length							//number of grids yet to check
0d61: ca        -         dex												//to zero offset	
0d62: 86 3f     - each:   stx TEMPX										// save x 
0d64: 8a        -         txa
0d65: 0a        -         asl												//double, because datasize is 2
0d66: a8        -         tay												//offset in y (zero based x * datasize)
0d67: b9 0a 16  -         lda candidates,y
0d6a: 8d 04 16  -         sta grid_pointer
0d6d: c8        -         iny
0d6e: b9 0a 16  -         lda candidates,y
0d71: 8d 05 16  -         sta grid_pointer+1
0d74: ad 04 16  -         lda bridge
0d77: 85 50     -         sta BV7
0d79: ad 05 16  -         lda bridge+1
0d7c: 85 51     -         sta BV8
0d7e: a9 00     -         lda #0
0d80: 85 4a     -         sta VAR_D
0d82: 20 c6 14  -         jsr CHECK_CONNECTION
0d85: a6 3f     -         ldx TEMPX										//restore x
0d87: a5 4a     -         lda VAR_D										//value to compare is in BV0
0d89: c5 52     -         cmp BV0
0d8b: d0 07     -         bne shift										//not equal, shift											
0d8d: ca        - cont:   dex
0d8e: 30 03     -         bmi out											//less than zero, stop
0d90: 4c 62 0d  -         jmp each										//loop back, branch too far
0d93: 60        - out:    rts
0d94: 86 3f     - shift:  stx TEMPX									//save x
0d96: 86 47     -         stx VAR_A									//set index to VAR_A
0d98: ad 1a 16  -         lda X
0d9b: 85 48     -         sta Y
0d9d: a9 0a     -         lda #<addr
0d9f: 85 43     -         sta X
0da1: a9 16     -         lda #>addr
0da3: 85 44     -         sta X+1
0da5: a9 02     -         lda #data_size
0da7: 85 49     -         sta VAR_C
0da9: 20 c9 08  -         jsr SPLICE
0dac: ad 1a 16  -         lda X
0daf: 85 48     -         sta Y
0db1: a9 12     -         lda #<addr
0db3: 85 43     -         sta X
0db5: a9 16     -         lda #>addr
0db7: 85 44     -         sta X+1
0db9: a9 02     -         lda #data_size
0dbb: 85 49     -         sta VAR_C
0dbd: 20 c9 08  -         jsr SPLICE
0dc0: ce 1a 16  -         dec candidates_length						//dec array length
0dc3: a6 3f     -         ldx TEMPX									//restore x
0dc5: 4c 8d 0d  -         jmp cont									//return to loop
0dc8: ad 1a 16  - FILTER_SIDE_PROXIMIY:lda candidates_length
0dcb: c9 01     -         cmp #1
0dcd: b0 01     -         bcs start										//cont if 1 or more
0dcf: 60        -         rts												//else exit, if no candidates
0dd0: ae 1a 16  - start:  ldx candidates_length							//number of grids yet to check
0dd3: ca        -         dex												//to zero offset
0dd4: 8a        - each:   txa
0dd5: 0a        -         asl												//double, because datasize is 2
0dd6: a8        -         tay												//offset in y (zero based x * datasize)
0dd7: b9 0a 16  -         lda candidates, y
0dda: 8d 04 16  -         sta grid_pointer
0ddd: b9 12 16  -         lda candidates_vectors,y
0de0: 8d 06 16  -         sta direction_pointer
0de3: c8        -         iny
0de4: b9 0a 16  -         lda candidates, y
0de7: 8d 05 16  -         sta grid_pointer+1
0dea: b9 12 16  -         lda candidates_vectors,y
0ded: 8d 07 16  -         sta direction_pointer+1
0df0: a9 ce     -         lda #<addr
0df2: 85 50     -         sta X
0df4: a9 09     -         lda #>addr
0df6: 85 51     -         sta X+1
0df8: a9 1b     -         lda #<addr
0dfa: 85 4e     -         sta X
0dfc: a9 16     -         lda #>addr
0dfe: 85 4f     -         sta X+1
0e00: a0 08     -         ldy #length											
0e02: 88        -         dey
0e03: b1 50     - copy:   lda (BV7),y
0e05: 91 4e     -         sta (BV9),y
0e07: 88        -         dey
0e08: 10 f9     -         bpl copy
0e0a: a0 01     -         ldy #01											//y?
0e0c: b9 06 16  -         lda direction_pointer,y
0e0f: d0 01     -         bne ok											//if not zero, than this is right dimension
0e11: 88        -         dey												//not y, but x
0e12: b9 06 16  - ok:     lda direction_pointer,y							//index of dimension now in y register
0e15: 99 1b 16  -         sta proximity_vectors,y							//set sequence 1,1,0,0 on the right dimension, datasize=2
0e18: c8        -         iny
0e19: c8        -         iny
0e1a: 99 1b 16  -         sta proximity_vectors,y	
0e1d: c8        -         iny
0e1e: c8        -         iny
0e1f: a9 00     -         lda #0
0e21: 99 1b 16  -         sta proximity_vectors,y	
0e24: c8        -         iny
0e25: c8        -         iny
0e26: 99 1b 16  -         sta proximity_vectors,y							//proximity vectors ready
0e29: a0 00     -         ldy #00
0e2b: ad 04 16  - repeat: lda grid_pointer
0e2e: 18        -         clc
0e2f: 79 1b 16  -         adc proximity_vectors,y
0e32: 8d 08 16  -         sta test_pointer
0e35: c8        -         iny
0e36: ad 05 16  -         lda grid_pointer+1
0e39: 18        -         clc
0e3a: 79 1b 16  -         adc proximity_vectors,y
0e3d: 8d 09 16  -         sta test_pointer+1								//next grid now in test_pointer
0e40: 84 40     -         sty TEMPY										//save y
0e42: ad 00 16  -         lda X
0e45: 85 fb     -         sta Y
0e47: ad 01 16  -         lda X + 1
0e4a: 85 fc     -         sta Y + 1
0e4c: a9 00     -         lda #0
0e4e: 85 fe     -         sta ZP4				
0e50: ad 09 16  -         lda grid+1		
0e53: 85 fd     -         sta ZP3
0e55: a0 03     -         ldy #03
0e57: 06 fd     - mul8:   asl X
0e59: 26 fe     -         rol X+1	
0e5b: 88        -         dey
0e5c: d0 f9     -         bne mul8
0e5e: 18        -         clc
0e5f: a5 fb     -         lda X
0e61: 65 fd     -         adc Y
0e63: 85 fb     -         sta X
0e65: 90 02     -         bcc skip
0e67: e6 fc     -         inc X+1
0e69: 18        - skip:   clc
0e6a: a5 fc     -         lda X+1
0e6c: 65 fe     -         adc Y+1
0e6e: 85 fc     -         sta X+1	
0e70: a0 02     -         ldy #02	
0e72: 06 fd     - mul32:  asl X
0e74: 26 fe     -         rol X+1	
0e76: 88        -         dey
0e77: d0 f9     -         bne mul32
0e79: 18        -         clc
0e7a: a5 fb     -         lda X
0e7c: 65 fd     -         adc Y
0e7e: 85 fb     -         sta X
0e80: 90 02     -         bcc skip
0e82: e6 fc     -         inc X+1
0e84: 18        - skip:   clc
0e85: a5 fc     -         lda X+1
0e87: 65 fe     -         adc Y+1
0e89: 85 fc     -         sta X+1	
0e8b: 18        -         clc
0e8c: a5 fb     -         lda X
0e8e: 6d 08 16  -         adc y	
0e91: 85 fb     -         sta X
0e93: 90 02     -         bcc out+2
0e95: e6 fc     - out:    inc X+1
0e97: a0 00     -         ldy #0
0e99: b1 fb     -         lda (ZP1),y
0e9b: c9 2e     -         cmp #DOT										//is dot? (empty)
0e9d: f0 0e     -         beq shift										//yes, shift on x
0e9f: a4 40     -         ldy TEMPY										//restore y
0ea1: c8        -         iny
0ea2: c0 08     -         cpy #08
0ea4: d0 85     -         bne repeat
0ea6: ca        - cont:   dex
0ea7: 30 03     -         bmi out										//less than zero, stop
0ea9: 4c d4 0d  -         jmp each									//loop back, branch too far
0eac: 60        - out:    rts
0ead: 86 3f     - shift:  stx TEMPX									//save x
0eaf: 86 47     -         stx VAR_A									//set index to VAR_A
0eb1: ad 1a 16  -         lda X
0eb4: 85 48     -         sta Y
0eb6: a9 0a     -         lda #<addr
0eb8: 85 43     -         sta X
0eba: a9 16     -         lda #>addr
0ebc: 85 44     -         sta X+1
0ebe: a9 02     -         lda #data_size
0ec0: 85 49     -         sta VAR_C
0ec2: 20 c9 08  -         jsr SPLICE
0ec5: ad 1a 16  -         lda X
0ec8: 85 48     -         sta Y
0eca: a9 12     -         lda #<addr
0ecc: 85 43     -         sta X
0ece: a9 16     -         lda #>addr
0ed0: 85 44     -         sta X+1
0ed2: a9 02     -         lda #data_size
0ed4: 85 49     -         sta VAR_C
0ed6: 20 c9 08  -         jsr SPLICE
0ed9: ce 1a 16  -         dec candidates_length						//dec array length
0edc: a6 3f     -         ldx TEMPX									//restore x
0ede: 4c a6 0e  -         jmp cont									//return to loop
0ee1: a5 71     - CANDIDATE_FROM_STACK:lda X
0ee3: 38        -         sec
0ee4: e9 02     -         sbc #C
0ee6: 85 71     -         sta X
0ee8: b0 02     -         bcs out+2
0eea: c6 72     - out:    dec X+1
0eec: a0 00     -         ldy #0									//x
0eee: b1 71     -         lda (STKPTR1),y
0ef0: 99 12 16  -         sta candidates_vectors,y
0ef3: c8        -         iny										//y
0ef4: b1 71     -         lda (STKPTR1),y
0ef6: 99 12 16  -         sta candidates_vectors,y
0ef9: a5 71     -         lda X
0efb: 38        -         sec
0efc: e9 02     -         sbc #C
0efe: 85 71     -         sta X
0f00: b0 02     -         bcs out+2
0f02: c6 72     - out:    dec X+1
0f04: a0 00     -         ldy #0									//x
0f06: b1 71     -         lda (STKPTR1),y
0f08: 99 0a 16  -         sta candidates,y
0f0b: c8        -         iny										//y
0f0c: b1 71     -         lda (STKPTR1),y
0f0e: 99 0a 16  -         sta candidates,y
0f11: a9 01     -         lda #01
0f13: 8d 1a 16  -         sta candidates_length
0f16: 60        - out:    rts
0f17: ae 1a 16  - CHECK_BIAS:ldx candidates_length
0f1a: ca        -         dex
0f1b: 8a        - each:   txa
0f1c: 0a        -         asl 								// length to offset in
0f1d: a8        -         tay									// y
0f1e: b9 12 16  -         lda candidates_vectors,y			// x dim
0f21: cd 25 16  -         cmp bias_direction
0f24: d0 09     -         bne not 							//not same
0f26: c8        -         iny
0f27: b9 12 16  -         lda	candidates_vectors,y			// y dim	
0f2a: cd 26 16  -         cmp bias_direction+1				//the same
0f2d: f0 06     -         beq found
0f2f: ca        - not:    dex
0f30: 10 e9     -         bpl each
0f32: a9 ff     -         lda #-1								//not found: -1
0f34: 60        -         rts
0f35: 8a        - found:  txa									//index in acc
0f36: 60        -         rts
0f37: a0 00     - STORE_DEAD_END:ldy #0
0f39: ad 02 16  -         lda maze_start			//x
0f3c: 91 5c     -         sta (STKPTR3),y
0f3e: c8        -         iny
0f3f: ad 03 16  -         lda maze_start+1		//y
0f42: 91 5c     -         sta (STKPTR3),y
0f44: ee 27 16  -         inc DE_counter			//assumption always less than 255
0f47: 18        -         clc
0f48: a5 5c     -         lda X
0f4a: 69 02     -         adc #C
0f4c: 85 5c     -         sta X
0f4e: 90 02     -         bcc out+2
0f50: e6 5d     - out:    inc X+1
0f52: a9 00     -         lda #<addr
0f54: 85 fb     -         sta X
0f56: a9 d8     -         lda #>addr
0f58: 85 fc     -         sta X+1
0f5a: a9 00     -         lda #0
0f5c: 85 fe     -         sta ZP4				
0f5e: ad 03 16  -         lda grid+1		
0f61: 85 fd     -         sta ZP3
0f63: a0 03     -         ldy #03
0f65: 06 fd     - mul8:   asl X
0f67: 26 fe     -         rol X+1	
0f69: 88        -         dey
0f6a: d0 f9     -         bne mul8
0f6c: 18        -         clc
0f6d: a5 fb     -         lda X
0f6f: 65 fd     -         adc Y
0f71: 85 fb     -         sta X
0f73: 90 02     -         bcc skip
0f75: e6 fc     -         inc X+1
0f77: 18        - skip:   clc
0f78: a5 fc     -         lda X+1
0f7a: 65 fe     -         adc Y+1
0f7c: 85 fc     -         sta X+1	
0f7e: a0 02     -         ldy #02	
0f80: 06 fd     - mul32:  asl X
0f82: 26 fe     -         rol X+1	
0f84: 88        -         dey
0f85: d0 f9     -         bne mul32
0f87: 18        -         clc
0f88: a5 fb     -         lda X
0f8a: 65 fd     -         adc Y
0f8c: 85 fb     -         sta X
0f8e: 90 02     -         bcc skip
0f90: e6 fc     -         inc X+1
0f92: 18        - skip:   clc
0f93: a5 fc     -         lda X+1
0f95: 65 fe     -         adc Y+1
0f97: 85 fc     -         sta X+1	
0f99: 18        -         clc
0f9a: a5 fb     -         lda X
0f9c: 6d 02 16  -         adc y	
0f9f: 85 fb     -         sta X
0fa1: 90 02     -         bcc out+2
0fa3: e6 fc     - out:    inc X+1
0fa5: a9 02     -         lda #RED
0fa7: a0 00     -         ldy #0
0fa9: 91 fb     -         sta (ZP1),y
0fab: 60        - out:    rts
0fac: ae 27 16  - CONNECT_DEAD_ENDS:ldx DE_counter							//starting from last DE towards 0th
0faf: ca        -         dex
0fb0: 86 0a     - each_DE:stx GLOBAL_X
0fb2: 8a        -         txa
0fb3: 0a        -         asl 									//datasize=2
0fb4: a8        -         tay										//offset in y
0fb5: b1 5c     -         lda (STKPTR3),y
0fb7: 8d 02 16  -         sta maze_start
0fba: c8        -         iny
0fbb: b1 5c     -         lda (STKPTR3),y
0fbd: 8d 03 16  -         sta maze_start+1						//selected Dead End --> in maze_start
0fc0: a9 00     -         lda #<addr
0fc2: 85 fb     -         sta X
0fc4: a9 d8     -         lda #>addr
0fc6: 85 fc     -         sta X+1
0fc8: a9 00     -         lda #0
0fca: 85 fe     -         sta ZP4				
0fcc: ad 03 16  -         lda grid+1		
0fcf: 85 fd     -         sta ZP3
0fd1: a0 03     -         ldy #03
0fd3: 06 fd     - mul8:   asl X
0fd5: 26 fe     -         rol X+1	
0fd7: 88        -         dey
0fd8: d0 f9     -         bne mul8
0fda: 18        -         clc
0fdb: a5 fb     -         lda X
0fdd: 65 fd     -         adc Y
0fdf: 85 fb     -         sta X
0fe1: 90 02     -         bcc skip
0fe3: e6 fc     -         inc X+1
0fe5: 18        - skip:   clc
0fe6: a5 fc     -         lda X+1
0fe8: 65 fe     -         adc Y+1
0fea: 85 fc     -         sta X+1	
0fec: a0 02     -         ldy #02	
0fee: 06 fd     - mul32:  asl X
0ff0: 26 fe     -         rol X+1	
0ff2: 88        -         dey
0ff3: d0 f9     -         bne mul32
0ff5: 18        -         clc
0ff6: a5 fb     -         lda X
0ff8: 65 fd     -         adc Y
0ffa: 85 fb     -         sta X
0ffc: 90 02     -         bcc skip
0ffe: e6 fc     -         inc X+1
1000: 18        - skip:   clc
1001: a5 fc     -         lda X+1
1003: 65 fe     -         adc Y+1
1005: 85 fc     -         sta X+1	
1007: 18        -         clc
1008: a5 fb     -         lda X
100a: 6d 02 16  -         adc y	
100d: 85 fb     -         sta X
100f: 90 02     -         bcc out+2
1011: e6 fc     - out:    inc X+1
1013: a9 05     -         lda #GREEN
1015: a0 00     -         ldy #0
1017: 91 fb     -         sta (ZP1),y
1019: ad 02 16  -         lda bridge
101c: 85 50     -         sta BV7
101e: ad 03 16  -         lda bridge+1
1021: 85 51     -         sta BV8
1023: a9 00     -         lda #0
1025: 85 4a     -         sta VAR_D
1027: 20 c6 14  -         jsr CHECK_CONNECTION
102a: a5 4a     -         lda VAR_D								//check if still DE (only one grid is dot, rest are wall)
102c: c9 01     -         cmp #01									//--> number of connections is exactly 1
102e: f0 5c     -         beq still_DE							//yes
1030: a9 00     -         lda #<addr
1032: 85 fb     -         sta X
1034: a9 d8     -         lda #>addr
1036: 85 fc     -         sta X+1
1038: a9 00     -         lda #0
103a: 85 fe     -         sta ZP4				
103c: ad 03 16  -         lda grid+1		
103f: 85 fd     -         sta ZP3
1041: a0 03     -         ldy #03
1043: 06 fd     - mul8:   asl X
1045: 26 fe     -         rol X+1	
1047: 88        -         dey
1048: d0 f9     -         bne mul8
104a: 18        -         clc
104b: a5 fb     -         lda X
104d: 65 fd     -         adc Y
104f: 85 fb     -         sta X
1051: 90 02     -         bcc skip
1053: e6 fc     -         inc X+1
1055: 18        - skip:   clc
1056: a5 fc     -         lda X+1
1058: 65 fe     -         adc Y+1
105a: 85 fc     -         sta X+1	
105c: a0 02     -         ldy #02	
105e: 06 fd     - mul32:  asl X
1060: 26 fe     -         rol X+1	
1062: 88        -         dey
1063: d0 f9     -         bne mul32
1065: 18        -         clc
1066: a5 fb     -         lda X
1068: 65 fd     -         adc Y
106a: 85 fb     -         sta X
106c: 90 02     -         bcc skip
106e: e6 fc     -         inc X+1
1070: 18        - skip:   clc
1071: a5 fc     -         lda X+1
1073: 65 fe     -         adc Y+1
1075: 85 fc     -         sta X+1	
1077: 18        -         clc
1078: a5 fb     -         lda X
107a: 6d 02 16  -         adc y	
107d: 85 fb     -         sta X
107f: 90 02     -         bcc out+2
1081: e6 fc     - out:    inc X+1
1083: a9 0f     -         lda #LIGHTGREY
1085: a0 00     -         ldy #0
1087: 91 fb     -         sta (ZP1),y
1089: 4c 02 12  -         jmp end_loop							//no, check next
108c: 20 c5 0a  - still_DE:jsr POINTERS_FROM_START					//candidates for bridges in candidates
108f: 20 fd 0a  -         jsr FILTER_IF_OUT
1092: 20 60 0b  -         jsr FILTER_IF_DOT
1095: a9 00     -         lda #test
1097: 85 52     -         sta BV0
1099: 20 82 0c  -         jsr FILTER_IF_NEXT_PRIMARY
109c: a9 02     -         lda #N
109e: 85 52     -         sta BV0
10a0: 20 56 0d  -         jsr FILTER_N_CONNECTIONS
10a3: a9 00     -         lda #<addr
10a5: 85 fb     -         sta X
10a7: a9 d8     -         lda #>addr
10a9: 85 fc     -         sta X+1
10ab: a9 00     -         lda #0
10ad: 85 fe     -         sta ZP4				
10af: ad 03 16  -         lda grid+1		
10b2: 85 fd     -         sta ZP3
10b4: a0 03     -         ldy #03
10b6: 06 fd     - mul8:   asl X
10b8: 26 fe     -         rol X+1	
10ba: 88        -         dey
10bb: d0 f9     -         bne mul8
10bd: 18        -         clc
10be: a5 fb     -         lda X
10c0: 65 fd     -         adc Y
10c2: 85 fb     -         sta X
10c4: 90 02     -         bcc skip
10c6: e6 fc     -         inc X+1
10c8: 18        - skip:   clc
10c9: a5 fc     -         lda X+1
10cb: 65 fe     -         adc Y+1
10cd: 85 fc     -         sta X+1	
10cf: a0 02     -         ldy #02	
10d1: 06 fd     - mul32:  asl X
10d3: 26 fe     -         rol X+1	
10d5: 88        -         dey
10d6: d0 f9     -         bne mul32
10d8: 18        -         clc
10d9: a5 fb     -         lda X
10db: 65 fd     -         adc Y
10dd: 85 fb     -         sta X
10df: 90 02     -         bcc skip
10e1: e6 fc     -         inc X+1
10e3: 18        - skip:   clc
10e4: a5 fc     -         lda X+1
10e6: 65 fe     -         adc Y+1
10e8: 85 fc     -         sta X+1	
10ea: 18        -         clc
10eb: a5 fb     -         lda X
10ed: 6d 02 16  -         adc y	
10f0: 85 fb     -         sta X
10f2: 90 02     -         bcc out+2
10f4: e6 fc     - out:    inc X+1
10f6: a9 0b     -         lda #DARKGREY
10f8: a0 00     -         ldy #0
10fa: 91 fb     -         sta (ZP1),y
10fc: ad 1a 16  -         lda candidates_length						//check how many we have
10ff: c9 00     -         cmp #00										//if zero break;
1101: d0 77     -         bne more									//more than 0
1103: a0 00     -         ldy #0										//store into remainder stack
1105: ad 02 16  -         lda maze_start								//x
1108: 91 5e     -         sta (STKPTR5),y
110a: c8        -         iny
110b: ad 03 16  -         lda maze_start+1							//y
110e: 91 5e     -         sta (STKPTR5),y
1110: ee 28 16  -         inc REM_DE_counter							//assumption always less than 255
1113: 18        -         clc
1114: a5 5e     -         lda X
1116: 69 02     -         adc #C
1118: 85 5e     -         sta X
111a: 90 02     -         bcc out+2
111c: e6 5f     - out:    inc X+1
111e: a9 00     -         lda #<addr
1120: 85 fb     -         sta X
1122: a9 d8     -         lda #>addr
1124: 85 fc     -         sta X+1
1126: a9 00     -         lda #0
1128: 85 fe     -         sta ZP4				
112a: ad 03 16  -         lda grid+1		
112d: 85 fd     -         sta ZP3
112f: a0 03     -         ldy #03
1131: 06 fd     - mul8:   asl X
1133: 26 fe     -         rol X+1	
1135: 88        -         dey
1136: d0 f9     -         bne mul8
1138: 18        -         clc
1139: a5 fb     -         lda X
113b: 65 fd     -         adc Y
113d: 85 fb     -         sta X
113f: 90 02     -         bcc skip
1141: e6 fc     -         inc X+1
1143: 18        - skip:   clc
1144: a5 fc     -         lda X+1
1146: 65 fe     -         adc Y+1
1148: 85 fc     -         sta X+1	
114a: a0 02     -         ldy #02	
114c: 06 fd     - mul32:  asl X
114e: 26 fe     -         rol X+1	
1150: 88        -         dey
1151: d0 f9     -         bne mul32
1153: 18        -         clc
1154: a5 fb     -         lda X
1156: 65 fd     -         adc Y
1158: 85 fb     -         sta X
115a: 90 02     -         bcc skip
115c: e6 fc     -         inc X+1
115e: 18        - skip:   clc
115f: a5 fc     -         lda X+1
1161: 65 fe     -         adc Y+1
1163: 85 fc     -         sta X+1	
1165: 18        -         clc
1166: a5 fb     -         lda X
1168: 6d 02 16  -         adc y	
116b: 85 fb     -         sta X
116d: 90 02     -         bcc out+2
116f: e6 fc     - out:    inc X+1
1171: a9 02     -         lda #RED
1173: a0 00     -         ldy #0
1175: 91 fb     -         sta (ZP1),y
1177: 4c 02 12  -         jmp end_loop								//nothing to paint
117a: c9 02     - more:   cmp #02										//if it is two or more
117c: b0 05     -         bcs select_random							//go to else/select_random
117e: a9 00     -         lda #0										//otherwise, index->0 in A									
1180: 4c 97 11  -         jmp skip_else
1183: ad 1a 16  - select_random:lda candidates_length						//random index (, candidates length-1)
1186: aa        -         tax
1187: ca        -         dex
1188: 86 02     -         stx ZP0
118a: a5 02     -         lda X	
118c: 85 fd     -         sta ZP3
118e: a9 00     -         lda #0
1190: 85 fe     -         sta ZP4
1192: 20 96 09  -         jsr rnd_X
1195: a5 14     -         lda WINT
1197: 0a        - skip_else:asl 										//datasize=2	
1198: a8        -         tay											//offset in y
1199: b9 0a 16  -         lda candidates,y	
119c: 8d 02 16  -         sta maze_start
119f: c8        -         iny
11a0: b9 0a 16  -         lda candidates,y
11a3: 8d 03 16  -         sta maze_start+1
11a6: 20 12 0a  -         jsr MAZE_DOT								//and paint
11a9: a9 00     -         lda #<addr
11ab: 85 fb     -         sta X
11ad: a9 d8     -         lda #>addr
11af: 85 fc     -         sta X+1
11b1: a9 00     -         lda #0
11b3: 85 fe     -         sta ZP4				
11b5: ad 03 16  -         lda grid+1		
11b8: 85 fd     -         sta ZP3
11ba: a0 03     -         ldy #03
11bc: 06 fd     - mul8:   asl X
11be: 26 fe     -         rol X+1	
11c0: 88        -         dey
11c1: d0 f9     -         bne mul8
11c3: 18        -         clc
11c4: a5 fb     -         lda X
11c6: 65 fd     -         adc Y
11c8: 85 fb     -         sta X
11ca: 90 02     -         bcc skip
11cc: e6 fc     -         inc X+1
11ce: 18        - skip:   clc
11cf: a5 fc     -         lda X+1
11d1: 65 fe     -         adc Y+1
11d3: 85 fc     -         sta X+1	
11d5: a0 02     -         ldy #02	
11d7: 06 fd     - mul32:  asl X
11d9: 26 fe     -         rol X+1	
11db: 88        -         dey
11dc: d0 f9     -         bne mul32
11de: 18        -         clc
11df: a5 fb     -         lda X
11e1: 65 fd     -         adc Y
11e3: 85 fb     -         sta X
11e5: 90 02     -         bcc skip
11e7: e6 fc     -         inc X+1
11e9: 18        - skip:   clc
11ea: a5 fc     -         lda X+1
11ec: 65 fe     -         adc Y+1
11ee: 85 fc     -         sta X+1	
11f0: 18        -         clc
11f1: a5 fb     -         lda X
11f3: 6d 02 16  -         adc y	
11f6: 85 fb     -         sta X
11f8: 90 02     -         bcc out+2
11fa: e6 fc     - out:    inc X+1
11fc: a9 06     -         lda #BLUE
11fe: a0 00     -         ldy #0
1200: 91 fb     -         sta (ZP1),y
1202: a6 0a     - end_loop:ldx GLOBAL_X
1204: ca        -         dex
1205: 30 03     -         bmi out
1207: 4c b0 0f  -         jmp each_DE
120a: 60        - out:    rts
120b: a2 00     - MAKE_ROOMS:ldx #0
120d: 86 3f     - each:   stx TEMPX
120f: 8a        -         txa
1210: 0a        -         asl
1211: 0a        -         asl
1212: a8        -         tay					//datasize 4 from x to y
1213: a9 00     -         lda #0
1215: 85 fc     -         sta ZP2
1217: 85 fe     -         sta ZP4
1219: b9 39 16  -         lda room_def,y
121c: 85 fb     -         sta ZP1				//x from
121e: b9 3a 16  -         lda room_def+1,y
1221: 85 fd     -         sta ZP3				//x to
1223: 84 40     -         sty TEMPY
1225: 20 55 09  -         jsr rnd_XY
1228: a5 14     -         lda WINT
122a: a4 40     -         ldy TEMPY
122c: 99 29 16  -         sta rooms,y			//top x random(from, to)
122f: a9 00     -         lda #0
1231: 85 fc     -         sta ZP2
1233: 85 fe     -         sta ZP4
1235: b9 3b 16  -         lda room_def+2,y
1238: 85 fb     -         sta ZP1				//y from
123a: b9 3c 16  -         lda room_def+3,y
123d: 85 fd     -         sta ZP3				//y to
123f: 84 40     -         sty TEMPY
1241: 20 55 09  -         jsr rnd_XY
1244: a5 14     -         lda WINT
1246: a4 40     -         ldy TEMPY
1248: c8        -         iny
1249: 99 29 16  -         sta rooms,y			//top y random(from, to)
124c: a9 00     -         lda #0
124e: 85 fc     -         sta ZP2
1250: 85 fe     -         sta ZP4
1252: a9 03     -         lda #MIN_W
1254: 85 fb     -         sta ZP1
1256: a9 04     -         lda #MAX_W
1258: 85 fd     -         sta ZP3
125a: 84 40     -         sty TEMPY
125c: 20 55 09  -         jsr rnd_XY
125f: a5 14     -         lda WINT
1261: a4 40     -         ldy TEMPY
1263: c8        -         iny	
1264: 99 29 16  -         sta rooms,y			//w
1267: a9 00     -         lda #0
1269: 85 fc     -         sta ZP2
126b: 85 fe     -         sta ZP4
126d: a9 03     -         lda #MIN_W
126f: 85 fb     -         sta ZP1
1271: a9 04     -         lda #MAX_W
1273: 85 fd     -         sta ZP3
1275: 84 40     -         sty TEMPY
1277: 20 55 09  -         jsr rnd_XY
127a: a5 14     -         lda WINT
127c: a4 40     -         ldy TEMPY
127e: c8        -         iny	
127f: 99 29 16  -         sta rooms,y			//h
1282: a6 3f     -         ldx TEMPX
1284: e8        -         inx
1285: e0 04     -         cpx #ROOM_NUMBER
1287: d0 84     -         bne each
1289: 60        - out:    rts
128a: a2 00     - GET_EXIT_CANDIDATES,init:ldx #0
128c: 8e 89 16  -         stx exit_candidates_length		//reset ...
128f: 0a        -         asl 							//room index in A
1290: 0a        -         asl 							//* 4 and to y	
1291: a8        -         tay								//y offset of room index, datzasize = 4
1292: b9 2a 16  -         lda rooms+1,y					//y
1295: 85 40     -         sta TEMPY
1297: c6 40     -         dec TEMPY						//y-1
1299: 18        -         clc
129a: 79 2c 16  -         adc rooms+3,y
129d: 85 53     -         sta TEMPY2						//y+h
129f: b9 2b 16  -         lda rooms+2,y
12a2: 85 02     -         sta ZP0	
12a4: b9 29 16  -         lda rooms,y
12a7: 85 52     -         sta BV0							//x + i
12a9: 84 47     -         sty VAR_A						//save offset of room index
12ab: a2 00     -         ldx #00
12ad: ad 89 16  - width_loop:lda	exit_candidates_length
12b0: 0a        -         asl 							//datasize of candidates = 2
12b1: a8        -         tay								//exit_candidates offset in y
12b2: a5 52     -         lda	BV0							//x+i
12b4: 99 49 16  -         sta exit_candidates,y	
12b7: a9 00     -         lda #0
12b9: 99 69 16  -         sta exit_candidate_dirs,y
12bc: c8        -         iny
12bd: a5 40     -         lda TEMPY						//y-1
12bf: 99 49 16  -         sta exit_candidates,y
12c2: a9 ff     -         lda #-1							
12c4: 99 69 16  -         sta exit_candidate_dirs,y
12c7: c8        -         iny
12c8: ee 89 16  -         inc exit_candidates_length
12cb: a5 52     -         lda	BV0							//x+i
12cd: 99 49 16  -         sta exit_candidates,y	
12d0: a9 00     -         lda #0
12d2: 99 69 16  -         sta exit_candidate_dirs,y
12d5: c8        -         iny
12d6: a5 53     -         lda TEMPY2						//y+h
12d8: 99 49 16  -         sta	exit_candidates,y	
12db: a9 01     -         lda #1
12dd: 99 69 16  -         sta exit_candidate_dirs,y
12e0: ee 89 16  -         inc exit_candidates_length		
12e3: e6 52     -         inc BV0							//i++
12e5: e8        -         inx
12e6: e4 02     -         cpx ZP0
12e8: d0 c3     -         bne width_loop
12ea: a4 47     -         ldy VAR_A						//restore offset of room index
12ec: b9 29 16  -         lda rooms,y						//x
12ef: 85 3f     -         sta TEMPX
12f1: c6 3f     -         dec TEMPX						//x-1
12f3: 18        -         clc
12f4: 79 2b 16  -         adc rooms+2,y
12f7: 85 4d     -         sta TEMPX2						//x+w
12f9: b9 2c 16  -         lda rooms+3,y					//h
12fc: 85 02     -         sta ZP0
12fe: b9 2a 16  -         lda rooms+1,y
1301: 85 52     -         sta BV0							//y + i
1303: a2 00     -         ldx #00
1305: ad 89 16  - height_loop:lda	exit_candidates_length
1308: 0a        -         asl 							//datasize of candidates = 2
1309: a8        -         tay								//exit_candidates offset in y
130a: a5 3f     -         lda TEMPX						//x-1
130c: 99 49 16  -         sta exit_candidates,y
130f: a9 ff     -         lda #-1
1311: 99 69 16  -         sta exit_candidate_dirs,y
1314: c8        -         iny
1315: a5 52     -         lda BV0							//y+i
1317: 99 49 16  -         sta exit_candidates,y
131a: a9 00     -         lda #0
131c: 99 69 16  -         sta exit_candidate_dirs,y
131f: c8        -         iny
1320: ee 89 16  -         inc exit_candidates_length
1323: a5 4d     -         lda TEMPX2						//x+w
1325: 99 49 16  -         sta exit_candidates,y
1328: a9 01     -         lda #01
132a: 99 69 16  -         sta exit_candidate_dirs,y
132d: c8        -         iny
132e: a5 52     -         lda BV0							//y+i
1330: 99 49 16  -         sta exit_candidates,y
1333: a9 00     -         lda #0
1335: 99 69 16  -         sta exit_candidate_dirs,y
1338: c8        -         iny
1339: ee 89 16  -         inc exit_candidates_length
133c: e6 52     -         inc BV0							//i++
133e: e8        -         inx
133f: e4 02     -         cpx ZP0
1341: d0 c2     -         bne height_loop				
1343: 60        - out:    rts
1344: a9 00     - SET_START:lda #0							//room index in A
1346: 20 8a 12  -         jsr GET_EXIT_CANDIDATES
1349: ad 89 16  -         lda exit_candidates_length
134c: 85 02     -         sta ZP0
134e: c6 02     -         dec ZP0
1350: a5 02     -         lda X	
1352: 85 fd     -         sta ZP3
1354: a9 00     -         lda #0
1356: 85 fe     -         sta ZP4
1358: 20 96 09  -         jsr rnd_X
135b: a5 14     -         lda WINT
135d: 0a        -         asl 
135e: a8        -         tay
135f: b9 49 16  -         lda exit_candidates,y
1362: 8d 02 16  -         sta maze_start
1365: c8        -         iny
1366: b9 49 16  -         lda exit_candidates,y
1369: 8d 03 16  -         sta maze_start+1
136c: 60        - out:    rts
136d: a2 01     - CONNECT_ROOMS:ldx #01												//start with index 1, 0 should be already connected
136f: 86 0a     - each:   stx GLOBAL_X											//save x
1371: 8a        -         txa													//GET_EXIT_CANDIDATES expects room index in A
1372: 20 8a 12  -         jsr GET_EXIT_CANDIDATES								//trashes TEMPX
1375: ac 89 16  - get_one:ldy exit_candidates_length
1378: 88        -         dey
1379: 84 02     -         sty ZP0
137b: a5 02     -         lda X	
137d: 85 fd     -         sta ZP3
137f: a9 00     -         lda #0
1381: 85 fe     -         sta ZP4
1383: 20 96 09  -         jsr rnd_X
1386: a5 14     -         lda WINT											//random index
1388: 0a        -         asl 
1389: a8        -         tay													//offset in y
138a: b9 49 16  -         lda exit_candidates,y
138d: 8d 04 16  -         sta grid_pointer									//bridge
1390: b9 69 16  -         lda exit_candidate_dirs,y
1393: 8d 06 16  -         sta direction_pointer								//dir to test
1396: c8        -         iny
1397: b9 49 16  -         lda exit_candidates,y
139a: 8d 05 16  -         sta grid_pointer+1
139d: b9 69 16  -         lda exit_candidate_dirs,y
13a0: 8d 07 16  -         sta direction_pointer+1							
13a3: ad 04 16  -         lda grid_pointer
13a6: 18        -         clc
13a7: 6d 06 16  -         adc direction_pointer
13aa: 8d 08 16  -         sta test_pointer
13ad: ad 05 16  -         lda grid_pointer+1
13b0: 18        -         clc
13b1: 6d 07 16  -         adc direction_pointer+1
13b4: 8d 09 16  -         sta test_pointer+1
13b7: ad 00 16  -         lda X
13ba: 85 fb     -         sta Y
13bc: ad 01 16  -         lda X + 1
13bf: 85 fc     -         sta Y + 1
13c1: a9 00     -         lda #0
13c3: 85 fe     -         sta ZP4				
13c5: ad 09 16  -         lda grid+1		
13c8: 85 fd     -         sta ZP3
13ca: a0 03     -         ldy #03
13cc: 06 fd     - mul8:   asl X
13ce: 26 fe     -         rol X+1	
13d0: 88        -         dey
13d1: d0 f9     -         bne mul8
13d3: 18        -         clc
13d4: a5 fb     -         lda X
13d6: 65 fd     -         adc Y
13d8: 85 fb     -         sta X
13da: 90 02     -         bcc skip
13dc: e6 fc     -         inc X+1
13de: 18        - skip:   clc
13df: a5 fc     -         lda X+1
13e1: 65 fe     -         adc Y+1
13e3: 85 fc     -         sta X+1	
13e5: a0 02     -         ldy #02	
13e7: 06 fd     - mul32:  asl X
13e9: 26 fe     -         rol X+1	
13eb: 88        -         dey
13ec: d0 f9     -         bne mul32
13ee: 18        -         clc
13ef: a5 fb     -         lda X
13f1: 65 fd     -         adc Y
13f3: 85 fb     -         sta X
13f5: 90 02     -         bcc skip
13f7: e6 fc     -         inc X+1
13f9: 18        - skip:   clc
13fa: a5 fc     -         lda X+1
13fc: 65 fe     -         adc Y+1
13fe: 85 fc     -         sta X+1	
1400: 18        -         clc
1401: a5 fb     -         lda X
1403: 6d 08 16  -         adc y	
1406: 85 fb     -         sta X
1408: 90 02     -         bcc out+2
140a: e6 fc     - out:    inc X+1
140c: a0 00     -         ldy #0
140e: b1 fb     -         lda (ZP1),y
1410: c9 2e     -         cmp #DOT											//is it dot
1412: f0 32     -         beq check_connections								//yes, check connections
1414: a5 14     -         lda WINT											//random index was still in WINT
1416: 85 47     -         sta VAR_A											//store index in VAR_A
1418: ad 89 16  -         lda X
141b: 85 48     -         sta Y
141d: a9 49     -         lda #<addr
141f: 85 43     -         sta X
1421: a9 16     -         lda #>addr
1423: 85 44     -         sta X+1
1425: a9 02     -         lda #data_size
1427: 85 49     -         sta VAR_C
1429: 20 c9 08  -         jsr SPLICE
142c: ad 89 16  -         lda X
142f: 85 48     -         sta Y
1431: a9 69     -         lda #<addr
1433: 85 43     -         sta X
1435: a9 16     -         lda #>addr
1437: 85 44     -         sta X+1
1439: a9 02     -         lda #data_size
143b: 85 49     -         sta VAR_C
143d: 20 c9 08  -         jsr SPLICE
1440: ce 89 16  -         dec exit_candidates_length							//exit_candidates_length--
1443: 4c 75 13  -         jmp get_one											//try another
1446: ad 04 16  - check_connections:lda bridge
1449: 85 50     -         sta BV7
144b: ad 05 16  -         lda bridge+1
144e: 85 51     -         sta BV8
1450: a9 00     -         lda #0
1452: 85 4a     -         sta VAR_D
1454: 20 c6 14  -         jsr CHECK_CONNECTION
1457: a5 4a     -         lda VAR_D
1459: c9 02     -         cmp #02												//exactly two directions required for bridge
145b: f0 03     -         beq yes												//yes, paint
145d: 4c 75 13  -         jmp get_one											//not ok, get another
1460: ad 00 16  - yes:    lda X
1463: 85 fb     -         sta Y
1465: ad 01 16  -         lda X + 1
1468: 85 fc     -         sta Y + 1
146a: a9 00     -         lda #0
146c: 85 fe     -         sta ZP4				
146e: ad 05 16  -         lda grid+1		
1471: 85 fd     -         sta ZP3
1473: a0 03     -         ldy #03
1475: 06 fd     - mul8:   asl X
1477: 26 fe     -         rol X+1	
1479: 88        -         dey
147a: d0 f9     -         bne mul8
147c: 18        -         clc
147d: a5 fb     -         lda X
147f: 65 fd     -         adc Y
1481: 85 fb     -         sta X
1483: 90 02     -         bcc skip
1485: e6 fc     -         inc X+1
1487: 18        - skip:   clc
1488: a5 fc     -         lda X+1
148a: 65 fe     -         adc Y+1
148c: 85 fc     -         sta X+1	
148e: a0 02     -         ldy #02	
1490: 06 fd     - mul32:  asl X
1492: 26 fe     -         rol X+1	
1494: 88        -         dey
1495: d0 f9     -         bne mul32
1497: 18        -         clc
1498: a5 fb     -         lda X
149a: 65 fd     -         adc Y
149c: 85 fb     -         sta X
149e: 90 02     -         bcc skip
14a0: e6 fc     -         inc X+1
14a2: 18        - skip:   clc
14a3: a5 fc     -         lda X+1
14a5: 65 fe     -         adc Y+1
14a7: 85 fc     -         sta X+1	
14a9: 18        -         clc
14aa: a5 fb     -         lda X
14ac: 6d 04 16  -         adc y	
14af: 85 fb     -         sta X
14b1: 90 02     -         bcc out+2
14b3: e6 fc     - out:    inc X+1
14b5: a9 2e     -         lda #DOT
14b7: a0 00     -         ldy #0
14b9: 91 fb     -         sta (ZP1),y
14bb: a6 0a     -         ldx GLOBAL_X										//restore x
14bd: e8        -         inx													//next room
14be: e0 04     -         cpx #ROOM_NUMBER
14c0: f0 03     -         beq out
14c2: 4c 6f 13  -         jmp each
14c5: 60        - out:    rts
14c6: a2 03     - CHECK_CONNECTION:ldx #03						//iterate over directions
14c8: 8a        - each:   txa
14c9: 0a        -         asl
14ca: a8        -         tay							//offset in y
14cb: a5 50     -         lda BV7
14cd: 18        -         clc
14ce: 79 c6 09  -         adc BASIC_DIRS,y
14d1: 85 4e     -         sta BV9						//test.x
14d3: c8        -         iny
14d4: a5 51     -         lda BV8
14d6: 18        -         clc
14d7: 79 c6 09  -         adc BASIC_DIRS,y
14da: 85 4f     -         sta BV10					//test.y
14dc: ad 00 16  -         lda X
14df: 85 fb     -         sta Y
14e1: ad 01 16  -         lda X + 1
14e4: 85 fc     -         sta Y + 1
14e6: a9 00     -         lda #0
14e8: 85 fe     -         sta ZP4				
14ea: a5 4f     -         lda grid+1		
14ec: 85 fd     -         sta ZP3
14ee: a0 03     -         ldy #03
14f0: 06 fd     - mul8:   asl X
14f2: 26 fe     -         rol X+1	
14f4: 88        -         dey
14f5: d0 f9     -         bne mul8
14f7: 18        -         clc
14f8: a5 fb     -         lda X
14fa: 65 fd     -         adc Y
14fc: 85 fb     -         sta X
14fe: 90 02     -         bcc skip
1500: e6 fc     -         inc X+1
1502: 18        - skip:   clc
1503: a5 fc     -         lda X+1
1505: 65 fe     -         adc Y+1
1507: 85 fc     -         sta X+1	
1509: a0 02     -         ldy #02	
150b: 06 fd     - mul32:  asl X
150d: 26 fe     -         rol X+1	
150f: 88        -         dey
1510: d0 f9     -         bne mul32
1512: 18        -         clc
1513: a5 fb     -         lda X
1515: 65 fd     -         adc Y
1517: 85 fb     -         sta X
1519: 90 02     -         bcc skip
151b: e6 fc     -         inc X+1
151d: 18        - skip:   clc
151e: a5 fc     -         lda X+1
1520: 65 fe     -         adc Y+1
1522: 85 fc     -         sta X+1	
1524: 18        -         clc
1525: a5 fb     -         lda X
1527: 65 4e     -         adc y	
1529: 85 fb     -         sta X
152b: 90 02     -         bcc out+2
152d: e6 fc     - out:    inc X+1
152f: a0 00     -         ldy #0
1531: b1 fb     -         lda (ZP1),y
1533: c9 2e     -         cmp #DOT
1535: d0 02     -         bne skip
1537: e6 4a     -         inc VAR_D
1539: ca        - skip:   dex
153a: 10 8c     -         bpl each
153c: 60        - out:    rts
153d: 20 37 0f  - MAZE:   jsr STORE_DEAD_END
1540: 20 12 0a  - outer,P_LOOP:jsr MAZE_DOT
1543: 20 c5 0a  -         jsr POINTERS_FROM_START
1546: 20 fd 0a  -         jsr FILTER_IF_OUT
1549: 20 60 0b  -         jsr FILTER_IF_DOT
154c: a9 2e     -         lda #test
154e: 85 52     -         sta BV0
1550: 20 82 0c  -         jsr FILTER_IF_NEXT_PRIMARY
1553: 20 c8 0d  -         jsr FILTER_SIDE_PROXIMIY
1556: ad 1a 16  -         lda candidates_length						//check how many we have
1559: c9 00     -         cmp #00										//if zero break;
155b: d0 06     -         bne more									//more than 0
155d: 20 37 0f  -         jsr STORE_DEAD_END							//store dead end
1560: 4c cd 15  -         jmp S_LOOP
1563: c9 02     - more:   cmp #02										//if it is two or more
1565: b0 05     -         bcs then									//go to else/then
1567: a9 00     -         lda #0										//otherwise, index->0 in A									
1569: 4c 93 15  -         jmp skip_else
156c: ad 24 16  - then:   lda bias_counter
156f: c9 00     -         cmp #00
1571: f0 07     -         beq select_random							//use random, not bias
1573: 20 17 0f  -         jsr CHECK_BIAS								//index in a, or -1 if not found
1576: c9 ff     -         cmp #-1
1578: d0 19     -         bne skip_else								//not -1, select this direction
157a: a9 00     - select_random:lda #0										//reset bias counter when selection is random	
157c: 8d 24 16  -         sta bias_counter
157f: ad 1a 16  -         lda candidates_length						//random index (, candidates length-1)
1582: aa        -         tax
1583: ca        -         dex
1584: 86 02     -         stx ZP0
1586: a5 02     -         lda X	
1588: 85 fd     -         sta ZP3
158a: a9 00     -         lda #0
158c: 85 fe     -         sta ZP4
158e: 20 96 09  -         jsr rnd_X
1591: a5 14     -         lda WINT
1593: 85 02     - skip_else:sta ZP0										//store index in ZP0	
1595: 0a        -         asl 										//datasize=2	
1596: a8        -         tay											//offset in y
1597: b9 0a 16  -         lda candidates,y
159a: 8d 02 16  -         sta maze_start
159d: b9 12 16  -         lda candidates_vectors,y
15a0: 8d 25 16  -         sta bias_direction
15a3: c8        -         iny
15a4: b9 0a 16  -         lda candidates,y
15a7: 8d 03 16  -         sta maze_start+1
15aa: b9 12 16  -         lda candidates_vectors,y
15ad: 8d 26 16  -         sta bias_direction+1
15b0: ee 24 16  -         inc bias_counter
15b3: ad 24 16  -         lda bias_counter
15b6: cd 23 16  -         cmp bias
15b9: d0 05     -         bne out+3
15bb: a9 00     -         lda #00
15bd: 8d 24 16  - out:    sta bias_counter
15c0: ad 1a 16  -         lda candidates_length
15c3: c9 02     -         cmp #02										//if there are 2 or more, selected has not been discarded yet
15c5: 90 03     -         bcc repeat_P								//no, repeat loop
15c7: 20 11 0c  -         jsr PUSH_REST_ON_STACK													
15ca: 4c 40 15  - repeat_P:jmp P_LOOP
15cd: a5 71     - S_LOOP: lda STKPTR1
15cf: c9 00     -         cmp #<STACK
15d1: d0 09     -         bne cont
15d3: a5 72     -         lda STKPTR2
15d5: c9 c0     -         cmp #>STACK
15d7: d0 03     -         bne cont
15d9: 4c ff 15  -         jmp quit									//stack pointer == STACK, stack is empty
15dc: 20 e1 0e  - cont:   jsr CANDIDATE_FROM_STACK					//take on grid an its direction from stack
15df: a9 2e     -         lda #test
15e1: 85 52     -         sta BV0
15e3: 20 82 0c  -         jsr FILTER_IF_NEXT_PRIMARY
15e6: 20 c8 0d  -         jsr FILTER_SIDE_PROXIMIY					//in terms of proximity
15e9: ad 1a 16  -         lda candidates_length						//check if it is still ok
15ec: c9 00     -         cmp #00										//if zero break; 
15ee: f0 dd     -         beq S_LOOP									//no, find another
15f0: ad 0a 16  -         lda candidates								//set it to maze_start
15f3: 8d 02 16  -         sta maze_start
15f6: ad 0b 16  -         lda candidates+1
15f9: 8d 03 16  -         sta maze_start+1
15fc: 4c 40 15  -         jmp P_LOOP									//make next branch
15ff: 60        - quit:   rts

[MAZE Memory]
1600: 04 00     - MAZE_memory,maze_memory_alloc:.word $0004 					//screen by default
1602: 00 00     - maze_start:.word 0
1604: 00 00     - grid_pointer:.word 0
1606: 00 00     - direction_pointer:.word 0
1608: 00 00     - test_pointer:.word 0
160a: 00 00     - candidates:.fill 2,0
160c: 00 00     -         .fill 2,0
160e: 00 00     -         .fill 2,0
1610: 00 00     -         .fill 2,0
1612: 00 00     - candidates_vectors:.fill 2,0
1614: 00 00     -         .fill 2,0
1616: 00 00     -         .fill 2,0
1618: 00 00     -         .fill 2,0
161a: 00        - candidates_length:.byte 0
161b: 00 00     - proximity_vectors:.fill 2,0
161d: 00 00     -         .fill 2,0
161f: 00 00     -         .fill 2,0
1621: 00 00     -         .fill 2,0
1623: 02        - bias:   .byte 2
1624: 00        - bias_counter:.byte 0
1625: 00 00     - bias_direction:.word 0
1627: 00        - DE_counter:.byte 0
1628: 00        - REM_DE_counter:.byte 0
1629: 00 00 00 00                                      - rooms:  .fill 4,0
162d: 00 00 00 00                                      -         .fill 4,0
1631: 00 00 00 00                                      -         .fill 4,0
1635: 00 00 00 00                                      -         .fill 4,0
1639: 03 0e 03 06                                      - room_def:.byte 3, 14, 3, 6
163d: 17 21 03 06                                      -         .byte 23, 33, 3, 6
1641: 03 0e 0e 11                                      -         .byte 3, 14, 14, 17
1645: 17 21 0e 11                                      -         .byte 23, 33, 14, 17
1649: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - exit_candidates:.fill MAX_W * 4 * 2, 0
1659: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
1669: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - exit_candidate_dirs:.fill MAX_W * 4 * 2, 0
1679: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
1689: 00        - exit_candidates_length:.byte 0

[Subroutines]
168a: ad cd 16  - subs,irqcode:lda modeflag
168d: f0 03     -         beq mode1
168f: 4c a7 16  -         jmp mode2
1692: a9 01     - mode1:  lda #$01
1694: 8d cd 16  -         sta modeflag
1697: a9 00     -         lda #BLACK
1699: 8d 20 d0  -         sta BORDER
169c: a9 32     -         lda #startRaster
169e: 8d 12 d0  -         sta RASTER_COUNTER
16a1: 0e 19 d0  -         asl INTERRUPT_REQUEST_REGISTER
16a4: 4c 31 ea  -         jmp IRQOUT
16a7: a9 00     - mode2:  lda #$00
16a9: 8d cd 16  -         sta modeflag
16ac: a9 0f     -         lda #LIGHTGREY
16ae: 8d 20 d0  -         sta BORDER
16b1: a9 fa     -         lda #endRaster
16b3: 8d 12 d0  -         sta RASTER_COUNTER
16b6: 0e 19 d0  -         asl INTERRUPT_REQUEST_REGISTER
16b9: 68        -         pla
16ba: a8        -         tay
16bb: 68        -         pla
16bc: aa        -         tax
16bd: 68        -         pla
16be: 40        -         rti
16bf: a2 00     - set_bricks:ldx #00
16c1: bd d0 16  - copy:   lda brick_data,x
16c4: 9d 00 30  -         sta char_offset,x
16c7: e8        -         inx
16c8: e0 08     -         cpx #08
16ca: d0 f5     -         bne copy
16cc: 60        -         rts

[Data]
16cd: 00        - text,data,modeflag:.byte 0
16ce: 00        - startX: .byte 0
16cf: 00        - startY: .byte 0
16d0: dd c1 38 bb bb 83 1c dd                          - brick_data:.byte $dd,$c1,$38,$bb,$bb,$83,$1c,$dd
