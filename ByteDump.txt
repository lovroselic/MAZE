******************************* Segment: Default *******************************
[Header]
0801: 0c 08     -         .word bend
0803: 0d 00     -         .byte $0d, $00				//;line number
0805: 9e        -         .byte $9E					//;SYS
0806: 20        -         .byte $20					//;space
0807: 32 30 36 34                                      -         .byte $32,$30,$36,$34		//;start 2064
080b: 00        -         .byte $00					//;end of line
080c: 00 00     - bend:   .byte $00, $00				//;end of basic program

[Main]
0810: 20 0a 09  - setup:  jsr COPY_CHAR_ROM_TO_RAM
0813: 20 c5 13  -         jsr set_bricks
0816: a9 0f     -         lda	#color
0818: a0 00     -         ldy #0
081a: 99 00 d8  - fill:   sta COLOR_RAM,y
081d: 99 00 d9  -         sta COLOR_RAM + 256,y
0820: 99 00 da  -         sta COLOR_RAM + 512,y
0823: 99 00 db  -         sta COLOR_RAM + 768,y
0826: c8        -         iny
0827: d0 f1     -         bne fill
0829: a9 00     -         lda #BLACK
082b: 8d 21 d0  -         sta BACKGROUND
082e: 78        - interrupt:sei							//set interrupt
082f: a9 7f     -         lda #$7f
0831: 8d 0d dc  -         sta CIA_ICR
0834: 8d 0d dd  -         sta CIA2_ICR
0837: ad 0d dc  -         lda CIA_ICR
083a: ad 0d dd  -         lda CIA2_ICR
083d: ad 1a d0  -         lda INTERRUPT_MASK_REGISTER	
0840: 09 01     -         ora #$01
0842: 8d 1a d0  -         sta INTERRUPT_MASK_REGISTER
0845: ad 11 d0  -         lda CONTROL_REGISTER1
0848: 29 7f     -         and #$7f
084a: 8d 11 d0  -         sta CONTROL_REGISTER1
084d: a9 32     -         lda #startRaster
084f: 8d 12 d0  -         sta RASTER_COUNTER
0852: a9 90     -         lda #<address
0854: 8d 14 03  -         sta IRQVEC
0857: a9 13     -         lda #>address
0859: 8d 15 03  -         sta	IRQVEC+1
085c: 58        -         cli
085d: d8        - begin:  cld
085e: a9 02     - init:   lda #B
0860: 8d 29 13  -         sta bias
0863: a9 00     -         lda #00
0865: 8d 2a 13  -         sta bias_counter
0868: a9 00     -         lda #<addr
086a: 8d 06 13  -         sta X
086d: a9 04     -         lda #>addr
086f: 8d 07 13  -         sta X+1
0872: a9 00     -         lda #<addr
0874: 85 71     -         sta X
0876: a9 c0     -         lda #>addr
0878: 85 72     -         sta X+1
087a: a9 00     -         lda #<addr
087c: 85 5c     -         sta X
087e: a9 c4     -         lda #>addr
0880: 85 5d     -         sta X+1
0882: a9 00     -         lda #<addr
0884: 85 5e     -         sta X
0886: a9 c5     -         lda #>addr
0888: 85 5f     -         sta X+1
088a: a9 00     -         lda #00
088c: 8d 2d 13  -         sta DE_counter
088f: 8d 2e 13  -         sta REM_DE_counter
0892: 20 bb 09  -         jsr MAZE_FILL
0895: 20 32 0a  -         jsr ROOMS
0898: 20 4a 10  -         jsr SET_START
089b: 20 43 12  -         jsr MAZE
089e: 20 73 10  -         jsr CONNECT_ROOMS
08a1: 20 bb 0e  -         jsr CONNECT_DEAD_ENDS
08a4: a5 c5     - end,key:lda LSTX		//get character in A
08a6: c9 40     -         cmp #64			//no key
08a8: f0 fa     -         beq key
08aa: 4c 5e 08  -         jmp init
08ad: 60        -         rts

[Imports]
08ae: c6 48     - imports,SPLICE:dec VAR_B								//array length - 1, last index
08b0: a4 47     -         ldy VAR_A								//index
08b2: c4 48     - loop:   cpy VAR_B								//stop if index
08b4: 10 35     -         bpl out 								//equal or greater than last index
08b6: a2 00     -         ldx #0									//number of properties (data_size), start from 0
08b8: c8        - each:   iny		
08b9: 84 40     -         sty TEMPY
08bb: a5 49     -         lda	VAR_C 								//data size
08bd: 20 ec 08  -         jsr MUL_Y_A
08c0: 84 02     -         sty ZP0
08c2: 8a        -         txa
08c3: 18        -         clc
08c4: 65 02     -         adc ZP0
08c6: a8        -         tay
08c7: b1 43     -         lda (BV1),y
08c9: 85 41     -         sta TEMPA1
08cb: a4 40     -         ldy TEMPY
08cd: 88        -         dey
08ce: 84 40     -         sty TEMPY
08d0: a5 49     -         lda	VAR_C 								//data size
08d2: 20 ec 08  -         jsr MUL_Y_A
08d5: 84 02     -         sty ZP0
08d7: 8a        -         txa
08d8: 18        -         clc
08d9: 65 02     -         adc ZP0
08db: a8        -         tay
08dc: a5 41     -         lda TEMPA1
08de: 91 43     -         sta (BV1),y
08e0: a4 40     -         ldy TEMPY
08e2: e8        -         inx
08e3: e4 49     -         cpx VAR_C								//all props? less than VAR_C ?
08e5: 90 d1     -         bcc each
08e7: c8        -         iny
08e8: 4c b2 08  -         jmp loop
08eb: 60        - out:    rts
08ec: c0 00     - MUL_Y_A,multiply:cpy #00
08ee: f0 18     -         beq end
08f0: 88        -         dey
08f1: 8c fe 08  -         sty mod+1
08f4: 4a        -         lsr
08f5: 85 02     -         sta ZP0
08f7: a9 00     -         lda #00
08f9: a0 08     -         ldy #$08
08fb: 90 02     - loop:   bcc skip
08fd: 69 00     - mod:    adc #0
08ff: 6a        - skip:   ror
0900: 66 02     -         ror ZP0
0902: 88        -         dey
0903: d0 f6     -         bne loop
0905: a4 02     -         ldy ZP0
0907: 60        -         rts
0908: 98        - end:    tya
0909: 60        -         rts
090a: 78        - COPY_CHAR_ROM_TO_RAM:sei
090b: a5 01     -         lda $01			//make ROM visible
090d: 29 fb     -         and #$FB
090f: 85 01     -         sta $01 
0911: a9 00     -         lda #00
0913: 85 5f     -         sta $5f			//block start
0915: 85 5a     -         sta $5a			//block end
0917: 85 58     -         sta $58			//destination end
0919: a0 d0     -         ldy #$d0
091b: 84 60     -         sty $60			//block start
091d: a0 e0     -         ldy #$e0		
091f: 84 5b     -         sty $5b			//block end
0921: a0 40     - ram:    ldy #$40
0923: 84 59     -         sty $59			//destination end
0925: 20 bf a3  -         jsr MOVE_BYTES
0928: a5 01     -         lda $01			//hide rom
092a: 09 04     -         ora #$04
092c: 85 01     -         sta $01
092e: 58        -         cli
092f: ad 18 d0  -         lda VMCSB
0932: 29 f0     -         and #%11110000
0934: 09 0c     -         ora #%00001100	//$3000
0936: 8d 18 d0  -         sta VMCSB
0939: 60        -         rts

[SYSTEM_data]
093a: e6 fd     - SYS_data,rnd_XY:inc ZP3
093c: d0 02     -         bne skip1
093e: e6 fe     -         inc ZP4
0940: a5 fd     - skip1:  lda ZP3
0942: 38        -         sec
0943: e5 fb     -         sbc ZP1
0945: 85 fd     -         sta ZP3
0947: a5 fe     -         lda ZP4
0949: e5 fc     -         sbc ZP2
094b: 85 fe     -         sta ZP4			
094d: a4 fd     - toFloat:ldy ZP3
094f: a5 fe     -         lda ZP4
0951: 20 91 b3  -         jsr GIVAYF 					//A(h),Y(L) - FAC
0954: a2 a6     -         ldx #<flt
0956: a0 09     -         ldy #>flt
0958: 20 d4 bb  -         jsr MOVMF					//store FAC to flt		
095b: a9 00     -         lda #$00					//RND(0)
095d: 20 9a e0  -         jsr RND						//$E09A
0960: a9 a6     -         lda #<flt
0962: a0 09     -         ldy #>flt
0964: 20 28 ba  -         jsr FMULT					//Multiplies a number from RAM (A,y) and FAC	
0967: 20 cc bc  -         jsr FAINT					//to integer
096a: 20 bf b1  -         jsr AYINT					//fac to signed int HI $64 LO $65
096d: a5 65     -         lda $65						//FAC mantissa lo
096f: 18        -         clc
0970: 65 fb     -         adc ZP1						//add number to start	
0972: 85 14     -         sta WINT
0974: a5 64     -         lda $64						//FAC mantissa hi
0976: 65 fc     -         adc ZP2
0978: 85 15     -         sta WINT+1
097a: 60        - over:   rts			
097b: e6 fd     - rnd_X:  inc ZP3
097d: d0 02     -         bne toFloat
097f: e6 fe     -         inc ZP4	
0981: a4 fd     - toFloat:ldy ZP3
0983: a5 fe     -         lda ZP4
0985: 20 91 b3  -         jsr GIVAYF 					//A(h),Y(L) - FAC
0988: a2 a6     -         ldx #<flt
098a: a0 09     -         ldy #>flt
098c: 20 d4 bb  -         jsr MOVMF					//store FAC to flt		
098f: a9 00     -         lda #$00					//get actual RND(0)
0991: 20 9a e0  -         jsr RND						//$E09A
0994: a9 a6     -         lda #<flt
0996: a0 09     -         ldy #>flt
0998: 20 28 ba  -         jsr FMULT					//Multiplies a number from RAM (A,y) and FAC	
099b: 20 cc bc  -         jsr FAINT					//to integer
099e: 20 bf b1  -         jsr AYINT					//fac to signed int HI $64 LO $65
09a1: a5 65     -         lda $65						//FAC mantissa lo
09a3: 85 14     -         sta WINT					
09a5: 60        -         rts			

[Data RND]
09a6: 00 00 00 00 00                                   - dataRND,flt:.byte 0,0,0,0,0

[Grid_Constants]
09ab: 00 ff     - Grid_Constants,BASIC_DIRS,UP:.byte 	0, -1
09ad: 00 01     - DOWN:   .byte 	0, 1
09af: ff 00     - LEFT:   .byte	-1, 0
09b1: 01 00     - RIGHT:  .byte 	1,0
09b3: ff ff     - PROX_TEMPLATE:.byte 	-1, -1
09b5: 01 01     -         .byte 	1, 1
09b7: ff ff     -         .byte 	-1, -1
09b9: 01 01     -         .byte 	1, 1
09bb: ad 06 13  - MAZE_FILL:lda X
09be: 85 fb     -         sta Y
09c0: ad 07 13  -         lda X + 1
09c3: 85 fc     -         sta Y + 1
09c5: a9 00     -         lda	#WALL
09c7: a2 04     -         ldx #4
09c9: a0 00     - block:  ldy #0
09cb: 91 fb     - fill:   sta (ZP1),y
09cd: c8        -         iny
09ce: d0 fb     -         bne fill
09d0: e6 fc     -         inc ZP2
09d2: ca        -         dex
09d3: d0 f4     -         bne block
09d5: 60        -         rts
09d6: ad 06 13  - MAZE_DOT:lda X
09d9: 85 fb     -         sta Y
09db: ad 07 13  -         lda X + 1
09de: 85 fc     -         sta Y + 1
09e0: a9 00     -         lda #0
09e2: 85 fe     -         sta ZP4				
09e4: ad 09 13  -         lda grid+1		
09e7: 85 fd     -         sta ZP3
09e9: a0 03     -         ldy #03
09eb: 06 fd     - mul8:   asl X
09ed: 26 fe     -         rol X+1	
09ef: 88        -         dey
09f0: d0 f9     -         bne mul8
09f2: 18        -         clc
09f3: a5 fb     -         lda X
09f5: 65 fd     -         adc Y
09f7: 85 fb     -         sta X
09f9: 90 02     -         bcc skip
09fb: e6 fc     -         inc X+1
09fd: 18        - skip:   clc
09fe: a5 fc     -         lda X+1
0a00: 65 fe     -         adc Y+1
0a02: 85 fc     -         sta X+1	
0a04: a0 02     -         ldy #02	
0a06: 06 fd     - mul32:  asl X
0a08: 26 fe     -         rol X+1	
0a0a: 88        -         dey
0a0b: d0 f9     -         bne mul32
0a0d: 18        -         clc
0a0e: a5 fb     -         lda X
0a10: 65 fd     -         adc Y
0a12: 85 fb     -         sta X
0a14: 90 02     -         bcc skip
0a16: e6 fc     -         inc X+1
0a18: 18        - skip:   clc
0a19: a5 fc     -         lda X+1
0a1b: 65 fe     -         adc Y+1
0a1d: 85 fc     -         sta X+1	
0a1f: 18        -         clc
0a20: a5 fb     -         lda X
0a22: 6d 08 13  -         adc y	
0a25: 85 fb     -         sta X
0a27: 90 02     -         bcc out+2
0a29: e6 fc     - out:    inc X+1
0a2b: a9 20     -         lda #DOT
0a2d: a0 00     -         ldy #0
0a2f: 91 fb     -         sta (ZP1),y
0a31: 60        -         rts
0a32: 20 11 0f  - ROOMS:  jsr MAKE_ROOMS
0a35: 20 39 0a  -         jsr PAINT_ROOMS
0a38: 60        -         rts
0a39: a2 00     - PAINT_ROOMS:ldx #00
0a3b: 86 3f     - each:   stx TEMPX				//each room
0a3d: 8a        -         txa
0a3e: 0a        -         asl
0a3f: 0a        -         asl
0a40: a8        -         tay
0a41: b9 2f 13  -         lda rooms,y				//get top left x of room
0a44: 85 4e     -         sta BV9
0a46: c8        -         iny
0a47: b9 2f 13  -         lda rooms,y				//get top left y of room
0a4a: 85 4f     -         sta BV10
0a4c: c8        -         iny
0a4d: b9 2f 13  -         lda rooms,y 			//w
0a50: 85 02     -         sta ZP0
0a52: c8        -         iny
0a53: b9 2f 13  -         lda rooms,y 			//h
0a56: 85 52     -         sta BV0
0a58: a2 00     -         ldx #0
0a5a: a0 00     - cont_w: ldy #0
0a5c: 86 41     - cont_h: stx TEMPA1
0a5e: a5 4e     -         lda BV9
0a60: 18        -         clc
0a61: 65 41     -         adc TEMPA1
0a63: 8d 08 13  -         sta maze_start
0a66: 84 41     -         sty TEMPA1
0a68: a5 4f     -         lda BV10
0a6a: 18        -         clc
0a6b: 65 41     -         adc TEMPA1
0a6d: 8d 09 13  -         sta maze_start+1
0a70: 84 40     -         sty TEMPY
0a72: 20 d6 09  -         jsr MAZE_DOT
0a75: a4 40     -         ldy TEMPY
0a77: c8        -         iny
0a78: c4 52     -         cpy BV0
0a7a: d0 e0     -         bne cont_h
0a7c: e8        -         inx
0a7d: e4 02     -         cpx ZP0
0a7f: d0 d9     -         bne cont_w
0a81: a6 3f     -         ldx TEMPX
0a83: e8        -         inx
0a84: e0 04     -         cpx #ROOM_NUMBER
0a86: d0 b3     -         bne each
0a88: 60        - out:    rts
0a89: a2 03     - POINTERS_FROM_START:ldx #03
0a8b: 8a        - add:    txa
0a8c: 0a        -         asl
0a8d: a8        -         tay		
0a8e: 18        -         clc
0a8f: ad 08 13  -         lda maze_start
0a92: 79 ab 09  -         adc BASIC_DIRS,y
0a95: 99 10 13  -         sta candidates,y
0a98: c8        -         iny
0a99: 18        -         clc
0a9a: ad 09 13  -         lda maze_start+1
0a9d: 79 ab 09  -         adc BASIC_DIRS,y
0aa0: 99 10 13  -         sta candidates,y
0aa3: ca        -         dex
0aa4: 10 e5     -         bpl add
0aa6: a2 03     -         ldx #03
0aa8: 8a        - copy:   txa
0aa9: 0a        -         asl
0aaa: a8        -         tay	
0aab: b9 ab 09  -         lda BASIC_DIRS,y
0aae: 99 18 13  -         sta candidates_vectors,y
0ab1: c8        -         iny
0ab2: b9 ab 09  -         lda BASIC_DIRS,y
0ab5: 99 18 13  -         sta candidates_vectors,y
0ab8: ca        -         dex
0ab9: 10 ed     -         bpl copy
0abb: a9 04     -         lda #04
0abd: 8d 20 13  -         sta candidates_length
0ac0: 60        -         rts
0ac1: ad 20 13  - FILTER_IF_OUT:lda candidates_length
0ac4: c9 01     -         cmp #1
0ac6: b0 01     -         bcs start
0ac8: 60        -         rts
0ac9: ae 20 13  - start:  ldx candidates_length				//number of grids yet to check
0acc: ca        -         dex
0acd: 8a        - each:   txa
0ace: 0a        -         asl
0acf: a8        -         tay
0ad0: 18        -         clc
0ad1: b9 10 13  -         lda candidates,y
0ad4: c9 27     -         cmp #MAX_X+1
0ad6: b0 18     -         bcs shift
0ad8: c9 01     -         cmp #MIN_X
0ada: 90 14     -         bcc shift
0adc: c8        -         iny
0add: 18        -         clc
0ade: b9 10 13  -         lda candidates,y
0ae1: c9 18     -         cmp #MAX_Y+1
0ae3: b0 0b     -         bcs shift
0ae5: c9 01     -         cmp #MIN_Y
0ae7: 90 07     -         bcc shift
0ae9: ca        - cont:   dex
0aea: 30 03     -         bmi out
0aec: 4c cd 0a  -         jmp each
0aef: 60        - out:    rts
0af0: 86 3f     - shift:  stx TEMPX									//save x							
0af2: 86 47     -         stx VAR_A									//set index to VAR_A
0af4: ad 20 13  -         lda X
0af7: 85 48     -         sta Y
0af9: a9 10     -         lda #<addr
0afb: 85 43     -         sta X
0afd: a9 13     -         lda #>addr
0aff: 85 44     -         sta X+1
0b01: a9 02     -         lda #data_size
0b03: 85 49     -         sta VAR_C
0b05: 20 ae 08  -         jsr SPLICE
0b08: ad 20 13  -         lda X
0b0b: 85 48     -         sta Y
0b0d: a9 18     -         lda #<addr
0b0f: 85 43     -         sta X
0b11: a9 13     -         lda #>addr
0b13: 85 44     -         sta X+1
0b15: a9 02     -         lda #data_size
0b17: 85 49     -         sta VAR_C
0b19: 20 ae 08  -         jsr SPLICE
0b1c: ce 20 13  -         dec candidates_length						//dec array length
0b1f: a6 3f     -         ldx TEMPX									//restore x
0b21: 4c e9 0a  -         jmp cont									//return to loop
0b24: ad 20 13  - FILTER_IF_DOT:lda candidates_length
0b27: c9 01     -         cmp #1
0b29: b0 01     -         bcs start
0b2b: 60        -         rts
0b2c: ae 20 13  - start:  ldx candidates_length						//number of grids yet to check
0b2f: ca        -         dex
0b30: 8a        - each:   txa
0b31: 0a        -         asl
0b32: a8        -         tay
0b33: b9 10 13  -         lda candidates,y
0b36: 8d 0a 13  -         sta grid_pointer
0b39: c8        -         iny
0b3a: b9 10 13  -         lda candidates,y
0b3d: 8d 0b 13  -         sta grid_pointer+1
0b40: ad 06 13  -         lda X
0b43: 85 fb     -         sta Y
0b45: ad 07 13  -         lda X + 1
0b48: 85 fc     -         sta Y + 1
0b4a: a9 00     -         lda #0
0b4c: 85 fe     -         sta ZP4				
0b4e: ad 0b 13  -         lda grid+1		
0b51: 85 fd     -         sta ZP3
0b53: a0 03     -         ldy #03
0b55: 06 fd     - mul8:   asl X
0b57: 26 fe     -         rol X+1	
0b59: 88        -         dey
0b5a: d0 f9     -         bne mul8
0b5c: 18        -         clc
0b5d: a5 fb     -         lda X
0b5f: 65 fd     -         adc Y
0b61: 85 fb     -         sta X
0b63: 90 02     -         bcc skip
0b65: e6 fc     -         inc X+1
0b67: 18        - skip:   clc
0b68: a5 fc     -         lda X+1
0b6a: 65 fe     -         adc Y+1
0b6c: 85 fc     -         sta X+1	
0b6e: a0 02     -         ldy #02	
0b70: 06 fd     - mul32:  asl X
0b72: 26 fe     -         rol X+1	
0b74: 88        -         dey
0b75: d0 f9     -         bne mul32
0b77: 18        -         clc
0b78: a5 fb     -         lda X
0b7a: 65 fd     -         adc Y
0b7c: 85 fb     -         sta X
0b7e: 90 02     -         bcc skip
0b80: e6 fc     -         inc X+1
0b82: 18        - skip:   clc
0b83: a5 fc     -         lda X+1
0b85: 65 fe     -         adc Y+1
0b87: 85 fc     -         sta X+1	
0b89: 18        -         clc
0b8a: a5 fb     -         lda X
0b8c: 6d 0a 13  -         adc y	
0b8f: 85 fb     -         sta X
0b91: 90 02     -         bcc out+2
0b93: e6 fc     - out:    inc X+1
0b95: a0 00     -         ldy #0
0b97: b1 fb     -         lda (ZP1),y
0b99: c9 20     -         cmp #DOT
0b9b: f0 04     -         beq shift
0b9d: ca        - cont:   dex
0b9e: 10 90     -         bpl each
0ba0: 60        - out:    rts
0ba1: 86 3f     - shift:  stx TEMPX									//save x
0ba3: 86 47     -         stx VAR_A									//set index to VAR_A
0ba5: ad 20 13  -         lda X
0ba8: 85 48     -         sta Y
0baa: a9 10     -         lda #<addr
0bac: 85 43     -         sta X
0bae: a9 13     -         lda #>addr
0bb0: 85 44     -         sta X+1
0bb2: a9 02     -         lda #data_size
0bb4: 85 49     -         sta VAR_C
0bb6: 20 ae 08  -         jsr SPLICE
0bb9: ad 20 13  -         lda X
0bbc: 85 48     -         sta Y
0bbe: a9 18     -         lda #<addr
0bc0: 85 43     -         sta X
0bc2: a9 13     -         lda #>addr
0bc4: 85 44     -         sta X+1
0bc6: a9 02     -         lda #data_size
0bc8: 85 49     -         sta VAR_C
0bca: 20 ae 08  -         jsr SPLICE
0bcd: ce 20 13  -         dec candidates_length						//dec array length
0bd0: a6 3f     -         ldx TEMPX									//restore x
0bd2: 4c 9d 0b  -         jmp cont									//return to loop
0bd5: a5 02     - PUSH_REST_ON_STACK:lda ZP0										//index was stored in ZP0
0bd7: 85 47     -         sta VAR_A									//set index to VAR_A
0bd9: ad 20 13  -         lda X
0bdc: 85 48     -         sta Y
0bde: a9 10     -         lda #<addr
0be0: 85 43     -         sta X
0be2: a9 13     -         lda #>addr
0be4: 85 44     -         sta X+1
0be6: a9 02     -         lda #data_size
0be8: 85 49     -         sta VAR_C
0bea: 20 ae 08  -         jsr SPLICE
0bed: ad 20 13  -         lda X
0bf0: 85 48     -         sta Y
0bf2: a9 18     -         lda #<addr
0bf4: 85 43     -         sta X
0bf6: a9 13     -         lda #>addr
0bf8: 85 44     -         sta X+1
0bfa: a9 02     -         lda #data_size
0bfc: 85 49     -         sta VAR_C
0bfe: 20 ae 08  -         jsr SPLICE
0c01: ce 20 13  -         dec candidates_length						//dec array length
0c04: a2 00     -         ldx #0
0c06: a0 00     - each:   ldy #0
0c08: 86 3f     -         stx TEMPX									//save x
0c0a: 8a        -         txa											//x = x *2	
0c0b: 0a        -         asl 
0c0c: aa        -         tax									
0c0d: bd 10 13  -         lda candidates,x							//x
0c10: 91 71     -         sta (STKPTR1),y
0c12: c8        -         iny
0c13: e8        -         inx
0c14: bd 10 13  -         lda candidates,x							//y
0c17: 91 71     -         sta (STKPTR1),y
0c19: 18        -         clc
0c1a: a5 71     -         lda X
0c1c: 69 02     -         adc #C
0c1e: 85 71     -         sta X
0c20: 90 02     -         bcc out+2
0c22: e6 72     - out:    inc X+1
0c24: 88        -         dey
0c25: ca        -         dex
0c26: bd 18 13  -         lda candidates_vectors,x					//x
0c29: 91 71     -         sta (STKPTR1),y
0c2b: c8        -         iny
0c2c: e8        -         inx
0c2d: bd 18 13  -         lda candidates_vectors,x					//y
0c30: 91 71     -         sta (STKPTR1),y
0c32: 18        -         clc
0c33: a5 71     -         lda X
0c35: 69 02     -         adc #C
0c37: 85 71     -         sta X
0c39: 90 02     -         bcc out+2
0c3b: e6 72     - out:    inc X+1
0c3d: a6 3f     -         ldx TEMPX									//restore x
0c3f: e8        -         inx
0c40: ec 20 13  -         cpx candidates_length
0c43: d0 c1     -         bne each
0c45: 60        - out:    rts		
0c46: ad 20 13  - FILTER_IF_NEXT_PRIMARY:lda candidates_length
0c49: c9 01     -         cmp #1
0c4b: b0 01     -         bcs start										//cont if 1 or more
0c4d: 60        -         rts												//else exit, if no candidates
0c4e: ae 20 13  - start:  ldx candidates_length							//number of grids yet to check
0c51: ca        -         dex												//to zero offset
0c52: 8a        - each:   txa
0c53: 0a        -         asl												//double, because datasize is 2
0c54: a8        -         tay												//offset in y (zero based x * datasize)
0c55: b9 10 13  -         lda candidates,y
0c58: 8d 0a 13  -         sta grid_pointer
0c5b: b9 18 13  -         lda candidates_vectors,y
0c5e: 8d 0c 13  -         sta direction_pointer
0c61: c8        -         iny
0c62: b9 10 13  -         lda candidates,y
0c65: 8d 0b 13  -         sta grid_pointer+1
0c68: b9 18 13  -         lda candidates_vectors,y
0c6b: 8d 0d 13  -         sta direction_pointer+1
0c6e: 18        -         clc
0c6f: ad 0a 13  -         lda grid_pointer
0c72: 6d 0c 13  -         adc direction_pointer
0c75: 8d 0e 13  -         sta test_pointer
0c78: 18        -         clc
0c79: ad 0b 13  -         lda grid_pointer+1
0c7c: 6d 0d 13  -         adc direction_pointer+1
0c7f: 8d 0f 13  -         sta test_pointer+1
0c82: ad 06 13  -         lda X
0c85: 85 fb     -         sta Y
0c87: ad 07 13  -         lda X + 1
0c8a: 85 fc     -         sta Y + 1
0c8c: a9 00     -         lda #0
0c8e: 85 fe     -         sta ZP4				
0c90: ad 0f 13  -         lda grid+1		
0c93: 85 fd     -         sta ZP3
0c95: a0 03     -         ldy #03
0c97: 06 fd     - mul8:   asl X
0c99: 26 fe     -         rol X+1	
0c9b: 88        -         dey
0c9c: d0 f9     -         bne mul8
0c9e: 18        -         clc
0c9f: a5 fb     -         lda X
0ca1: 65 fd     -         adc Y
0ca3: 85 fb     -         sta X
0ca5: 90 02     -         bcc skip
0ca7: e6 fc     -         inc X+1
0ca9: 18        - skip:   clc
0caa: a5 fc     -         lda X+1
0cac: 65 fe     -         adc Y+1
0cae: 85 fc     -         sta X+1	
0cb0: a0 02     -         ldy #02	
0cb2: 06 fd     - mul32:  asl X
0cb4: 26 fe     -         rol X+1	
0cb6: 88        -         dey
0cb7: d0 f9     -         bne mul32
0cb9: 18        -         clc
0cba: a5 fb     -         lda X
0cbc: 65 fd     -         adc Y
0cbe: 85 fb     -         sta X
0cc0: 90 02     -         bcc skip
0cc2: e6 fc     -         inc X+1
0cc4: 18        - skip:   clc
0cc5: a5 fc     -         lda X+1
0cc7: 65 fe     -         adc Y+1
0cc9: 85 fc     -         sta X+1	
0ccb: 18        -         clc
0ccc: a5 fb     -         lda X
0cce: 6d 0e 13  -         adc y	
0cd1: 85 fb     -         sta X
0cd3: 90 02     -         bcc out+2
0cd5: e6 fc     - out:    inc X+1
0cd7: a0 00     -         ldy #0
0cd9: b1 fb     -         lda (ZP1),y
0cdb: c5 52     -         cmp BV0										//BV0 holds the value to filter out
0cdd: f0 07     -         beq shift									//yes
0cdf: ca        - cont:   dex
0ce0: 30 03     -         bmi out										//less than zero, stop
0ce2: 4c 52 0c  -         jmp each									//loop back, branch too far
0ce5: 60        - out:    rts
0ce6: 86 3f     - shift:  stx TEMPX									//save x
0ce8: 86 47     -         stx VAR_A									//set index to VAR_A
0cea: ad 20 13  -         lda X
0ced: 85 48     -         sta Y
0cef: a9 10     -         lda #<addr
0cf1: 85 43     -         sta X
0cf3: a9 13     -         lda #>addr
0cf5: 85 44     -         sta X+1
0cf7: a9 02     -         lda #data_size
0cf9: 85 49     -         sta VAR_C
0cfb: 20 ae 08  -         jsr SPLICE
0cfe: ad 20 13  -         lda X
0d01: 85 48     -         sta Y
0d03: a9 18     -         lda #<addr
0d05: 85 43     -         sta X
0d07: a9 13     -         lda #>addr
0d09: 85 44     -         sta X+1
0d0b: a9 02     -         lda #data_size
0d0d: 85 49     -         sta VAR_C
0d0f: 20 ae 08  -         jsr SPLICE
0d12: ce 20 13  -         dec candidates_length						//dec array length
0d15: a6 3f     -         ldx TEMPX									//restore x
0d17: 4c df 0c  -         jmp cont									//return to loop
0d1a: ad 20 13  - FILTER_N_CONNECTIONS:lda candidates_length
0d1d: c9 01     -         cmp #1
0d1f: b0 01     -         bcs start										//cont if 1 or more
0d21: 60        -         rts												//else exit, if no candidates
0d22: ae 20 13  - start:  ldx candidates_length							//number of grids yet to check
0d25: ca        -         dex												//to zero offset
0d26: 8a        - each:   txa
0d27: 0a        -         asl												//double, because datasize is 2
0d28: a8        -         tay												//offset in y (zero based x * datasize)
0d29: ca        - cont:   dex
0d2a: 30 03     -         bmi out											//less than zero, stop
0d2c: 4c 26 0d  -         jmp each										//loop back, branch too far
0d2f: 60        - out:    rts
0d30: ad 20 13  - FILTER_SIDE_PROXIMIY:lda candidates_length
0d33: c9 01     -         cmp #1
0d35: b0 01     -         bcs start										//cont if 1 or more
0d37: 60        -         rts												//else exit, if no candidates
0d38: ae 20 13  - start:  ldx candidates_length							//number of grids yet to check
0d3b: ca        -         dex												//to zero offset
0d3c: 8a        - each:   txa
0d3d: 0a        -         asl												//double, because datasize is 2
0d3e: a8        -         tay												//offset in y (zero based x * datasize)
0d3f: b9 10 13  -         lda candidates, y
0d42: 8d 0a 13  -         sta grid_pointer
0d45: b9 18 13  -         lda candidates_vectors,y
0d48: 8d 0c 13  -         sta direction_pointer
0d4b: c8        -         iny
0d4c: b9 10 13  -         lda candidates, y
0d4f: 8d 0b 13  -         sta grid_pointer+1
0d52: b9 18 13  -         lda candidates_vectors,y
0d55: 8d 0d 13  -         sta direction_pointer+1
0d58: a9 b3     -         lda #<addr
0d5a: 85 50     -         sta X
0d5c: a9 09     -         lda #>addr
0d5e: 85 51     -         sta X+1
0d60: a9 21     -         lda #<addr
0d62: 85 4e     -         sta X
0d64: a9 13     -         lda #>addr
0d66: 85 4f     -         sta X+1
0d68: a0 08     -         ldy #length											
0d6a: 88        -         dey
0d6b: b1 50     - copy:   lda (BV7),y
0d6d: 91 4e     -         sta (BV9),y
0d6f: 88        -         dey
0d70: 10 f9     -         bpl copy
0d72: a0 01     -         ldy #01											//y?
0d74: b9 0c 13  -         lda direction_pointer,y
0d77: d0 01     -         bne ok											//if not zero, than this is right dimension
0d79: 88        -         dey												//not y, but x
0d7a: b9 0c 13  - ok:     lda direction_pointer,y							//index of dimension now in y register
0d7d: 99 21 13  -         sta proximity_vectors,y							//set sequence 1,1,0,0 on the right dimension, datasize=2
0d80: c8        -         iny
0d81: c8        -         iny
0d82: 99 21 13  -         sta proximity_vectors,y	
0d85: c8        -         iny
0d86: c8        -         iny
0d87: a9 00     -         lda #0
0d89: 99 21 13  -         sta proximity_vectors,y	
0d8c: c8        -         iny
0d8d: c8        -         iny
0d8e: 99 21 13  -         sta proximity_vectors,y							//proximity vectors ready
0d91: a0 00     -         ldy #00
0d93: ad 0a 13  - repeat: lda grid_pointer
0d96: 18        -         clc
0d97: 79 21 13  -         adc proximity_vectors,y
0d9a: 8d 0e 13  -         sta test_pointer
0d9d: c8        -         iny
0d9e: ad 0b 13  -         lda grid_pointer+1
0da1: 18        -         clc
0da2: 79 21 13  -         adc proximity_vectors,y
0da5: 8d 0f 13  -         sta test_pointer+1								//next grid now in test_pointer
0da8: 84 40     -         sty TEMPY										//save y
0daa: ad 06 13  -         lda X
0dad: 85 fb     -         sta Y
0daf: ad 07 13  -         lda X + 1
0db2: 85 fc     -         sta Y + 1
0db4: a9 00     -         lda #0
0db6: 85 fe     -         sta ZP4				
0db8: ad 0f 13  -         lda grid+1		
0dbb: 85 fd     -         sta ZP3
0dbd: a0 03     -         ldy #03
0dbf: 06 fd     - mul8:   asl X
0dc1: 26 fe     -         rol X+1	
0dc3: 88        -         dey
0dc4: d0 f9     -         bne mul8
0dc6: 18        -         clc
0dc7: a5 fb     -         lda X
0dc9: 65 fd     -         adc Y
0dcb: 85 fb     -         sta X
0dcd: 90 02     -         bcc skip
0dcf: e6 fc     -         inc X+1
0dd1: 18        - skip:   clc
0dd2: a5 fc     -         lda X+1
0dd4: 65 fe     -         adc Y+1
0dd6: 85 fc     -         sta X+1	
0dd8: a0 02     -         ldy #02	
0dda: 06 fd     - mul32:  asl X
0ddc: 26 fe     -         rol X+1	
0dde: 88        -         dey
0ddf: d0 f9     -         bne mul32
0de1: 18        -         clc
0de2: a5 fb     -         lda X
0de4: 65 fd     -         adc Y
0de6: 85 fb     -         sta X
0de8: 90 02     -         bcc skip
0dea: e6 fc     -         inc X+1
0dec: 18        - skip:   clc
0ded: a5 fc     -         lda X+1
0def: 65 fe     -         adc Y+1
0df1: 85 fc     -         sta X+1	
0df3: 18        -         clc
0df4: a5 fb     -         lda X
0df6: 6d 0e 13  -         adc y	
0df9: 85 fb     -         sta X
0dfb: 90 02     -         bcc out+2
0dfd: e6 fc     - out:    inc X+1
0dff: a0 00     -         ldy #0
0e01: b1 fb     -         lda (ZP1),y
0e03: c9 20     -         cmp #DOT										//is dot? (empty)
0e05: f0 0e     -         beq shift										//yes, shift on x
0e07: a4 40     -         ldy TEMPY										//restore y
0e09: c8        -         iny
0e0a: c0 08     -         cpy #08
0e0c: d0 85     -         bne repeat
0e0e: ca        - cont:   dex
0e0f: 30 03     -         bmi out										//less than zero, stop
0e11: 4c 3c 0d  -         jmp each									//loop back, branch too far
0e14: 60        - out:    rts
0e15: 86 3f     - shift:  stx TEMPX									//save x
0e17: 86 47     -         stx VAR_A									//set index to VAR_A
0e19: ad 20 13  -         lda X
0e1c: 85 48     -         sta Y
0e1e: a9 10     -         lda #<addr
0e20: 85 43     -         sta X
0e22: a9 13     -         lda #>addr
0e24: 85 44     -         sta X+1
0e26: a9 02     -         lda #data_size
0e28: 85 49     -         sta VAR_C
0e2a: 20 ae 08  -         jsr SPLICE
0e2d: ad 20 13  -         lda X
0e30: 85 48     -         sta Y
0e32: a9 18     -         lda #<addr
0e34: 85 43     -         sta X
0e36: a9 13     -         lda #>addr
0e38: 85 44     -         sta X+1
0e3a: a9 02     -         lda #data_size
0e3c: 85 49     -         sta VAR_C
0e3e: 20 ae 08  -         jsr SPLICE
0e41: ce 20 13  -         dec candidates_length						//dec array length
0e44: a6 3f     -         ldx TEMPX									//restore x
0e46: 4c 0e 0e  -         jmp cont									//return to loop
0e49: a5 71     - CANDIDATE_FROM_STACK:lda X
0e4b: 38        -         sec
0e4c: e9 02     -         sbc #C
0e4e: 85 71     -         sta X
0e50: b0 02     -         bcs out+2
0e52: c6 72     - out:    dec X+1
0e54: a0 00     -         ldy #0									//x
0e56: b1 71     -         lda (STKPTR1),y
0e58: 99 18 13  -         sta candidates_vectors,y
0e5b: c8        -         iny										//y
0e5c: b1 71     -         lda (STKPTR1),y
0e5e: 99 18 13  -         sta candidates_vectors,y
0e61: a5 71     -         lda X
0e63: 38        -         sec
0e64: e9 02     -         sbc #C
0e66: 85 71     -         sta X
0e68: b0 02     -         bcs out+2
0e6a: c6 72     - out:    dec X+1
0e6c: a0 00     -         ldy #0									//x
0e6e: b1 71     -         lda (STKPTR1),y
0e70: 99 10 13  -         sta candidates,y
0e73: c8        -         iny										//y
0e74: b1 71     -         lda (STKPTR1),y
0e76: 99 10 13  -         sta candidates,y
0e79: a9 01     -         lda #01
0e7b: 8d 20 13  -         sta candidates_length
0e7e: 60        - out:    rts
0e7f: ae 20 13  - CHECK_BIAS:ldx candidates_length
0e82: ca        -         dex
0e83: 8a        - each:   txa
0e84: 0a        -         asl 								// length to offset in
0e85: a8        -         tay									// y
0e86: b9 18 13  -         lda candidates_vectors,y			// x dim
0e89: cd 2b 13  -         cmp bias_direction
0e8c: d0 09     -         bne not 							//not same
0e8e: c8        -         iny
0e8f: b9 18 13  -         lda	candidates_vectors,y			// y dim	
0e92: cd 2c 13  -         cmp bias_direction+1				//the same
0e95: f0 06     -         beq found
0e97: ca        - not:    dex
0e98: 10 e9     -         bpl each
0e9a: a9 ff     -         lda #-1								//not found: -1
0e9c: 60        -         rts
0e9d: 8a        - found:  txa									//index in acc
0e9e: 60        -         rts
0e9f: a0 00     - STORE_DEAD_END:ldy #0
0ea1: ad 08 13  -         lda maze_start			//x
0ea4: 91 5c     -         sta (STKPTR3),y
0ea6: c8        -         iny
0ea7: ad 09 13  -         lda maze_start+1		//y
0eaa: 91 5c     -         sta (STKPTR3),y
0eac: ee 2d 13  -         inc DE_counter			//assumption always less than 255
0eaf: 18        -         clc
0eb0: a5 5c     -         lda X
0eb2: 69 02     -         adc #C
0eb4: 85 5c     -         sta X
0eb6: 90 02     -         bcc out+2
0eb8: e6 5d     - out:    inc X+1
0eba: 60        - out:    rts
0ebb: a9 00     - CONNECT_DEAD_ENDS:lda #<addr
0ebd: 85 5c     -         sta X
0ebf: a9 c4     -         lda #>addr
0ec1: 85 5d     -         sta X+1
0ec3: ae 2d 13  -         ldx DE_counter							//starting from last DE towards 0th
0ec6: ca        -         dex
0ec7: 86 0a     - each_DE:stx GLOBAL_X
0ec9: 8a        -         txa
0eca: 0a        -         asl 						//datasize=2
0ecb: a8        -         tay							//offset in y
0ecc: b1 5c     -         lda (STKPTR3),y
0ece: 8d 08 13  -         sta maze_start
0ed1: c8        -         iny
0ed2: b1 5c     -         lda (STKPTR3),y
0ed4: 8d 09 13  -         sta maze_start+1			//selected Dead End --> in maze_start
0ed7: ad 08 13  -         lda bridge
0eda: 85 50     -         sta BV7
0edc: ad 09 13  -         lda bridge+1
0edf: 85 51     -         sta BV8
0ee1: a9 00     -         lda #0
0ee3: 85 4a     -         sta VAR_D
0ee5: 20 cc 11  -         jsr CHECK_CONNECTION
0ee8: a5 4a     -         lda VAR_D					//check if still DE (only one grid is dot, rest are wall)
0eea: c9 01     -         cmp #01						//--> number of connections is exactly 1
0eec: f0 03     -         beq still_DE				//yes
0eee: 4c 08 0f  -         jmp end_loop				//no, check next
0ef1: 20 89 0a  - still_DE:jsr POINTERS_FROM_START		//candidates for bridges in candidates
0ef4: 20 c1 0a  -         jsr FILTER_IF_OUT
0ef7: 20 24 0b  -         jsr FILTER_IF_DOT
0efa: a9 00     -         lda #test
0efc: 85 52     -         sta BV0
0efe: 20 46 0c  -         jsr FILTER_IF_NEXT_PRIMARY
0f01: a9 02     -         lda #N
0f03: 85 52     -         sta BV0
0f05: 20 1a 0d  -         jsr FILTER_N_CONNECTIONS
0f08: a6 0a     - end_loop:ldx GLOBAL_X
0f0a: ca        -         dex
0f0b: 30 03     -         bmi out
0f0d: 4c c7 0e  -         jmp each_DE
0f10: 60        - out:    rts
0f11: a2 00     - MAKE_ROOMS:ldx #0
0f13: 86 3f     - each:   stx TEMPX
0f15: 8a        -         txa
0f16: 0a        -         asl
0f17: 0a        -         asl
0f18: a8        -         tay					//datasize 4 from x to y
0f19: a9 00     -         lda #0
0f1b: 85 fc     -         sta ZP2
0f1d: 85 fe     -         sta ZP4
0f1f: b9 3f 13  -         lda room_def,y
0f22: 85 fb     -         sta ZP1				//x from
0f24: b9 40 13  -         lda room_def+1,y
0f27: 85 fd     -         sta ZP3				//x to
0f29: 84 40     -         sty TEMPY
0f2b: 20 3a 09  -         jsr rnd_XY
0f2e: a5 14     -         lda WINT
0f30: a4 40     -         ldy TEMPY
0f32: 99 2f 13  -         sta rooms,y			//top x random(from, to)
0f35: a9 00     -         lda #0
0f37: 85 fc     -         sta ZP2
0f39: 85 fe     -         sta ZP4
0f3b: b9 41 13  -         lda room_def+2,y
0f3e: 85 fb     -         sta ZP1				//y from
0f40: b9 42 13  -         lda room_def+3,y
0f43: 85 fd     -         sta ZP3				//y to
0f45: 84 40     -         sty TEMPY
0f47: 20 3a 09  -         jsr rnd_XY
0f4a: a5 14     -         lda WINT
0f4c: a4 40     -         ldy TEMPY
0f4e: c8        -         iny
0f4f: 99 2f 13  -         sta rooms,y			//top y random(from, to)
0f52: a9 00     -         lda #0
0f54: 85 fc     -         sta ZP2
0f56: 85 fe     -         sta ZP4
0f58: a9 03     -         lda #MIN_W
0f5a: 85 fb     -         sta ZP1
0f5c: a9 04     -         lda #MAX_W
0f5e: 85 fd     -         sta ZP3
0f60: 84 40     -         sty TEMPY
0f62: 20 3a 09  -         jsr rnd_XY
0f65: a5 14     -         lda WINT
0f67: a4 40     -         ldy TEMPY
0f69: c8        -         iny	
0f6a: 99 2f 13  -         sta rooms,y			//w
0f6d: a9 00     -         lda #0
0f6f: 85 fc     -         sta ZP2
0f71: 85 fe     -         sta ZP4
0f73: a9 03     -         lda #MIN_W
0f75: 85 fb     -         sta ZP1
0f77: a9 04     -         lda #MAX_W
0f79: 85 fd     -         sta ZP3
0f7b: 84 40     -         sty TEMPY
0f7d: 20 3a 09  -         jsr rnd_XY
0f80: a5 14     -         lda WINT
0f82: a4 40     -         ldy TEMPY
0f84: c8        -         iny	
0f85: 99 2f 13  -         sta rooms,y			//h
0f88: a6 3f     -         ldx TEMPX
0f8a: e8        -         inx
0f8b: e0 04     -         cpx #ROOM_NUMBER
0f8d: d0 84     -         bne each
0f8f: 60        - out:    rts
0f90: a2 00     - GET_EXIT_CANDIDATES,init:ldx #0
0f92: 8e 8f 13  -         stx exit_candidates_length		//reset ...
0f95: 0a        -         asl 							//room index in A
0f96: 0a        -         asl 							//* 4 and to y	
0f97: a8        -         tay								//y offset of room index, datzasize = 4
0f98: b9 30 13  -         lda rooms+1,y					//y
0f9b: 85 40     -         sta TEMPY
0f9d: c6 40     -         dec TEMPY						//y-1
0f9f: 18        -         clc
0fa0: 79 32 13  -         adc rooms+3,y
0fa3: 85 53     -         sta TEMPY2						//y+h
0fa5: b9 31 13  -         lda rooms+2,y
0fa8: 85 02     -         sta ZP0	
0faa: b9 2f 13  -         lda rooms,y
0fad: 85 52     -         sta BV0							//x + i
0faf: 84 47     -         sty VAR_A						//save offset of room index
0fb1: a2 00     -         ldx #00
0fb3: ad 8f 13  - width_loop:lda	exit_candidates_length
0fb6: 0a        -         asl 							//datasize of candidates = 2
0fb7: a8        -         tay								//exit_candidates offset in y
0fb8: a5 52     -         lda	BV0							//x+i
0fba: 99 4f 13  -         sta exit_candidates,y	
0fbd: a9 00     -         lda #0
0fbf: 99 6f 13  -         sta exit_candidate_dirs,y
0fc2: c8        -         iny
0fc3: a5 40     -         lda TEMPY						//y-1
0fc5: 99 4f 13  -         sta exit_candidates,y
0fc8: a9 ff     -         lda #-1							
0fca: 99 6f 13  -         sta exit_candidate_dirs,y
0fcd: c8        -         iny
0fce: ee 8f 13  -         inc exit_candidates_length
0fd1: a5 52     -         lda	BV0							//x+i
0fd3: 99 4f 13  -         sta exit_candidates,y	
0fd6: a9 00     -         lda #0
0fd8: 99 6f 13  -         sta exit_candidate_dirs,y
0fdb: c8        -         iny
0fdc: a5 53     -         lda TEMPY2						//y+h
0fde: 99 4f 13  -         sta	exit_candidates,y	
0fe1: a9 01     -         lda #1
0fe3: 99 6f 13  -         sta exit_candidate_dirs,y
0fe6: ee 8f 13  -         inc exit_candidates_length		
0fe9: e6 52     -         inc BV0							//i++
0feb: e8        -         inx
0fec: e4 02     -         cpx ZP0
0fee: d0 c3     -         bne width_loop
0ff0: a4 47     -         ldy VAR_A						//restore offset of room index
0ff2: b9 2f 13  -         lda rooms,y						//x
0ff5: 85 3f     -         sta TEMPX
0ff7: c6 3f     -         dec TEMPX						//x-1
0ff9: 18        -         clc
0ffa: 79 31 13  -         adc rooms+2,y
0ffd: 85 4d     -         sta TEMPX2						//x+w
0fff: b9 32 13  -         lda rooms+3,y					//h
1002: 85 02     -         sta ZP0
1004: b9 30 13  -         lda rooms+1,y
1007: 85 52     -         sta BV0							//y + i
1009: a2 00     -         ldx #00
100b: ad 8f 13  - height_loop:lda	exit_candidates_length
100e: 0a        -         asl 							//datasize of candidates = 2
100f: a8        -         tay								//exit_candidates offset in y
1010: a5 3f     -         lda TEMPX						//x-1
1012: 99 4f 13  -         sta exit_candidates,y
1015: a9 ff     -         lda #-1
1017: 99 6f 13  -         sta exit_candidate_dirs,y
101a: c8        -         iny
101b: a5 52     -         lda BV0							//y+i
101d: 99 4f 13  -         sta exit_candidates,y
1020: a9 00     -         lda #0
1022: 99 6f 13  -         sta exit_candidate_dirs,y
1025: c8        -         iny
1026: ee 8f 13  -         inc exit_candidates_length
1029: a5 4d     -         lda TEMPX2						//x+w
102b: 99 4f 13  -         sta exit_candidates,y
102e: a9 01     -         lda #01
1030: 99 6f 13  -         sta exit_candidate_dirs,y
1033: c8        -         iny
1034: a5 52     -         lda BV0							//y+i
1036: 99 4f 13  -         sta exit_candidates,y
1039: a9 00     -         lda #0
103b: 99 6f 13  -         sta exit_candidate_dirs,y
103e: c8        -         iny
103f: ee 8f 13  -         inc exit_candidates_length
1042: e6 52     -         inc BV0							//i++
1044: e8        -         inx
1045: e4 02     -         cpx ZP0
1047: d0 c2     -         bne height_loop				
1049: 60        - out:    rts
104a: a9 00     - SET_START:lda #0							//room index in A
104c: 20 90 0f  -         jsr GET_EXIT_CANDIDATES
104f: ad 8f 13  -         lda exit_candidates_length
1052: 85 02     -         sta ZP0
1054: c6 02     -         dec ZP0
1056: a5 02     -         lda X	
1058: 85 fd     -         sta ZP3
105a: a9 00     -         lda #0
105c: 85 fe     -         sta ZP4
105e: 20 7b 09  -         jsr rnd_X
1061: a5 14     -         lda WINT
1063: 0a        -         asl 
1064: a8        -         tay
1065: b9 4f 13  -         lda exit_candidates,y
1068: 8d 08 13  -         sta maze_start
106b: c8        -         iny
106c: b9 4f 13  -         lda exit_candidates,y
106f: 8d 09 13  -         sta maze_start+1
1072: 60        - out:    rts
1073: a2 01     - CONNECT_ROOMS:ldx #01												//start with index 1, 0 should be already connected
1075: 86 0a     - each:   stx GLOBAL_X											//save x
1077: 8a        -         txa													//GET_EXIT_CANDIDATES expects room index in A
1078: 20 90 0f  -         jsr GET_EXIT_CANDIDATES								//trashes TEMPX
107b: ac 8f 13  - get_one:ldy exit_candidates_length
107e: 88        -         dey
107f: 84 02     -         sty ZP0
1081: a5 02     -         lda X	
1083: 85 fd     -         sta ZP3
1085: a9 00     -         lda #0
1087: 85 fe     -         sta ZP4
1089: 20 7b 09  -         jsr rnd_X
108c: a5 14     -         lda WINT											//random index
108e: 0a        -         asl 
108f: a8        -         tay													//offset in y
1090: b9 4f 13  -         lda exit_candidates,y
1093: 8d 0a 13  -         sta grid_pointer									//bridge
1096: b9 6f 13  -         lda exit_candidate_dirs,y
1099: 8d 0c 13  -         sta direction_pointer								//dir to test
109c: c8        -         iny
109d: b9 4f 13  -         lda exit_candidates,y
10a0: 8d 0b 13  -         sta grid_pointer+1
10a3: b9 6f 13  -         lda exit_candidate_dirs,y
10a6: 8d 0d 13  -         sta direction_pointer+1							
10a9: ad 0a 13  -         lda grid_pointer
10ac: 18        -         clc
10ad: 6d 0c 13  -         adc direction_pointer
10b0: 8d 0e 13  -         sta test_pointer
10b3: ad 0b 13  -         lda grid_pointer+1
10b6: 18        -         clc
10b7: 6d 0d 13  -         adc direction_pointer+1
10ba: 8d 0f 13  -         sta test_pointer+1
10bd: ad 06 13  -         lda X
10c0: 85 fb     -         sta Y
10c2: ad 07 13  -         lda X + 1
10c5: 85 fc     -         sta Y + 1
10c7: a9 00     -         lda #0
10c9: 85 fe     -         sta ZP4				
10cb: ad 0f 13  -         lda grid+1		
10ce: 85 fd     -         sta ZP3
10d0: a0 03     -         ldy #03
10d2: 06 fd     - mul8:   asl X
10d4: 26 fe     -         rol X+1	
10d6: 88        -         dey
10d7: d0 f9     -         bne mul8
10d9: 18        -         clc
10da: a5 fb     -         lda X
10dc: 65 fd     -         adc Y
10de: 85 fb     -         sta X
10e0: 90 02     -         bcc skip
10e2: e6 fc     -         inc X+1
10e4: 18        - skip:   clc
10e5: a5 fc     -         lda X+1
10e7: 65 fe     -         adc Y+1
10e9: 85 fc     -         sta X+1	
10eb: a0 02     -         ldy #02	
10ed: 06 fd     - mul32:  asl X
10ef: 26 fe     -         rol X+1	
10f1: 88        -         dey
10f2: d0 f9     -         bne mul32
10f4: 18        -         clc
10f5: a5 fb     -         lda X
10f7: 65 fd     -         adc Y
10f9: 85 fb     -         sta X
10fb: 90 02     -         bcc skip
10fd: e6 fc     -         inc X+1
10ff: 18        - skip:   clc
1100: a5 fc     -         lda X+1
1102: 65 fe     -         adc Y+1
1104: 85 fc     -         sta X+1	
1106: 18        -         clc
1107: a5 fb     -         lda X
1109: 6d 0e 13  -         adc y	
110c: 85 fb     -         sta X
110e: 90 02     -         bcc out+2
1110: e6 fc     - out:    inc X+1
1112: a0 00     -         ldy #0
1114: b1 fb     -         lda (ZP1),y
1116: c9 20     -         cmp #DOT											//is it dot
1118: f0 32     -         beq check_connections								//yes, check connections
111a: a5 14     -         lda WINT											//random index was still in WINT
111c: 85 47     -         sta VAR_A											//store index in VAR_A
111e: ad 8f 13  -         lda X
1121: 85 48     -         sta Y
1123: a9 4f     -         lda #<addr
1125: 85 43     -         sta X
1127: a9 13     -         lda #>addr
1129: 85 44     -         sta X+1
112b: a9 02     -         lda #data_size
112d: 85 49     -         sta VAR_C
112f: 20 ae 08  -         jsr SPLICE
1132: ad 8f 13  -         lda X
1135: 85 48     -         sta Y
1137: a9 6f     -         lda #<addr
1139: 85 43     -         sta X
113b: a9 13     -         lda #>addr
113d: 85 44     -         sta X+1
113f: a9 02     -         lda #data_size
1141: 85 49     -         sta VAR_C
1143: 20 ae 08  -         jsr SPLICE
1146: ce 8f 13  -         dec exit_candidates_length							//exit_candidates_length--
1149: 4c 7b 10  -         jmp get_one											//try another
114c: ad 0a 13  - check_connections:lda bridge
114f: 85 50     -         sta BV7
1151: ad 0b 13  -         lda bridge+1
1154: 85 51     -         sta BV8
1156: a9 00     -         lda #0
1158: 85 4a     -         sta VAR_D
115a: 20 cc 11  -         jsr CHECK_CONNECTION
115d: a5 4a     -         lda VAR_D
115f: c9 02     -         cmp #02												//exactly two directions required for bridge
1161: f0 03     -         beq yes												//yes, paint
1163: 4c 7b 10  -         jmp get_one											//not ok, get another
1166: ad 06 13  - yes:    lda X
1169: 85 fb     -         sta Y
116b: ad 07 13  -         lda X + 1
116e: 85 fc     -         sta Y + 1
1170: a9 00     -         lda #0
1172: 85 fe     -         sta ZP4				
1174: ad 0b 13  -         lda grid+1		
1177: 85 fd     -         sta ZP3
1179: a0 03     -         ldy #03
117b: 06 fd     - mul8:   asl X
117d: 26 fe     -         rol X+1	
117f: 88        -         dey
1180: d0 f9     -         bne mul8
1182: 18        -         clc
1183: a5 fb     -         lda X
1185: 65 fd     -         adc Y
1187: 85 fb     -         sta X
1189: 90 02     -         bcc skip
118b: e6 fc     -         inc X+1
118d: 18        - skip:   clc
118e: a5 fc     -         lda X+1
1190: 65 fe     -         adc Y+1
1192: 85 fc     -         sta X+1	
1194: a0 02     -         ldy #02	
1196: 06 fd     - mul32:  asl X
1198: 26 fe     -         rol X+1	
119a: 88        -         dey
119b: d0 f9     -         bne mul32
119d: 18        -         clc
119e: a5 fb     -         lda X
11a0: 65 fd     -         adc Y
11a2: 85 fb     -         sta X
11a4: 90 02     -         bcc skip
11a6: e6 fc     -         inc X+1
11a8: 18        - skip:   clc
11a9: a5 fc     -         lda X+1
11ab: 65 fe     -         adc Y+1
11ad: 85 fc     -         sta X+1	
11af: 18        -         clc
11b0: a5 fb     -         lda X
11b2: 6d 0a 13  -         adc y	
11b5: 85 fb     -         sta X
11b7: 90 02     -         bcc out+2
11b9: e6 fc     - out:    inc X+1
11bb: a9 20     -         lda #DOT
11bd: a0 00     -         ldy #0
11bf: 91 fb     -         sta (ZP1),y
11c1: a6 0a     -         ldx GLOBAL_X										//restore x
11c3: e8        -         inx													//next room
11c4: e0 04     -         cpx #ROOM_NUMBER
11c6: f0 03     -         beq out
11c8: 4c 75 10  -         jmp each
11cb: 60        - out:    rts
11cc: a2 03     - CHECK_CONNECTION:ldx #03						//iterate over directions
11ce: 8a        - each:   txa
11cf: 0a        -         asl
11d0: a8        -         tay							//offset in y
11d1: a5 50     -         lda BV7
11d3: 18        -         clc
11d4: 79 ab 09  -         adc BASIC_DIRS,y
11d7: 85 4e     -         sta BV9						//test.x
11d9: c8        -         iny
11da: a5 51     -         lda BV8
11dc: 18        -         clc
11dd: 79 ab 09  -         adc BASIC_DIRS,y
11e0: 85 4f     -         sta BV10					//test.y
11e2: ad 06 13  -         lda X
11e5: 85 fb     -         sta Y
11e7: ad 07 13  -         lda X + 1
11ea: 85 fc     -         sta Y + 1
11ec: a9 00     -         lda #0
11ee: 85 fe     -         sta ZP4				
11f0: a5 4f     -         lda grid+1		
11f2: 85 fd     -         sta ZP3
11f4: a0 03     -         ldy #03
11f6: 06 fd     - mul8:   asl X
11f8: 26 fe     -         rol X+1	
11fa: 88        -         dey
11fb: d0 f9     -         bne mul8
11fd: 18        -         clc
11fe: a5 fb     -         lda X
1200: 65 fd     -         adc Y
1202: 85 fb     -         sta X
1204: 90 02     -         bcc skip
1206: e6 fc     -         inc X+1
1208: 18        - skip:   clc
1209: a5 fc     -         lda X+1
120b: 65 fe     -         adc Y+1
120d: 85 fc     -         sta X+1	
120f: a0 02     -         ldy #02	
1211: 06 fd     - mul32:  asl X
1213: 26 fe     -         rol X+1	
1215: 88        -         dey
1216: d0 f9     -         bne mul32
1218: 18        -         clc
1219: a5 fb     -         lda X
121b: 65 fd     -         adc Y
121d: 85 fb     -         sta X
121f: 90 02     -         bcc skip
1221: e6 fc     -         inc X+1
1223: 18        - skip:   clc
1224: a5 fc     -         lda X+1
1226: 65 fe     -         adc Y+1
1228: 85 fc     -         sta X+1	
122a: 18        -         clc
122b: a5 fb     -         lda X
122d: 65 4e     -         adc y	
122f: 85 fb     -         sta X
1231: 90 02     -         bcc out+2
1233: e6 fc     - out:    inc X+1
1235: a0 00     -         ldy #0
1237: b1 fb     -         lda (ZP1),y
1239: c9 20     -         cmp #DOT
123b: d0 02     -         bne skip
123d: e6 4a     -         inc VAR_D
123f: ca        - skip:   dex
1240: 10 8c     -         bpl each
1242: 60        - out:    rts
1243: 20 9f 0e  - MAZE:   jsr STORE_DEAD_END
1246: 20 d6 09  - outer,P_LOOP:jsr MAZE_DOT
1249: 20 89 0a  -         jsr POINTERS_FROM_START
124c: 20 c1 0a  -         jsr FILTER_IF_OUT
124f: 20 24 0b  -         jsr FILTER_IF_DOT
1252: a9 20     -         lda #test
1254: 85 52     -         sta BV0
1256: 20 46 0c  -         jsr FILTER_IF_NEXT_PRIMARY
1259: 20 30 0d  -         jsr FILTER_SIDE_PROXIMIY
125c: ad 20 13  -         lda candidates_length						//check how many we have
125f: c9 00     -         cmp #00										//if zero break;
1261: d0 06     -         bne more									//more than 0
1263: 20 9f 0e  -         jsr STORE_DEAD_END							//store dead end
1266: 4c d3 12  -         jmp S_LOOP
1269: c9 02     - more:   cmp #02										//if it is two or more
126b: b0 05     -         bcs then									//go to else/then
126d: a9 00     -         lda #0										//otherwise, index->0 in A									
126f: 4c 99 12  -         jmp skip_else
1272: ad 2a 13  - then:   lda bias_counter
1275: c9 00     -         cmp #00
1277: f0 07     -         beq select_random							//use random, not bias
1279: 20 7f 0e  -         jsr CHECK_BIAS								//index in a, or -1 if not found
127c: c9 ff     -         cmp #-1
127e: d0 19     -         bne skip_else								//not -1, select this direction
1280: a9 00     - select_random:lda #0										//reset bias counter when selection is random	
1282: 8d 2a 13  -         sta bias_counter
1285: ad 20 13  -         lda candidates_length						//random index (, candidates length-1)
1288: aa        -         tax
1289: ca        -         dex
128a: 86 02     -         stx ZP0
128c: a5 02     -         lda X	
128e: 85 fd     -         sta ZP3
1290: a9 00     -         lda #0
1292: 85 fe     -         sta ZP4
1294: 20 7b 09  -         jsr rnd_X
1297: a5 14     -         lda WINT
1299: 85 02     - skip_else:sta ZP0										//store index in ZP0	
129b: 0a        -         asl 										//datasize=2	
129c: a8        -         tay											//offset in y
129d: b9 10 13  -         lda candidates,y
12a0: 8d 08 13  -         sta maze_start
12a3: b9 18 13  -         lda candidates_vectors,y
12a6: 8d 2b 13  -         sta bias_direction
12a9: c8        -         iny
12aa: b9 10 13  -         lda candidates,y
12ad: 8d 09 13  -         sta maze_start+1
12b0: b9 18 13  -         lda candidates_vectors,y
12b3: 8d 2c 13  -         sta bias_direction+1
12b6: ee 2a 13  -         inc bias_counter
12b9: ad 2a 13  -         lda bias_counter
12bc: cd 29 13  -         cmp bias
12bf: d0 05     -         bne out+3
12c1: a9 00     -         lda #00
12c3: 8d 2a 13  - out:    sta bias_counter
12c6: ad 20 13  -         lda candidates_length
12c9: c9 02     -         cmp #02										//if there are 2 or more, selected has not been discarded yet
12cb: 90 03     -         bcc repeat_P								//no, repeat loop
12cd: 20 d5 0b  -         jsr PUSH_REST_ON_STACK													
12d0: 4c 46 12  - repeat_P:jmp P_LOOP
12d3: a5 71     - S_LOOP: lda STKPTR1
12d5: c9 00     -         cmp #<STACK
12d7: d0 09     -         bne cont
12d9: a5 72     -         lda STKPTR2
12db: c9 c0     -         cmp #>STACK
12dd: d0 03     -         bne cont
12df: 4c 05 13  -         jmp quit									//stack pointer == STACK, stack is empty
12e2: 20 49 0e  - cont:   jsr CANDIDATE_FROM_STACK					//take on grid an its direction from stack
12e5: a9 20     -         lda #test
12e7: 85 52     -         sta BV0
12e9: 20 46 0c  -         jsr FILTER_IF_NEXT_PRIMARY
12ec: 20 30 0d  -         jsr FILTER_SIDE_PROXIMIY					//in terms of proximity
12ef: ad 20 13  -         lda candidates_length						//check if it is still ok
12f2: c9 00     -         cmp #00										//if zero break; 
12f4: f0 dd     -         beq S_LOOP									//no, find another
12f6: ad 10 13  -         lda candidates								//set it to maze_start
12f9: 8d 08 13  -         sta maze_start
12fc: ad 11 13  -         lda candidates+1
12ff: 8d 09 13  -         sta maze_start+1
1302: 4c 46 12  -         jmp P_LOOP									//make next branch
1305: 60        - quit:   rts

[MAZE Memory]
1306: 04 00     - MAZE_memory,maze_memory_alloc:.word $0004 					//screen by default
1308: 00 00     - maze_start:.word 0
130a: 00 00     - grid_pointer:.word 0
130c: 00 00     - direction_pointer:.word 0
130e: 00 00     - test_pointer:.word 0
1310: 00 00     - candidates:.fill 2,0
1312: 00 00     -         .fill 2,0
1314: 00 00     -         .fill 2,0
1316: 00 00     -         .fill 2,0
1318: 00 00     - candidates_vectors:.fill 2,0
131a: 00 00     -         .fill 2,0
131c: 00 00     -         .fill 2,0
131e: 00 00     -         .fill 2,0
1320: 00        - candidates_length:.byte 0
1321: 00 00     - proximity_vectors:.fill 2,0
1323: 00 00     -         .fill 2,0
1325: 00 00     -         .fill 2,0
1327: 00 00     -         .fill 2,0
1329: 02        - bias:   .byte 2
132a: 00        - bias_counter:.byte 0
132b: 00 00     - bias_direction:.word 0
132d: 00        - DE_counter:.byte 0
132e: 00        - REM_DE_counter:.byte 0
132f: 00 00 00 00                                      - rooms:  .fill 4,0
1333: 00 00 00 00                                      -         .fill 4,0
1337: 00 00 00 00                                      -         .fill 4,0
133b: 00 00 00 00                                      -         .fill 4,0
133f: 03 0e 03 06                                      - room_def:.byte 3, 14, 3, 6
1343: 17 21 03 06                                      -         .byte 23, 33, 3, 6
1347: 03 0e 0e 11                                      -         .byte 3, 14, 14, 17
134b: 17 21 0e 11                                      -         .byte 23, 33, 14, 17
134f: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - exit_candidates:.fill MAX_W * 4 * 2, 0
135f: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
136f: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - exit_candidate_dirs:.fill MAX_W * 4 * 2, 0
137f: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
138f: 00        - exit_candidates_length:.byte 0

[Subroutines]
1390: ad d3 13  - subs,irqcode:lda modeflag
1393: f0 03     -         beq mode1
1395: 4c ad 13  -         jmp mode2
1398: a9 01     - mode1:  lda #$01
139a: 8d d3 13  -         sta modeflag
139d: a9 00     -         lda #BLACK
139f: 8d 20 d0  -         sta BORDER
13a2: a9 32     -         lda #startRaster
13a4: 8d 12 d0  -         sta RASTER_COUNTER
13a7: 0e 19 d0  -         asl INTERRUPT_REQUEST_REGISTER
13aa: 4c 31 ea  -         jmp IRQOUT
13ad: a9 00     - mode2:  lda #$00
13af: 8d d3 13  -         sta modeflag
13b2: a9 0f     -         lda #LIGHTGREY
13b4: 8d 20 d0  -         sta BORDER
13b7: a9 fa     -         lda #endRaster
13b9: 8d 12 d0  -         sta RASTER_COUNTER
13bc: 0e 19 d0  -         asl INTERRUPT_REQUEST_REGISTER
13bf: 68        -         pla
13c0: a8        -         tay
13c1: 68        -         pla
13c2: aa        -         tax
13c3: 68        -         pla
13c4: 40        -         rti
13c5: a2 00     - set_bricks:ldx #00
13c7: bd d6 13  - copy:   lda brick_data,x
13ca: 9d 00 30  -         sta char_offset,x
13cd: e8        -         inx
13ce: e0 08     -         cpx #08
13d0: d0 f5     -         bne copy
13d2: 60        -         rts

[Data]
13d3: 00        - text,data,modeflag:.byte 0
13d4: 00        - startX: .byte 0
13d5: 00        - startY: .byte 0
13d6: dd c1 38 bb bb 83 1c dd                          - brick_data:.byte $dd,$c1,$38,$bb,$bb,$83,$1c,$dd
