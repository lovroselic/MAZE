******************************* Segment: Default *******************************
[Header]
0801: 0c 08     -         .word bend
0803: 0d 00     -         .byte $0d, $00				//;line number
0805: 9e        -         .byte $9E					//;SYS
0806: 20        -         .byte $20					//;space
0807: 32 30 36 34                                      -         .byte $32,$30,$36,$34		//;start 2064
080b: 00        -         .byte $00					//;end of line
080c: 00 00     - bend:   .byte $00, $00				//;end of basic program

[Main]
0810: 20 2a 09  - setup:  jsr COPY_CHAR_ROM_TO_RAM
0813: 20 6d 15  -         jsr set_bricks
0816: a9 0f     -         lda	#color
0818: a0 00     -         ldy #0
081a: 99 00 d8  - fill:   sta COLOR_RAM,y
081d: 99 00 d9  -         sta COLOR_RAM + 256,y
0820: 99 00 da  -         sta COLOR_RAM + 512,y
0823: 99 00 db  -         sta COLOR_RAM + 768,y
0826: c8        -         iny
0827: d0 f1     -         bne fill
0829: a9 00     -         lda #BLACK
082b: 8d 21 d0  -         sta BACKGROUND
082e: 78        - interrupt:sei								//set interrupt
082f: a9 7f     -         lda #$7f
0831: 8d 0d dc  -         sta CIA_ICR
0834: 8d 0d dd  -         sta CIA2_ICR
0837: ad 0d dc  -         lda CIA_ICR
083a: ad 0d dd  -         lda CIA2_ICR
083d: ad 1a d0  -         lda INTERRUPT_MASK_REGISTER	
0840: 09 01     -         ora #$01
0842: 8d 1a d0  -         sta INTERRUPT_MASK_REGISTER
0845: ad 11 d0  -         lda CONTROL_REGISTER1
0848: 29 7f     -         and #$7f
084a: 8d 11 d0  -         sta CONTROL_REGISTER1
084d: a9 32     -         lda #startRaster
084f: 8d 12 d0  -         sta RASTER_COUNTER
0852: a9 38     -         lda #<address
0854: 8d 14 03  -         sta IRQVEC
0857: a9 15     -         lda #>address
0859: 8d 15 03  -         sta	IRQVEC+1
085c: 58        -         cli
085d: d8        - begin:  cld
085e: a9 02     - init:   lda #B
0860: 8d d1 14  -         sta bias
0863: a9 00     -         lda #00
0865: 8d d2 14  -         sta bias_counter
0868: a9 00     -         lda #<addr
086a: 8d ae 14  -         sta X
086d: a9 04     -         lda #>addr
086f: 8d af 14  -         sta X+1
0872: a9 00     -         lda #<addr
0874: 85 71     -         sta X
0876: a9 c0     -         lda #>addr
0878: 85 72     -         sta X+1
087a: a9 00     -         lda #<addr
087c: 85 5c     -         sta X
087e: a9 c6     -         lda #>addr
0880: 85 5d     -         sta X+1
0882: a9 00     -         lda #<addr
0884: 85 5e     -         sta X
0886: a9 c7     -         lda #>addr
0888: 85 5f     -         sta X+1
088a: a9 00     -         lda #00
088c: 8d d5 14  -         sta DE_counter
088f: 8d d6 14  -         sta REM_DE_counter
0892: 20 db 09  -         jsr MAZE_FILL
0895: a9 0f     -         lda	#color
0897: a0 00     -         ldy #0
0899: 99 00 d8  - fill:   sta COLOR_RAM,y
089c: 99 00 d9  -         sta COLOR_RAM + 256,y
089f: 99 00 da  -         sta COLOR_RAM + 512,y
08a2: 99 00 db  -         sta COLOR_RAM + 768,y
08a5: c8        -         iny
08a6: d0 f1     -         bne fill
08a8: 20 ae 0a  -         jsr ROOMS
08ab: 20 ee 11  -         jsr SET_START
08ae: 20 e7 13  -         jsr MAZE
08b1: 20 17 12  -         jsr CONNECT_ROOMS
08b4: ad d5 14  - while:  lda DE_counter				// while DE > 0, repeat:
08b7: c9 00     -         cmp #00
08b9: f0 09     -         beq done
08bb: 20 fd 0f  -         jsr CONNECT_DEAD_ENDS
08be: 20 93 0f  -         jsr POLISH_DEAD_END
08c1: 4c b4 08  -         jmp while
08c4: a5 c5     - done,end,key:lda LSTX		//get character in A
08c6: c9 40     -         cmp #64			//no key
08c8: f0 fa     -         beq key
08ca: 4c 5e 08  -         jmp init
08cd: 60        -         rts

[Imports]
08ce: c6 48     - imports,SPLICE:dec VAR_B								//array length - 1, last index
08d0: a4 47     -         ldy VAR_A								//index
08d2: c4 48     - loop:   cpy VAR_B								//stop if index
08d4: 10 35     -         bpl out 								//equal or greater than last index
08d6: a2 00     -         ldx #0									//number of properties (data_size), start from 0
08d8: c8        - each:   iny		
08d9: 84 40     -         sty TEMPY
08db: a5 49     -         lda	VAR_C 								//data size
08dd: 20 0c 09  -         jsr MUL_Y_A
08e0: 84 02     -         sty ZP0
08e2: 8a        -         txa
08e3: 18        -         clc
08e4: 65 02     -         adc ZP0
08e6: a8        -         tay
08e7: b1 43     -         lda (BV1),y
08e9: 85 41     -         sta TEMPA1
08eb: a4 40     -         ldy TEMPY
08ed: 88        -         dey
08ee: 84 40     -         sty TEMPY
08f0: a5 49     -         lda	VAR_C 								//data size
08f2: 20 0c 09  -         jsr MUL_Y_A
08f5: 84 02     -         sty ZP0
08f7: 8a        -         txa
08f8: 18        -         clc
08f9: 65 02     -         adc ZP0
08fb: a8        -         tay
08fc: a5 41     -         lda TEMPA1
08fe: 91 43     -         sta (BV1),y
0900: a4 40     -         ldy TEMPY
0902: e8        -         inx
0903: e4 49     -         cpx VAR_C								//all props? less than VAR_C ?
0905: 90 d1     -         bcc each
0907: c8        -         iny
0908: 4c d2 08  -         jmp loop
090b: 60        - out:    rts
090c: c0 00     - MUL_Y_A,multiply:cpy #00
090e: f0 18     -         beq end
0910: 88        -         dey
0911: 8c 1e 09  -         sty mod+1
0914: 4a        -         lsr
0915: 85 02     -         sta ZP0
0917: a9 00     -         lda #00
0919: a0 08     -         ldy #$08
091b: 90 02     - loop:   bcc skip
091d: 69 00     - mod:    adc #0
091f: 6a        - skip:   ror
0920: 66 02     -         ror ZP0
0922: 88        -         dey
0923: d0 f6     -         bne loop
0925: a4 02     -         ldy ZP0
0927: 60        -         rts
0928: 98        - end:    tya
0929: 60        -         rts
092a: 78        - COPY_CHAR_ROM_TO_RAM:sei
092b: a5 01     -         lda $01			//make ROM visible
092d: 29 fb     -         and #$FB
092f: 85 01     -         sta $01 
0931: a9 00     -         lda #00
0933: 85 5f     -         sta $5f			//block start
0935: 85 5a     -         sta $5a			//block end
0937: 85 58     -         sta $58			//destination end
0939: a0 d0     -         ldy #$d0
093b: 84 60     -         sty $60			//block start
093d: a0 e0     -         ldy #$e0		
093f: 84 5b     -         sty $5b			//block end
0941: a0 40     - ram:    ldy #$40
0943: 84 59     -         sty $59			//destination end
0945: 20 bf a3  -         jsr MOVE_BYTES
0948: a5 01     -         lda $01			//hide rom
094a: 09 04     -         ora #$04
094c: 85 01     -         sta $01
094e: 58        -         cli
094f: ad 18 d0  -         lda VMCSB
0952: 29 f0     -         and #%11110000
0954: 09 0c     -         ora #%00001100	//$3000
0956: 8d 18 d0  -         sta VMCSB
0959: 60        -         rts

[SYSTEM_data]
095a: e6 fd     - SYS_data,rnd_XY:inc ZP3
095c: d0 02     -         bne skip1
095e: e6 fe     -         inc ZP4
0960: a5 fd     - skip1:  lda ZP3
0962: 38        -         sec
0963: e5 fb     -         sbc ZP1
0965: 85 fd     -         sta ZP3
0967: a5 fe     -         lda ZP4
0969: e5 fc     -         sbc ZP2
096b: 85 fe     -         sta ZP4			
096d: a4 fd     - toFloat:ldy ZP3
096f: a5 fe     -         lda ZP4
0971: 20 91 b3  -         jsr GIVAYF 					//A(h),Y(L) - FAC
0974: a2 c6     -         ldx #<flt
0976: a0 09     -         ldy #>flt
0978: 20 d4 bb  -         jsr MOVMF					//store FAC to flt		
097b: a9 00     -         lda #$00					//RND(0)
097d: 20 9a e0  -         jsr RND						//$E09A
0980: a9 c6     -         lda #<flt
0982: a0 09     -         ldy #>flt
0984: 20 28 ba  -         jsr FMULT					//Multiplies a number from RAM (A,y) and FAC	
0987: 20 cc bc  -         jsr FAINT					//to integer
098a: 20 bf b1  -         jsr AYINT					//fac to signed int HI $64 LO $65
098d: a5 65     -         lda $65						//FAC mantissa lo
098f: 18        -         clc
0990: 65 fb     -         adc ZP1						//add number to start	
0992: 85 14     -         sta WINT
0994: a5 64     -         lda $64						//FAC mantissa hi
0996: 65 fc     -         adc ZP2
0998: 85 15     -         sta WINT+1
099a: 60        - over:   rts			
099b: e6 fd     - rnd_X:  inc ZP3
099d: d0 02     -         bne toFloat
099f: e6 fe     -         inc ZP4	
09a1: a4 fd     - toFloat:ldy ZP3
09a3: a5 fe     -         lda ZP4
09a5: 20 91 b3  -         jsr GIVAYF 					//A(h),Y(L) - FAC
09a8: a2 c6     -         ldx #<flt
09aa: a0 09     -         ldy #>flt
09ac: 20 d4 bb  -         jsr MOVMF					//store FAC to flt		
09af: a9 00     -         lda #$00					//get actual RND(0)
09b1: 20 9a e0  -         jsr RND						//$E09A
09b4: a9 c6     -         lda #<flt
09b6: a0 09     -         ldy #>flt
09b8: 20 28 ba  -         jsr FMULT					//Multiplies a number from RAM (A,y) and FAC	
09bb: 20 cc bc  -         jsr FAINT					//to integer
09be: 20 bf b1  -         jsr AYINT					//fac to signed int HI $64 LO $65
09c1: a5 65     -         lda $65						//FAC mantissa lo
09c3: 85 14     -         sta WINT					
09c5: 60        -         rts			

[Data RND]
09c6: 00 00 00 00 00                                   - dataRND,flt:.byte 0,0,0,0,0

[Grid_Constants]
09cb: 00 ff     - Grid_Constants,BASIC_DIRS,UP:.byte 	0, -1
09cd: 00 01     - DOWN:   .byte 	0, 1
09cf: ff 00     - LEFT:   .byte	-1, 0
09d1: 01 00     - RIGHT:  .byte 	1,0
09d3: ff ff     - PROX_TEMPLATE:.byte 	-1, -1
09d5: 01 01     -         .byte 	1, 1
09d7: ff ff     -         .byte 	-1, -1
09d9: 01 01     -         .byte 	1, 1
09db: ad ae 14  - MAZE_FILL:lda X
09de: 85 fb     -         sta Y
09e0: ad af 14  -         lda X + 1
09e3: 85 fc     -         sta Y + 1
09e5: a9 00     -         lda	#WALL
09e7: a2 04     -         ldx #4
09e9: a0 00     - block:  ldy #0
09eb: 91 fb     - fill:   sta (ZP1),y
09ed: c8        -         iny
09ee: d0 fb     -         bne fill
09f0: e6 fc     -         inc ZP2
09f2: ca        -         dex
09f3: d0 f4     -         bne block
09f5: 60        -         rts
09f6: ad ae 14  - MAZE_DOT:lda X
09f9: 85 fb     -         sta Y
09fb: ad af 14  -         lda X + 1
09fe: 85 fc     -         sta Y + 1
0a00: a9 00     -         lda #0
0a02: 85 fe     -         sta ZP4				
0a04: ad b1 14  -         lda grid+1		
0a07: 85 fd     -         sta ZP3
0a09: a0 03     -         ldy #03
0a0b: 06 fd     - mul8:   asl X
0a0d: 26 fe     -         rol X+1	
0a0f: 88        -         dey
0a10: d0 f9     -         bne mul8
0a12: a5 fb     -         lda X
0a14: 18        -         clc
0a15: 65 fd     -         adc Y
0a17: 85 fb     -         sta X
0a19: 90 02     -         bcc skip
0a1b: e6 fc     -         inc X+1
0a1d: a5 fc     - skip:   lda X+1
0a1f: 18        -         clc
0a20: 65 fe     -         adc Y+1
0a22: 85 fc     -         sta X+1	
0a24: a0 02     -         ldy #02	
0a26: 06 fd     - mul32:  asl X
0a28: 26 fe     -         rol X+1	
0a2a: 88        -         dey
0a2b: d0 f9     -         bne mul32
0a2d: a5 fb     -         lda X
0a2f: 18        -         clc
0a30: 65 fd     -         adc Y
0a32: 85 fb     -         sta X
0a34: 90 02     -         bcc skip
0a36: e6 fc     -         inc X+1
0a38: a5 fc     - skip:   lda X+1
0a3a: 18        -         clc
0a3b: 65 fe     -         adc Y+1
0a3d: 85 fc     -         sta X+1	
0a3f: a5 fb     -         lda X
0a41: 18        -         clc
0a42: 6d b0 14  -         adc y	
0a45: 85 fb     -         sta X
0a47: 90 02     -         bcc out+2
0a49: e6 fc     - out:    inc X+1
0a4b: a9 20     -         lda #DOT
0a4d: a0 00     -         ldy #0
0a4f: 91 fb     -         sta (ZP1),y
0a51: 60        -         rts
0a52: ad ae 14  - MAZE_WALL:lda X
0a55: 85 fb     -         sta Y
0a57: ad af 14  -         lda X + 1
0a5a: 85 fc     -         sta Y + 1
0a5c: a9 00     -         lda #0
0a5e: 85 fe     -         sta ZP4				
0a60: ad b1 14  -         lda grid+1		
0a63: 85 fd     -         sta ZP3
0a65: a0 03     -         ldy #03
0a67: 06 fd     - mul8:   asl X
0a69: 26 fe     -         rol X+1	
0a6b: 88        -         dey
0a6c: d0 f9     -         bne mul8
0a6e: a5 fb     -         lda X
0a70: 18        -         clc
0a71: 65 fd     -         adc Y
0a73: 85 fb     -         sta X
0a75: 90 02     -         bcc skip
0a77: e6 fc     -         inc X+1
0a79: a5 fc     - skip:   lda X+1
0a7b: 18        -         clc
0a7c: 65 fe     -         adc Y+1
0a7e: 85 fc     -         sta X+1	
0a80: a0 02     -         ldy #02	
0a82: 06 fd     - mul32:  asl X
0a84: 26 fe     -         rol X+1	
0a86: 88        -         dey
0a87: d0 f9     -         bne mul32
0a89: a5 fb     -         lda X
0a8b: 18        -         clc
0a8c: 65 fd     -         adc Y
0a8e: 85 fb     -         sta X
0a90: 90 02     -         bcc skip
0a92: e6 fc     -         inc X+1
0a94: a5 fc     - skip:   lda X+1
0a96: 18        -         clc
0a97: 65 fe     -         adc Y+1
0a99: 85 fc     -         sta X+1	
0a9b: a5 fb     -         lda X
0a9d: 18        -         clc
0a9e: 6d b0 14  -         adc y	
0aa1: 85 fb     -         sta X
0aa3: 90 02     -         bcc out+2
0aa5: e6 fc     - out:    inc X+1
0aa7: a9 00     -         lda #WALL
0aa9: a0 00     -         ldy #0
0aab: 91 fb     -         sta (ZP1),y
0aad: 60        -         rts
0aae: 20 b5 10  - ROOMS:  jsr MAKE_ROOMS
0ab1: 20 b5 0a  -         jsr PAINT_ROOMS
0ab4: 60        -         rts
0ab5: a2 00     - PAINT_ROOMS:ldx #00
0ab7: 86 3f     - each:   stx TEMPX				//each room
0ab9: 8a        -         txa
0aba: 0a        -         asl
0abb: 0a        -         asl
0abc: a8        -         tay
0abd: b9 d7 14  -         lda rooms,y				//get top left x of room
0ac0: 85 4e     -         sta BV9
0ac2: c8        -         iny
0ac3: b9 d7 14  -         lda rooms,y				//get top left y of room
0ac6: 85 4f     -         sta BV10
0ac8: c8        -         iny
0ac9: b9 d7 14  -         lda rooms,y 			//w
0acc: 85 02     -         sta ZP0
0ace: c8        -         iny
0acf: b9 d7 14  -         lda rooms,y 			//h
0ad2: 85 52     -         sta BV0
0ad4: a2 00     -         ldx #0
0ad6: a0 00     - cont_w: ldy #0
0ad8: 86 41     - cont_h: stx TEMPA1
0ada: a5 4e     -         lda BV9
0adc: 18        -         clc
0add: 65 41     -         adc TEMPA1
0adf: 8d b0 14  -         sta maze_start
0ae2: 84 41     -         sty TEMPA1
0ae4: a5 4f     -         lda BV10
0ae6: 18        -         clc
0ae7: 65 41     -         adc TEMPA1
0ae9: 8d b1 14  -         sta maze_start+1
0aec: 84 40     -         sty TEMPY
0aee: 20 f6 09  -         jsr MAZE_DOT
0af1: a4 40     -         ldy TEMPY
0af3: c8        -         iny
0af4: c4 52     -         cpy BV0
0af6: d0 e0     -         bne cont_h
0af8: e8        -         inx
0af9: e4 02     -         cpx ZP0
0afb: d0 d9     -         bne cont_w
0afd: a6 3f     -         ldx TEMPX
0aff: e8        -         inx
0b00: e0 04     -         cpx #ROOM_NUMBER
0b02: d0 b3     -         bne each
0b04: 60        - out:    rts
0b05: a2 03     - POINTERS_FROM_START:ldx #03
0b07: 8a        - add:    txa
0b08: 0a        -         asl
0b09: a8        -         tay		
0b0a: 18        -         clc
0b0b: ad b0 14  -         lda maze_start
0b0e: 79 cb 09  -         adc BASIC_DIRS,y
0b11: 99 b8 14  -         sta candidates,y
0b14: c8        -         iny
0b15: 18        -         clc
0b16: ad b1 14  -         lda maze_start+1
0b19: 79 cb 09  -         adc BASIC_DIRS,y
0b1c: 99 b8 14  -         sta candidates,y
0b1f: ca        -         dex
0b20: 10 e5     -         bpl add
0b22: a2 03     -         ldx #03
0b24: 8a        - copy:   txa
0b25: 0a        -         asl
0b26: a8        -         tay	
0b27: b9 cb 09  -         lda BASIC_DIRS,y
0b2a: 99 c0 14  -         sta candidates_vectors,y
0b2d: c8        -         iny
0b2e: b9 cb 09  -         lda BASIC_DIRS,y
0b31: 99 c0 14  -         sta candidates_vectors,y
0b34: ca        -         dex
0b35: 10 ed     -         bpl copy
0b37: a9 04     -         lda #04
0b39: 8d c8 14  -         sta candidates_length
0b3c: 60        -         rts
0b3d: ad c8 14  - FILTER_IF_OUT:lda candidates_length
0b40: c9 01     -         cmp #1
0b42: b0 01     -         bcs start
0b44: 60        -         rts
0b45: ae c8 14  - start:  ldx candidates_length				//number of grids yet to check
0b48: ca        -         dex
0b49: 8a        - each:   txa
0b4a: 0a        -         asl
0b4b: a8        -         tay
0b4c: 18        -         clc
0b4d: b9 b8 14  -         lda candidates,y
0b50: c9 27     -         cmp #MAX_X+1
0b52: b0 18     -         bcs shift
0b54: c9 01     -         cmp #MIN_X
0b56: 90 14     -         bcc shift
0b58: c8        -         iny
0b59: 18        -         clc
0b5a: b9 b8 14  -         lda candidates,y
0b5d: c9 18     -         cmp #MAX_Y+1
0b5f: b0 0b     -         bcs shift
0b61: c9 01     -         cmp #MIN_Y
0b63: 90 07     -         bcc shift
0b65: ca        - cont:   dex
0b66: 30 03     -         bmi out
0b68: 4c 49 0b  -         jmp each
0b6b: 60        - out:    rts
0b6c: 86 3f     - shift:  stx TEMPX									//save x							
0b6e: 86 47     -         stx VAR_A									//set index to VAR_A
0b70: ad c8 14  -         lda X
0b73: 85 48     -         sta Y
0b75: a9 b8     -         lda #<addr
0b77: 85 43     -         sta X
0b79: a9 14     -         lda #>addr
0b7b: 85 44     -         sta X+1
0b7d: a9 02     -         lda #data_size
0b7f: 85 49     -         sta VAR_C
0b81: 20 ce 08  -         jsr SPLICE
0b84: ad c8 14  -         lda X
0b87: 85 48     -         sta Y
0b89: a9 c0     -         lda #<addr
0b8b: 85 43     -         sta X
0b8d: a9 14     -         lda #>addr
0b8f: 85 44     -         sta X+1
0b91: a9 02     -         lda #data_size
0b93: 85 49     -         sta VAR_C
0b95: 20 ce 08  -         jsr SPLICE
0b98: ce c8 14  -         dec candidates_length						//dec array length
0b9b: a6 3f     -         ldx TEMPX									//restore x
0b9d: 4c 65 0b  -         jmp cont									//return to loop
0ba0: ad c8 14  - FILTER_IF_DOT:lda candidates_length
0ba3: c9 01     -         cmp #1
0ba5: b0 01     -         bcs start
0ba7: 60        -         rts
0ba8: ae c8 14  - start:  ldx candidates_length						//number of grids yet to check
0bab: ca        -         dex
0bac: 8a        - each:   txa
0bad: 0a        -         asl
0bae: a8        -         tay
0baf: b9 b8 14  -         lda candidates,y
0bb2: 8d b2 14  -         sta grid_pointer
0bb5: c8        -         iny
0bb6: b9 b8 14  -         lda candidates,y
0bb9: 8d b3 14  -         sta grid_pointer+1
0bbc: ad ae 14  -         lda X
0bbf: 85 fb     -         sta Y
0bc1: ad af 14  -         lda X + 1
0bc4: 85 fc     -         sta Y + 1
0bc6: a9 00     -         lda #0
0bc8: 85 fe     -         sta ZP4				
0bca: ad b3 14  -         lda grid+1		
0bcd: 85 fd     -         sta ZP3
0bcf: a0 03     -         ldy #03
0bd1: 06 fd     - mul8:   asl X
0bd3: 26 fe     -         rol X+1	
0bd5: 88        -         dey
0bd6: d0 f9     -         bne mul8
0bd8: a5 fb     -         lda X
0bda: 18        -         clc
0bdb: 65 fd     -         adc Y
0bdd: 85 fb     -         sta X
0bdf: 90 02     -         bcc skip
0be1: e6 fc     -         inc X+1
0be3: a5 fc     - skip:   lda X+1
0be5: 18        -         clc
0be6: 65 fe     -         adc Y+1
0be8: 85 fc     -         sta X+1	
0bea: a0 02     -         ldy #02	
0bec: 06 fd     - mul32:  asl X
0bee: 26 fe     -         rol X+1	
0bf0: 88        -         dey
0bf1: d0 f9     -         bne mul32
0bf3: a5 fb     -         lda X
0bf5: 18        -         clc
0bf6: 65 fd     -         adc Y
0bf8: 85 fb     -         sta X
0bfa: 90 02     -         bcc skip
0bfc: e6 fc     -         inc X+1
0bfe: a5 fc     - skip:   lda X+1
0c00: 18        -         clc
0c01: 65 fe     -         adc Y+1
0c03: 85 fc     -         sta X+1	
0c05: a5 fb     -         lda X
0c07: 18        -         clc
0c08: 6d b2 14  -         adc y	
0c0b: 85 fb     -         sta X
0c0d: 90 02     -         bcc out+2
0c0f: e6 fc     - out:    inc X+1
0c11: a0 00     -         ldy #0
0c13: b1 fb     -         lda (ZP1),y
0c15: c5 52     -         cmp BV0										//value to compare in BV0
0c17: f0 04     -         beq shift
0c19: ca        - cont:   dex
0c1a: 10 90     -         bpl each
0c1c: 60        - out:    rts
0c1d: 86 3f     - shift:  stx TEMPX									//save x
0c1f: 86 47     -         stx VAR_A									//set index to VAR_A
0c21: ad c8 14  -         lda X
0c24: 85 48     -         sta Y
0c26: a9 b8     -         lda #<addr
0c28: 85 43     -         sta X
0c2a: a9 14     -         lda #>addr
0c2c: 85 44     -         sta X+1
0c2e: a9 02     -         lda #data_size
0c30: 85 49     -         sta VAR_C
0c32: 20 ce 08  -         jsr SPLICE
0c35: ad c8 14  -         lda X
0c38: 85 48     -         sta Y
0c3a: a9 c0     -         lda #<addr
0c3c: 85 43     -         sta X
0c3e: a9 14     -         lda #>addr
0c40: 85 44     -         sta X+1
0c42: a9 02     -         lda #data_size
0c44: 85 49     -         sta VAR_C
0c46: 20 ce 08  -         jsr SPLICE
0c49: ce c8 14  -         dec candidates_length						//dec array length
0c4c: a6 3f     -         ldx TEMPX									//restore x
0c4e: 4c 19 0c  -         jmp cont									//return to loop
0c51: a5 02     - PUSH_REST_ON_STACK:lda ZP0										//index was stored in ZP0
0c53: 85 47     -         sta VAR_A									//set index to VAR_A
0c55: ad c8 14  -         lda X
0c58: 85 48     -         sta Y
0c5a: a9 b8     -         lda #<addr
0c5c: 85 43     -         sta X
0c5e: a9 14     -         lda #>addr
0c60: 85 44     -         sta X+1
0c62: a9 02     -         lda #data_size
0c64: 85 49     -         sta VAR_C
0c66: 20 ce 08  -         jsr SPLICE
0c69: ad c8 14  -         lda X
0c6c: 85 48     -         sta Y
0c6e: a9 c0     -         lda #<addr
0c70: 85 43     -         sta X
0c72: a9 14     -         lda #>addr
0c74: 85 44     -         sta X+1
0c76: a9 02     -         lda #data_size
0c78: 85 49     -         sta VAR_C
0c7a: 20 ce 08  -         jsr SPLICE
0c7d: ce c8 14  -         dec candidates_length						//dec array length
0c80: a2 00     -         ldx #0
0c82: a0 00     - each:   ldy #0
0c84: 86 3f     -         stx TEMPX									//save x
0c86: 8a        -         txa											//x = x *2	
0c87: 0a        -         asl 
0c88: aa        -         tax									
0c89: bd b8 14  -         lda candidates,x							//x
0c8c: 91 71     -         sta (STKPTR1),y
0c8e: c8        -         iny
0c8f: e8        -         inx
0c90: bd b8 14  -         lda candidates,x							//y
0c93: 91 71     -         sta (STKPTR1),y
0c95: a5 71     -         lda X
0c97: 18        -         clc
0c98: 69 02     -         adc #C
0c9a: 85 71     -         sta X
0c9c: 90 02     -         bcc out+2
0c9e: e6 72     - out:    inc X+1
0ca0: 88        -         dey
0ca1: ca        -         dex
0ca2: bd c0 14  -         lda candidates_vectors,x					//x
0ca5: 91 71     -         sta (STKPTR1),y
0ca7: c8        -         iny
0ca8: e8        -         inx
0ca9: bd c0 14  -         lda candidates_vectors,x					//y
0cac: 91 71     -         sta (STKPTR1),y
0cae: a5 71     -         lda X
0cb0: 18        -         clc
0cb1: 69 02     -         adc #C
0cb3: 85 71     -         sta X
0cb5: 90 02     -         bcc out+2
0cb7: e6 72     - out:    inc X+1
0cb9: a6 3f     -         ldx TEMPX									//restore x
0cbb: e8        -         inx
0cbc: ec c8 14  -         cpx candidates_length
0cbf: d0 c1     -         bne each
0cc1: 60        - out:    rts		
0cc2: ad c8 14  - FILTER_IF_NEXT_PRIMARY:lda candidates_length
0cc5: c9 01     -         cmp #1
0cc7: b0 01     -         bcs start										//cont if 1 or more
0cc9: 60        -         rts												//else exit, if no candidates
0cca: ae c8 14  - start:  ldx candidates_length							//number of grids yet to check
0ccd: ca        -         dex												//to zero offset
0cce: 8a        - each:   txa
0ccf: 0a        -         asl												//double, because datasize is 2
0cd0: a8        -         tay												//offset in y (zero based x * datasize)
0cd1: b9 b8 14  -         lda candidates,y
0cd4: 8d b2 14  -         sta grid_pointer
0cd7: b9 c0 14  -         lda candidates_vectors,y
0cda: 8d b4 14  -         sta direction_pointer
0cdd: c8        -         iny
0cde: b9 b8 14  -         lda candidates,y
0ce1: 8d b3 14  -         sta grid_pointer+1
0ce4: b9 c0 14  -         lda candidates_vectors,y
0ce7: 8d b5 14  -         sta direction_pointer+1
0cea: 18        -         clc
0ceb: ad b2 14  -         lda grid_pointer
0cee: 6d b4 14  -         adc direction_pointer
0cf1: 8d b6 14  -         sta test_pointer
0cf4: 18        -         clc
0cf5: ad b3 14  -         lda grid_pointer+1
0cf8: 6d b5 14  -         adc direction_pointer+1
0cfb: 8d b7 14  -         sta test_pointer+1
0cfe: ad ae 14  -         lda X
0d01: 85 fb     -         sta Y
0d03: ad af 14  -         lda X + 1
0d06: 85 fc     -         sta Y + 1
0d08: a9 00     -         lda #0
0d0a: 85 fe     -         sta ZP4				
0d0c: ad b7 14  -         lda grid+1		
0d0f: 85 fd     -         sta ZP3
0d11: a0 03     -         ldy #03
0d13: 06 fd     - mul8:   asl X
0d15: 26 fe     -         rol X+1	
0d17: 88        -         dey
0d18: d0 f9     -         bne mul8
0d1a: a5 fb     -         lda X
0d1c: 18        -         clc
0d1d: 65 fd     -         adc Y
0d1f: 85 fb     -         sta X
0d21: 90 02     -         bcc skip
0d23: e6 fc     -         inc X+1
0d25: a5 fc     - skip:   lda X+1
0d27: 18        -         clc
0d28: 65 fe     -         adc Y+1
0d2a: 85 fc     -         sta X+1	
0d2c: a0 02     -         ldy #02	
0d2e: 06 fd     - mul32:  asl X
0d30: 26 fe     -         rol X+1	
0d32: 88        -         dey
0d33: d0 f9     -         bne mul32
0d35: a5 fb     -         lda X
0d37: 18        -         clc
0d38: 65 fd     -         adc Y
0d3a: 85 fb     -         sta X
0d3c: 90 02     -         bcc skip
0d3e: e6 fc     -         inc X+1
0d40: a5 fc     - skip:   lda X+1
0d42: 18        -         clc
0d43: 65 fe     -         adc Y+1
0d45: 85 fc     -         sta X+1	
0d47: a5 fb     -         lda X
0d49: 18        -         clc
0d4a: 6d b6 14  -         adc y	
0d4d: 85 fb     -         sta X
0d4f: 90 02     -         bcc out+2
0d51: e6 fc     - out:    inc X+1
0d53: a0 00     -         ldy #0
0d55: b1 fb     -         lda (ZP1),y
0d57: c5 52     -         cmp BV0										//BV0 holds the value to filter out
0d59: f0 07     -         beq shift									//yes
0d5b: ca        - cont:   dex
0d5c: 30 03     -         bmi out										//less than zero, stop
0d5e: 4c ce 0c  -         jmp each									//loop back, branch too far
0d61: 60        - out:    rts
0d62: 86 3f     - shift:  stx TEMPX									//save x
0d64: 86 47     -         stx VAR_A									//set index to VAR_A
0d66: ad c8 14  -         lda X
0d69: 85 48     -         sta Y
0d6b: a9 b8     -         lda #<addr
0d6d: 85 43     -         sta X
0d6f: a9 14     -         lda #>addr
0d71: 85 44     -         sta X+1
0d73: a9 02     -         lda #data_size
0d75: 85 49     -         sta VAR_C
0d77: 20 ce 08  -         jsr SPLICE
0d7a: ad c8 14  -         lda X
0d7d: 85 48     -         sta Y
0d7f: a9 c0     -         lda #<addr
0d81: 85 43     -         sta X
0d83: a9 14     -         lda #>addr
0d85: 85 44     -         sta X+1
0d87: a9 02     -         lda #data_size
0d89: 85 49     -         sta VAR_C
0d8b: 20 ce 08  -         jsr SPLICE
0d8e: ce c8 14  -         dec candidates_length						//dec array length
0d91: a6 3f     -         ldx TEMPX									//restore x
0d93: 4c 5b 0d  -         jmp cont									//return to loop
0d96: ad c8 14  - FILTER_N_CONNECTIONS:lda candidates_length
0d99: c9 01     -         cmp #1
0d9b: b0 01     -         bcs start										//cont if 1 or more
0d9d: 60        -         rts												//else exit, if no candidates
0d9e: ae c8 14  - start:  ldx candidates_length							//number of grids yet to check
0da1: ca        -         dex												//to zero offset	
0da2: 86 3f     - each:   stx TEMPX										// save x 
0da4: 8a        -         txa
0da5: 0a        -         asl												//double, because datasize is 2
0da6: a8        -         tay												//offset in y (zero based x * datasize)
0da7: b9 b8 14  -         lda candidates,y
0daa: 8d b2 14  -         sta grid_pointer
0dad: c8        -         iny
0dae: b9 b8 14  -         lda candidates,y
0db1: 8d b3 14  -         sta grid_pointer+1
0db4: ad b2 14  -         lda bridge
0db7: 85 50     -         sta BV7
0db9: ad b3 14  -         lda bridge+1
0dbc: 85 51     -         sta BV8
0dbe: a9 00     -         lda #0
0dc0: 85 4a     -         sta VAR_D
0dc2: 20 70 13  -         jsr CHECK_CONNECTION
0dc5: a6 3f     -         ldx TEMPX										//restore x
0dc7: a5 4a     -         lda VAR_D										//value to compare is in BV0
0dc9: c5 52     -         cmp BV0
0dcb: d0 07     -         bne shift										//not equal, shift											
0dcd: ca        - cont:   dex
0dce: 30 03     -         bmi out											//less than zero, stop
0dd0: 4c a2 0d  -         jmp each										//loop back, branch too far
0dd3: 60        - out:    rts
0dd4: 86 3f     - shift:  stx TEMPX									//save x
0dd6: 86 47     -         stx VAR_A									//set index to VAR_A
0dd8: ad c8 14  -         lda X
0ddb: 85 48     -         sta Y
0ddd: a9 b8     -         lda #<addr
0ddf: 85 43     -         sta X
0de1: a9 14     -         lda #>addr
0de3: 85 44     -         sta X+1
0de5: a9 02     -         lda #data_size
0de7: 85 49     -         sta VAR_C
0de9: 20 ce 08  -         jsr SPLICE
0dec: ad c8 14  -         lda X
0def: 85 48     -         sta Y
0df1: a9 c0     -         lda #<addr
0df3: 85 43     -         sta X
0df5: a9 14     -         lda #>addr
0df7: 85 44     -         sta X+1
0df9: a9 02     -         lda #data_size
0dfb: 85 49     -         sta VAR_C
0dfd: 20 ce 08  -         jsr SPLICE
0e00: ce c8 14  -         dec candidates_length						//dec array length
0e03: a6 3f     -         ldx TEMPX									//restore x
0e05: 4c cd 0d  -         jmp cont									//return to loop
0e08: ad c8 14  - FILTER_SIDE_PROXIMIY:lda candidates_length
0e0b: c9 01     -         cmp #1
0e0d: b0 01     -         bcs start										//cont if 1 or more
0e0f: 60        -         rts												//else exit, if no candidates
0e10: ae c8 14  - start:  ldx candidates_length							//number of grids yet to check
0e13: ca        -         dex												//to zero offset
0e14: 8a        - each:   txa
0e15: 0a        -         asl												//double, because datasize is 2
0e16: a8        -         tay												//offset in y (zero based x * datasize)
0e17: b9 b8 14  -         lda candidates, y
0e1a: 8d b2 14  -         sta grid_pointer
0e1d: b9 c0 14  -         lda candidates_vectors,y
0e20: 8d b4 14  -         sta direction_pointer
0e23: c8        -         iny
0e24: b9 b8 14  -         lda candidates, y
0e27: 8d b3 14  -         sta grid_pointer+1
0e2a: b9 c0 14  -         lda candidates_vectors,y
0e2d: 8d b5 14  -         sta direction_pointer+1
0e30: a9 d3     -         lda #<addr
0e32: 85 50     -         sta X
0e34: a9 09     -         lda #>addr
0e36: 85 51     -         sta X+1
0e38: a9 c9     -         lda #<addr
0e3a: 85 4e     -         sta X
0e3c: a9 14     -         lda #>addr
0e3e: 85 4f     -         sta X+1
0e40: a0 08     -         ldy #length											
0e42: 88        -         dey
0e43: b1 50     - copy:   lda (BV7),y
0e45: 91 4e     -         sta (BV9),y
0e47: 88        -         dey
0e48: 10 f9     -         bpl copy
0e4a: a0 01     -         ldy #01											//y?
0e4c: b9 b4 14  -         lda direction_pointer,y
0e4f: d0 01     -         bne ok											//if not zero, than this is right dimension
0e51: 88        -         dey												//not y, but x
0e52: b9 b4 14  - ok:     lda direction_pointer,y							//index of dimension now in y register
0e55: 99 c9 14  -         sta proximity_vectors,y							//set sequence 1,1,0,0 on the right dimension, datasize=2
0e58: c8        -         iny
0e59: c8        -         iny
0e5a: 99 c9 14  -         sta proximity_vectors,y	
0e5d: c8        -         iny
0e5e: c8        -         iny
0e5f: a9 00     -         lda #0
0e61: 99 c9 14  -         sta proximity_vectors,y	
0e64: c8        -         iny
0e65: c8        -         iny
0e66: 99 c9 14  -         sta proximity_vectors,y							//proximity vectors ready
0e69: a0 00     -         ldy #00
0e6b: ad b2 14  - repeat: lda grid_pointer
0e6e: 18        -         clc
0e6f: 79 c9 14  -         adc proximity_vectors,y
0e72: 8d b6 14  -         sta test_pointer
0e75: c8        -         iny
0e76: ad b3 14  -         lda grid_pointer+1
0e79: 18        -         clc
0e7a: 79 c9 14  -         adc proximity_vectors,y
0e7d: 8d b7 14  -         sta test_pointer+1								//next grid now in test_pointer
0e80: 84 40     -         sty TEMPY										//save y
0e82: ad ae 14  -         lda X
0e85: 85 fb     -         sta Y
0e87: ad af 14  -         lda X + 1
0e8a: 85 fc     -         sta Y + 1
0e8c: a9 00     -         lda #0
0e8e: 85 fe     -         sta ZP4				
0e90: ad b7 14  -         lda grid+1		
0e93: 85 fd     -         sta ZP3
0e95: a0 03     -         ldy #03
0e97: 06 fd     - mul8:   asl X
0e99: 26 fe     -         rol X+1	
0e9b: 88        -         dey
0e9c: d0 f9     -         bne mul8
0e9e: a5 fb     -         lda X
0ea0: 18        -         clc
0ea1: 65 fd     -         adc Y
0ea3: 85 fb     -         sta X
0ea5: 90 02     -         bcc skip
0ea7: e6 fc     -         inc X+1
0ea9: a5 fc     - skip:   lda X+1
0eab: 18        -         clc
0eac: 65 fe     -         adc Y+1
0eae: 85 fc     -         sta X+1	
0eb0: a0 02     -         ldy #02	
0eb2: 06 fd     - mul32:  asl X
0eb4: 26 fe     -         rol X+1	
0eb6: 88        -         dey
0eb7: d0 f9     -         bne mul32
0eb9: a5 fb     -         lda X
0ebb: 18        -         clc
0ebc: 65 fd     -         adc Y
0ebe: 85 fb     -         sta X
0ec0: 90 02     -         bcc skip
0ec2: e6 fc     -         inc X+1
0ec4: a5 fc     - skip:   lda X+1
0ec6: 18        -         clc
0ec7: 65 fe     -         adc Y+1
0ec9: 85 fc     -         sta X+1	
0ecb: a5 fb     -         lda X
0ecd: 18        -         clc
0ece: 6d b6 14  -         adc y	
0ed1: 85 fb     -         sta X
0ed3: 90 02     -         bcc out+2
0ed5: e6 fc     - out:    inc X+1
0ed7: a0 00     -         ldy #0
0ed9: b1 fb     -         lda (ZP1),y
0edb: c9 20     -         cmp #DOT										//is dot? (empty)
0edd: f0 0e     -         beq shift										//yes, shift on x
0edf: a4 40     -         ldy TEMPY										//restore y
0ee1: c8        -         iny
0ee2: c0 08     -         cpy #08
0ee4: d0 85     -         bne repeat
0ee6: ca        - cont:   dex
0ee7: 30 03     -         bmi out										//less than zero, stop
0ee9: 4c 14 0e  -         jmp each									//loop back, branch too far
0eec: 60        - out:    rts
0eed: 86 3f     - shift:  stx TEMPX									//save x
0eef: 86 47     -         stx VAR_A									//set index to VAR_A
0ef1: ad c8 14  -         lda X
0ef4: 85 48     -         sta Y
0ef6: a9 b8     -         lda #<addr
0ef8: 85 43     -         sta X
0efa: a9 14     -         lda #>addr
0efc: 85 44     -         sta X+1
0efe: a9 02     -         lda #data_size
0f00: 85 49     -         sta VAR_C
0f02: 20 ce 08  -         jsr SPLICE
0f05: ad c8 14  -         lda X
0f08: 85 48     -         sta Y
0f0a: a9 c0     -         lda #<addr
0f0c: 85 43     -         sta X
0f0e: a9 14     -         lda #>addr
0f10: 85 44     -         sta X+1
0f12: a9 02     -         lda #data_size
0f14: 85 49     -         sta VAR_C
0f16: 20 ce 08  -         jsr SPLICE
0f19: ce c8 14  -         dec candidates_length						//dec array length
0f1c: a6 3f     -         ldx TEMPX									//restore x
0f1e: 4c e6 0e  -         jmp cont									//return to loop
0f21: a5 71     - CANDIDATE_FROM_STACK:lda X
0f23: 38        -         sec
0f24: e9 02     -         sbc #C
0f26: 85 71     -         sta X
0f28: b0 02     -         bcs out+2
0f2a: c6 72     - out:    dec X+1
0f2c: a0 00     -         ldy #0									//x
0f2e: b1 71     -         lda (STKPTR1),y
0f30: 99 c0 14  -         sta candidates_vectors,y
0f33: c8        -         iny										//y
0f34: b1 71     -         lda (STKPTR1),y
0f36: 99 c0 14  -         sta candidates_vectors,y
0f39: a5 71     -         lda X
0f3b: 38        -         sec
0f3c: e9 02     -         sbc #C
0f3e: 85 71     -         sta X
0f40: b0 02     -         bcs out+2
0f42: c6 72     - out:    dec X+1
0f44: a0 00     -         ldy #0									//x
0f46: b1 71     -         lda (STKPTR1),y
0f48: 99 b8 14  -         sta candidates,y
0f4b: c8        -         iny										//y
0f4c: b1 71     -         lda (STKPTR1),y
0f4e: 99 b8 14  -         sta candidates,y
0f51: a9 01     -         lda #01
0f53: 8d c8 14  -         sta candidates_length
0f56: 60        - out:    rts
0f57: ae c8 14  - CHECK_BIAS:ldx candidates_length
0f5a: ca        -         dex
0f5b: 8a        - each:   txa
0f5c: 0a        -         asl 								// length to offset in
0f5d: a8        -         tay									// y
0f5e: b9 c0 14  -         lda candidates_vectors,y			// x dim
0f61: cd d3 14  -         cmp bias_direction
0f64: d0 09     -         bne not 							//not same
0f66: c8        -         iny
0f67: b9 c0 14  -         lda	candidates_vectors,y			// y dim	
0f6a: cd d4 14  -         cmp bias_direction+1				//the same
0f6d: f0 06     -         beq found
0f6f: ca        - not:    dex
0f70: 10 e9     -         bpl each
0f72: a9 ff     -         lda #-1								//not found: -1
0f74: 60        -         rts
0f75: 8a        - found:  txa									//index in acc
0f76: 60        -         rts
0f77: a0 00     - STORE_DEAD_END:ldy #0
0f79: ad b0 14  -         lda maze_start			//x
0f7c: 91 5c     -         sta (STKPTR3),y
0f7e: c8        -         iny
0f7f: ad b1 14  -         lda maze_start+1		//y
0f82: 91 5c     -         sta (STKPTR3),y
0f84: ee d5 14  -         inc DE_counter			//assumption always less than 255
0f87: a5 5c     -         lda X
0f89: 18        -         clc
0f8a: 69 02     -         adc #C
0f8c: 85 5c     -         sta X
0f8e: 90 02     -         bcc out+2
0f90: e6 5d     - out:    inc X+1
0f92: 60        - out:    rts
0f93: a9 00     - POLISH_DEAD_END:lda #<addr
0f95: 85 5e     -         sta X
0f97: a9 c7     -         lda #>addr
0f99: 85 5f     -         sta X+1
0f9b: a9 00     -         lda #<addr
0f9d: 85 5c     -         sta X
0f9f: a9 c6     -         lda #>addr
0fa1: 85 5d     -         sta X+1
0fa3: a9 00     -         lda #0	
0fa5: 8d d5 14  -         sta DE_counter							//reset counter
0fa8: ae d6 14  -         ldx REM_DE_counter						//starting from last DE towards 0th
0fab: e0 00     -         cpx #0
0fad: d0 01     -         bne start
0faf: 60        -         rts
0fb0: ca        - start:  dex
0fb1: 86 0a     - each_DE:stx GLOBAL_X
0fb3: 8a        -         txa
0fb4: 0a        -         asl
0fb5: a8        -         tay
0fb6: b1 5e     -         lda (STKPTR5),y
0fb8: 8d b0 14  -         sta maze_start
0fbb: c8        -         iny
0fbc: b1 5e     -         lda (STKPTR5),y
0fbe: 8d b1 14  -         sta maze_start+1						//selected Dead End --> in maze_start
0fc1: 20 05 0b  -         jsr POINTERS_FROM_START
0fc4: a9 00     -         lda #value
0fc6: 85 52     -         sta BV0
0fc8: 20 a0 0b  -         jsr FILTER_IF_DOT
0fcb: a0 00     -         ldy #0
0fcd: ad b0 14  -         lda	maze_start
0fd0: 18        -         clc
0fd1: 79 c0 14  -         adc candidates_vectors,y
0fd4: 8d b2 14  -         sta grid_pointer
0fd7: c8        -         iny
0fd8: ad b1 14  -         lda maze_start+1
0fdb: 18        -         clc
0fdc: 79 c0 14  -         adc candidates_vectors,y
0fdf: 8d b3 14  -         sta grid_pointer+1						//next possible DE in grid_pointer
0fe2: 20 52 0a  -         jsr MAZE_WALL
0fe5: ad b2 14  -         lda X
0fe8: 8d b0 14  -         sta Y
0feb: ad b3 14  -         lda X + 1
0fee: 8d b1 14  -         sta Y + 1
0ff1: 20 77 0f  -         jsr STORE_DEAD_END						//STORE_DEAD_END expects it
0ff4: a6 0a     - end_loop:ldx GLOBAL_X
0ff6: ca        -         dex
0ff7: 30 03     -         bmi out
0ff9: 4c b1 0f  -         jmp each_DE
0ffc: 60        - out:    rts
0ffd: a9 00     - CONNECT_DEAD_ENDS:lda #<addr
0fff: 85 5c     -         sta X
1001: a9 c6     -         lda #>addr
1003: 85 5d     -         sta X+1
1005: a9 00     -         lda #0
1007: 8d d6 14  -         sta REM_DE_counter
100a: ae d5 14  -         ldx DE_counter							//starting from last DE towards 0th
100d: e0 00     -         cpx #0
100f: d0 01     -         bne start
1011: 60        -         rts
1012: ca        - start:  dex
1013: 86 0a     - each_DE:stx GLOBAL_X
1015: 8a        -         txa
1016: 0a        -         asl 									//datasize=2
1017: a8        -         tay										//offset in y
1018: b1 5c     -         lda (STKPTR3),y
101a: 8d b0 14  -         sta maze_start
101d: c8        -         iny
101e: b1 5c     -         lda (STKPTR3),y
1020: 8d b1 14  -         sta maze_start+1						//selected Dead End --> in maze_start
1023: ad b0 14  -         lda bridge
1026: 85 50     -         sta BV7
1028: ad b1 14  -         lda bridge+1
102b: 85 51     -         sta BV8
102d: a9 00     -         lda #0
102f: 85 4a     -         sta VAR_D
1031: 20 70 13  -         jsr CHECK_CONNECTION
1034: a5 4a     -         lda VAR_D								//check if still DE (only one grid is dot, rest are wall)
1036: c9 01     -         cmp #01									//--> number of connections is exactly 1
1038: f0 03     -         beq still_DE							//yes
103a: 4c ac 10  -         jmp end_loop							//no, check next
103d: 20 05 0b  - still_DE:jsr POINTERS_FROM_START					//candidates for bridges in candidates
1040: 20 3d 0b  -         jsr FILTER_IF_OUT
1043: a9 20     -         lda #value
1045: 85 52     -         sta BV0
1047: 20 a0 0b  -         jsr FILTER_IF_DOT
104a: a9 00     -         lda #test
104c: 85 52     -         sta BV0
104e: 20 c2 0c  -         jsr FILTER_IF_NEXT_PRIMARY
1051: a9 02     -         lda #N
1053: 85 52     -         sta BV0
1055: 20 96 0d  -         jsr FILTER_N_CONNECTIONS
1058: ad c8 14  -         lda candidates_length						//check how many we have
105b: c9 00     -         cmp #00										//if zero break;
105d: d0 1e     -         bne more									//more than 0
105f: a0 00     -         ldy #0										//store into remainder stack
1061: ad b0 14  -         lda maze_start								//x
1064: 91 5e     -         sta (STKPTR5),y
1066: c8        -         iny
1067: ad b1 14  -         lda maze_start+1							//y
106a: 91 5e     -         sta (STKPTR5),y
106c: ee d6 14  -         inc REM_DE_counter							//assumption always less than 255
106f: a5 5e     -         lda X
1071: 18        -         clc
1072: 69 02     -         adc #C
1074: 85 5e     -         sta X
1076: 90 02     -         bcc out+2
1078: e6 5f     - out:    inc X+1
107a: 4c ac 10  -         jmp end_loop								//nothing to paint
107d: c9 02     - more:   cmp #02										//if it is two or more
107f: b0 05     -         bcs select_random							//go to else/select_random
1081: a9 00     -         lda #0										//otherwise, index->0 in A									
1083: 4c 9a 10  -         jmp skip_else
1086: ad c8 14  - select_random:lda candidates_length						//random index (, candidates length-1)
1089: aa        -         tax
108a: ca        -         dex
108b: 86 02     -         stx ZP0
108d: a5 02     -         lda X	
108f: 85 fd     -         sta ZP3
1091: a9 00     -         lda #0
1093: 85 fe     -         sta ZP4
1095: 20 9b 09  -         jsr rnd_X
1098: a5 14     -         lda WINT
109a: 0a        - skip_else:asl 										//datasize=2	
109b: a8        -         tay											//offset in y
109c: b9 b8 14  -         lda candidates,y	
109f: 8d b0 14  -         sta maze_start
10a2: c8        -         iny
10a3: b9 b8 14  -         lda candidates,y
10a6: 8d b1 14  -         sta maze_start+1
10a9: 20 f6 09  -         jsr MAZE_DOT								//and paint
10ac: a6 0a     - end_loop:ldx GLOBAL_X
10ae: ca        -         dex
10af: 30 03     -         bmi out
10b1: 4c 13 10  -         jmp each_DE
10b4: 60        - out:    rts
10b5: a2 00     - MAKE_ROOMS:ldx #0
10b7: 86 3f     - each:   stx TEMPX
10b9: 8a        -         txa
10ba: 0a        -         asl
10bb: 0a        -         asl
10bc: a8        -         tay					//datasize 4 from x to y
10bd: a9 00     -         lda #0
10bf: 85 fc     -         sta ZP2
10c1: 85 fe     -         sta ZP4
10c3: b9 e7 14  -         lda room_def,y
10c6: 85 fb     -         sta ZP1				//x from
10c8: b9 e8 14  -         lda room_def+1,y
10cb: 85 fd     -         sta ZP3				//x to
10cd: 84 40     -         sty TEMPY
10cf: 20 5a 09  -         jsr rnd_XY
10d2: a5 14     -         lda WINT
10d4: a4 40     -         ldy TEMPY
10d6: 99 d7 14  -         sta rooms,y			//top x random(from, to)
10d9: a9 00     -         lda #0
10db: 85 fc     -         sta ZP2
10dd: 85 fe     -         sta ZP4
10df: b9 e9 14  -         lda room_def+2,y
10e2: 85 fb     -         sta ZP1				//y from
10e4: b9 ea 14  -         lda room_def+3,y
10e7: 85 fd     -         sta ZP3				//y to
10e9: 84 40     -         sty TEMPY
10eb: 20 5a 09  -         jsr rnd_XY
10ee: a5 14     -         lda WINT
10f0: a4 40     -         ldy TEMPY
10f2: c8        -         iny
10f3: 99 d7 14  -         sta rooms,y			//top y random(from, to)
10f6: a9 00     -         lda #0
10f8: 85 fc     -         sta ZP2
10fa: 85 fe     -         sta ZP4
10fc: a9 03     -         lda #MIN_W
10fe: 85 fb     -         sta ZP1
1100: a9 04     -         lda #MAX_W
1102: 85 fd     -         sta ZP3
1104: 84 40     -         sty TEMPY
1106: 20 5a 09  -         jsr rnd_XY
1109: a5 14     -         lda WINT
110b: a4 40     -         ldy TEMPY
110d: c8        -         iny	
110e: 99 d7 14  -         sta rooms,y			//w
1111: a9 00     -         lda #0
1113: 85 fc     -         sta ZP2
1115: 85 fe     -         sta ZP4
1117: a9 03     -         lda #MIN_W
1119: 85 fb     -         sta ZP1
111b: a9 04     -         lda #MAX_W
111d: 85 fd     -         sta ZP3
111f: 84 40     -         sty TEMPY
1121: 20 5a 09  -         jsr rnd_XY
1124: a5 14     -         lda WINT
1126: a4 40     -         ldy TEMPY
1128: c8        -         iny	
1129: 99 d7 14  -         sta rooms,y			//h
112c: a6 3f     -         ldx TEMPX
112e: e8        -         inx
112f: e0 04     -         cpx #ROOM_NUMBER
1131: d0 84     -         bne each
1133: 60        - out:    rts
1134: a2 00     - GET_EXIT_CANDIDATES,init:ldx #0
1136: 8e 37 15  -         stx exit_candidates_length		//reset ...
1139: 0a        -         asl 							//room index in A
113a: 0a        -         asl 							//* 4 and to y	
113b: a8        -         tay								//y offset of room index, datzasize = 4
113c: b9 d8 14  -         lda rooms+1,y					//y
113f: 85 40     -         sta TEMPY
1141: c6 40     -         dec TEMPY						//y-1
1143: 18        -         clc
1144: 79 da 14  -         adc rooms+3,y
1147: 85 53     -         sta TEMPY2						//y+h
1149: b9 d9 14  -         lda rooms+2,y
114c: 85 02     -         sta ZP0	
114e: b9 d7 14  -         lda rooms,y
1151: 85 52     -         sta BV0							//x + i
1153: 84 47     -         sty VAR_A						//save offset of room index
1155: a2 00     -         ldx #00
1157: ad 37 15  - width_loop:lda	exit_candidates_length
115a: 0a        -         asl 							//datasize of candidates = 2
115b: a8        -         tay								//exit_candidates offset in y
115c: a5 52     -         lda	BV0							//x+i
115e: 99 f7 14  -         sta exit_candidates,y	
1161: a9 00     -         lda #0
1163: 99 17 15  -         sta exit_candidate_dirs,y
1166: c8        -         iny
1167: a5 40     -         lda TEMPY						//y-1
1169: 99 f7 14  -         sta exit_candidates,y
116c: a9 ff     -         lda #-1							
116e: 99 17 15  -         sta exit_candidate_dirs,y
1171: c8        -         iny
1172: ee 37 15  -         inc exit_candidates_length
1175: a5 52     -         lda	BV0							//x+i
1177: 99 f7 14  -         sta exit_candidates,y	
117a: a9 00     -         lda #0
117c: 99 17 15  -         sta exit_candidate_dirs,y
117f: c8        -         iny
1180: a5 53     -         lda TEMPY2						//y+h
1182: 99 f7 14  -         sta	exit_candidates,y	
1185: a9 01     -         lda #1
1187: 99 17 15  -         sta exit_candidate_dirs,y
118a: ee 37 15  -         inc exit_candidates_length		
118d: e6 52     -         inc BV0							//i++
118f: e8        -         inx
1190: e4 02     -         cpx ZP0
1192: d0 c3     -         bne width_loop
1194: a4 47     -         ldy VAR_A						//restore offset of room index
1196: b9 d7 14  -         lda rooms,y						//x
1199: 85 3f     -         sta TEMPX
119b: c6 3f     -         dec TEMPX						//x-1
119d: 18        -         clc
119e: 79 d9 14  -         adc rooms+2,y
11a1: 85 4d     -         sta TEMPX2						//x+w
11a3: b9 da 14  -         lda rooms+3,y					//h
11a6: 85 02     -         sta ZP0
11a8: b9 d8 14  -         lda rooms+1,y
11ab: 85 52     -         sta BV0							//y + i
11ad: a2 00     -         ldx #00
11af: ad 37 15  - height_loop:lda	exit_candidates_length
11b2: 0a        -         asl 							//datasize of candidates = 2
11b3: a8        -         tay								//exit_candidates offset in y
11b4: a5 3f     -         lda TEMPX						//x-1
11b6: 99 f7 14  -         sta exit_candidates,y
11b9: a9 ff     -         lda #-1
11bb: 99 17 15  -         sta exit_candidate_dirs,y
11be: c8        -         iny
11bf: a5 52     -         lda BV0							//y+i
11c1: 99 f7 14  -         sta exit_candidates,y
11c4: a9 00     -         lda #0
11c6: 99 17 15  -         sta exit_candidate_dirs,y
11c9: c8        -         iny
11ca: ee 37 15  -         inc exit_candidates_length
11cd: a5 4d     -         lda TEMPX2						//x+w
11cf: 99 f7 14  -         sta exit_candidates,y
11d2: a9 01     -         lda #01
11d4: 99 17 15  -         sta exit_candidate_dirs,y
11d7: c8        -         iny
11d8: a5 52     -         lda BV0							//y+i
11da: 99 f7 14  -         sta exit_candidates,y
11dd: a9 00     -         lda #0
11df: 99 17 15  -         sta exit_candidate_dirs,y
11e2: c8        -         iny
11e3: ee 37 15  -         inc exit_candidates_length
11e6: e6 52     -         inc BV0							//i++
11e8: e8        -         inx
11e9: e4 02     -         cpx ZP0
11eb: d0 c2     -         bne height_loop				
11ed: 60        - out:    rts
11ee: a9 00     - SET_START:lda #0							//room index in A
11f0: 20 34 11  -         jsr GET_EXIT_CANDIDATES
11f3: ad 37 15  -         lda exit_candidates_length
11f6: 85 02     -         sta ZP0
11f8: c6 02     -         dec ZP0
11fa: a5 02     -         lda X	
11fc: 85 fd     -         sta ZP3
11fe: a9 00     -         lda #0
1200: 85 fe     -         sta ZP4
1202: 20 9b 09  -         jsr rnd_X
1205: a5 14     -         lda WINT
1207: 0a        -         asl 
1208: a8        -         tay
1209: b9 f7 14  -         lda exit_candidates,y
120c: 8d b0 14  -         sta maze_start
120f: c8        -         iny
1210: b9 f7 14  -         lda exit_candidates,y
1213: 8d b1 14  -         sta maze_start+1
1216: 60        - out:    rts
1217: a2 01     - CONNECT_ROOMS:ldx #01												//start with index 1, 0 should be already connected
1219: 86 0a     - each:   stx GLOBAL_X											//save x
121b: 8a        -         txa													//GET_EXIT_CANDIDATES expects room index in A
121c: 20 34 11  -         jsr GET_EXIT_CANDIDATES								//trashes TEMPX
121f: ac 37 15  - get_one:ldy exit_candidates_length
1222: 88        -         dey
1223: 84 02     -         sty ZP0
1225: a5 02     -         lda X	
1227: 85 fd     -         sta ZP3
1229: a9 00     -         lda #0
122b: 85 fe     -         sta ZP4
122d: 20 9b 09  -         jsr rnd_X
1230: a5 14     -         lda WINT											//random index
1232: 0a        -         asl 
1233: a8        -         tay													//offset in y
1234: b9 f7 14  -         lda exit_candidates,y
1237: 8d b2 14  -         sta grid_pointer									//bridge
123a: b9 17 15  -         lda exit_candidate_dirs,y
123d: 8d b4 14  -         sta direction_pointer								//dir to test
1240: c8        -         iny
1241: b9 f7 14  -         lda exit_candidates,y
1244: 8d b3 14  -         sta grid_pointer+1
1247: b9 17 15  -         lda exit_candidate_dirs,y
124a: 8d b5 14  -         sta direction_pointer+1							
124d: ad b2 14  -         lda grid_pointer
1250: 18        -         clc
1251: 6d b4 14  -         adc direction_pointer
1254: 8d b6 14  -         sta test_pointer
1257: ad b3 14  -         lda grid_pointer+1
125a: 18        -         clc
125b: 6d b5 14  -         adc direction_pointer+1
125e: 8d b7 14  -         sta test_pointer+1
1261: ad ae 14  -         lda X
1264: 85 fb     -         sta Y
1266: ad af 14  -         lda X + 1
1269: 85 fc     -         sta Y + 1
126b: a9 00     -         lda #0
126d: 85 fe     -         sta ZP4				
126f: ad b7 14  -         lda grid+1		
1272: 85 fd     -         sta ZP3
1274: a0 03     -         ldy #03
1276: 06 fd     - mul8:   asl X
1278: 26 fe     -         rol X+1	
127a: 88        -         dey
127b: d0 f9     -         bne mul8
127d: a5 fb     -         lda X
127f: 18        -         clc
1280: 65 fd     -         adc Y
1282: 85 fb     -         sta X
1284: 90 02     -         bcc skip
1286: e6 fc     -         inc X+1
1288: a5 fc     - skip:   lda X+1
128a: 18        -         clc
128b: 65 fe     -         adc Y+1
128d: 85 fc     -         sta X+1	
128f: a0 02     -         ldy #02	
1291: 06 fd     - mul32:  asl X
1293: 26 fe     -         rol X+1	
1295: 88        -         dey
1296: d0 f9     -         bne mul32
1298: a5 fb     -         lda X
129a: 18        -         clc
129b: 65 fd     -         adc Y
129d: 85 fb     -         sta X
129f: 90 02     -         bcc skip
12a1: e6 fc     -         inc X+1
12a3: a5 fc     - skip:   lda X+1
12a5: 18        -         clc
12a6: 65 fe     -         adc Y+1
12a8: 85 fc     -         sta X+1	
12aa: a5 fb     -         lda X
12ac: 18        -         clc
12ad: 6d b6 14  -         adc y	
12b0: 85 fb     -         sta X
12b2: 90 02     -         bcc out+2
12b4: e6 fc     - out:    inc X+1
12b6: a0 00     -         ldy #0
12b8: b1 fb     -         lda (ZP1),y
12ba: c9 20     -         cmp #DOT											//is it dot
12bc: f0 32     -         beq check_connections								//yes, check connections
12be: a5 14     -         lda WINT											//random index was still in WINT
12c0: 85 47     -         sta VAR_A											//store index in VAR_A
12c2: ad 37 15  -         lda X
12c5: 85 48     -         sta Y
12c7: a9 f7     -         lda #<addr
12c9: 85 43     -         sta X
12cb: a9 14     -         lda #>addr
12cd: 85 44     -         sta X+1
12cf: a9 02     -         lda #data_size
12d1: 85 49     -         sta VAR_C
12d3: 20 ce 08  -         jsr SPLICE
12d6: ad 37 15  -         lda X
12d9: 85 48     -         sta Y
12db: a9 17     -         lda #<addr
12dd: 85 43     -         sta X
12df: a9 15     -         lda #>addr
12e1: 85 44     -         sta X+1
12e3: a9 02     -         lda #data_size
12e5: 85 49     -         sta VAR_C
12e7: 20 ce 08  -         jsr SPLICE
12ea: ce 37 15  -         dec exit_candidates_length							//exit_candidates_length--
12ed: 4c 1f 12  -         jmp get_one											//try another
12f0: ad b2 14  - check_connections:lda bridge
12f3: 85 50     -         sta BV7
12f5: ad b3 14  -         lda bridge+1
12f8: 85 51     -         sta BV8
12fa: a9 00     -         lda #0
12fc: 85 4a     -         sta VAR_D
12fe: 20 70 13  -         jsr CHECK_CONNECTION
1301: a5 4a     -         lda VAR_D
1303: c9 02     -         cmp #02												//exactly two directions required for bridge
1305: f0 03     -         beq yes												//yes, paint
1307: 4c 1f 12  -         jmp get_one											//not ok, get another
130a: ad ae 14  - yes:    lda X
130d: 85 fb     -         sta Y
130f: ad af 14  -         lda X + 1
1312: 85 fc     -         sta Y + 1
1314: a9 00     -         lda #0
1316: 85 fe     -         sta ZP4				
1318: ad b3 14  -         lda grid+1		
131b: 85 fd     -         sta ZP3
131d: a0 03     -         ldy #03
131f: 06 fd     - mul8:   asl X
1321: 26 fe     -         rol X+1	
1323: 88        -         dey
1324: d0 f9     -         bne mul8
1326: a5 fb     -         lda X
1328: 18        -         clc
1329: 65 fd     -         adc Y
132b: 85 fb     -         sta X
132d: 90 02     -         bcc skip
132f: e6 fc     -         inc X+1
1331: a5 fc     - skip:   lda X+1
1333: 18        -         clc
1334: 65 fe     -         adc Y+1
1336: 85 fc     -         sta X+1	
1338: a0 02     -         ldy #02	
133a: 06 fd     - mul32:  asl X
133c: 26 fe     -         rol X+1	
133e: 88        -         dey
133f: d0 f9     -         bne mul32
1341: a5 fb     -         lda X
1343: 18        -         clc
1344: 65 fd     -         adc Y
1346: 85 fb     -         sta X
1348: 90 02     -         bcc skip
134a: e6 fc     -         inc X+1
134c: a5 fc     - skip:   lda X+1
134e: 18        -         clc
134f: 65 fe     -         adc Y+1
1351: 85 fc     -         sta X+1	
1353: a5 fb     -         lda X
1355: 18        -         clc
1356: 6d b2 14  -         adc y	
1359: 85 fb     -         sta X
135b: 90 02     -         bcc out+2
135d: e6 fc     - out:    inc X+1
135f: a9 20     -         lda #DOT
1361: a0 00     -         ldy #0
1363: 91 fb     -         sta (ZP1),y
1365: a6 0a     -         ldx GLOBAL_X										//restore x
1367: e8        -         inx													//next room
1368: e0 04     -         cpx #ROOM_NUMBER
136a: f0 03     -         beq out
136c: 4c 19 12  -         jmp each
136f: 60        - out:    rts
1370: a2 03     - CHECK_CONNECTION:ldx #03						//iterate over directions
1372: 8a        - each:   txa
1373: 0a        -         asl
1374: a8        -         tay							//offset in y
1375: a5 50     -         lda BV7
1377: 18        -         clc
1378: 79 cb 09  -         adc BASIC_DIRS,y
137b: 85 4e     -         sta BV9						//test.x
137d: c8        -         iny
137e: a5 51     -         lda BV8
1380: 18        -         clc
1381: 79 cb 09  -         adc BASIC_DIRS,y
1384: 85 4f     -         sta BV10					//test.y
1386: ad ae 14  -         lda X
1389: 85 fb     -         sta Y
138b: ad af 14  -         lda X + 1
138e: 85 fc     -         sta Y + 1
1390: a9 00     -         lda #0
1392: 85 fe     -         sta ZP4				
1394: a5 4f     -         lda grid+1		
1396: 85 fd     -         sta ZP3
1398: a0 03     -         ldy #03
139a: 06 fd     - mul8:   asl X
139c: 26 fe     -         rol X+1	
139e: 88        -         dey
139f: d0 f9     -         bne mul8
13a1: a5 fb     -         lda X
13a3: 18        -         clc
13a4: 65 fd     -         adc Y
13a6: 85 fb     -         sta X
13a8: 90 02     -         bcc skip
13aa: e6 fc     -         inc X+1
13ac: a5 fc     - skip:   lda X+1
13ae: 18        -         clc
13af: 65 fe     -         adc Y+1
13b1: 85 fc     -         sta X+1	
13b3: a0 02     -         ldy #02	
13b5: 06 fd     - mul32:  asl X
13b7: 26 fe     -         rol X+1	
13b9: 88        -         dey
13ba: d0 f9     -         bne mul32
13bc: a5 fb     -         lda X
13be: 18        -         clc
13bf: 65 fd     -         adc Y
13c1: 85 fb     -         sta X
13c3: 90 02     -         bcc skip
13c5: e6 fc     -         inc X+1
13c7: a5 fc     - skip:   lda X+1
13c9: 18        -         clc
13ca: 65 fe     -         adc Y+1
13cc: 85 fc     -         sta X+1	
13ce: a5 fb     -         lda X
13d0: 18        -         clc
13d1: 65 4e     -         adc y	
13d3: 85 fb     -         sta X
13d5: 90 02     -         bcc out+2
13d7: e6 fc     - out:    inc X+1
13d9: a0 00     -         ldy #0
13db: b1 fb     -         lda (ZP1),y
13dd: c9 20     -         cmp #DOT
13df: d0 02     -         bne skip
13e1: e6 4a     -         inc VAR_D
13e3: ca        - skip:   dex
13e4: 10 8c     -         bpl each
13e6: 60        - out:    rts
13e7: 20 77 0f  - MAZE:   jsr STORE_DEAD_END							//start grid might remain DE!!
13ea: 20 f6 09  - outer,P_LOOP:jsr MAZE_DOT
13ed: 20 05 0b  -         jsr POINTERS_FROM_START
13f0: 20 3d 0b  -         jsr FILTER_IF_OUT
13f3: a9 20     -         lda #value
13f5: 85 52     -         sta BV0
13f7: 20 a0 0b  -         jsr FILTER_IF_DOT
13fa: a9 20     -         lda #test
13fc: 85 52     -         sta BV0
13fe: 20 c2 0c  -         jsr FILTER_IF_NEXT_PRIMARY
1401: 20 08 0e  -         jsr FILTER_SIDE_PROXIMIY
1404: ad c8 14  -         lda candidates_length						//check how many we have
1407: c9 00     -         cmp #00										//if zero break;
1409: d0 06     -         bne more									//more than 0
140b: 20 77 0f  -         jsr STORE_DEAD_END							//store dead end
140e: 4c 7b 14  -         jmp S_LOOP
1411: c9 02     - more:   cmp #02										//if it is two or more
1413: b0 05     -         bcs then									//go to else/then
1415: a9 00     -         lda #0										//otherwise, index->0 in A									
1417: 4c 41 14  -         jmp skip_else
141a: ad d2 14  - then:   lda bias_counter
141d: c9 00     -         cmp #00
141f: f0 07     -         beq select_random							//use random, not bias
1421: 20 57 0f  -         jsr CHECK_BIAS								//index in a, or -1 if not found
1424: c9 ff     -         cmp #-1
1426: d0 19     -         bne skip_else								//not -1, select this direction
1428: a9 00     - select_random:lda #0										//reset bias counter when selection is random	
142a: 8d d2 14  -         sta bias_counter
142d: ad c8 14  -         lda candidates_length						//random index (, candidates length-1)
1430: aa        -         tax
1431: ca        -         dex
1432: 86 02     -         stx ZP0
1434: a5 02     -         lda X	
1436: 85 fd     -         sta ZP3
1438: a9 00     -         lda #0
143a: 85 fe     -         sta ZP4
143c: 20 9b 09  -         jsr rnd_X
143f: a5 14     -         lda WINT
1441: 85 02     - skip_else:sta ZP0										//store index in ZP0	
1443: 0a        -         asl 										//datasize=2	
1444: a8        -         tay											//offset in y
1445: b9 b8 14  -         lda candidates,y
1448: 8d b0 14  -         sta maze_start
144b: b9 c0 14  -         lda candidates_vectors,y
144e: 8d d3 14  -         sta bias_direction
1451: c8        -         iny
1452: b9 b8 14  -         lda candidates,y
1455: 8d b1 14  -         sta maze_start+1
1458: b9 c0 14  -         lda candidates_vectors,y
145b: 8d d4 14  -         sta bias_direction+1
145e: ee d2 14  -         inc bias_counter
1461: ad d2 14  -         lda bias_counter
1464: cd d1 14  -         cmp bias
1467: d0 05     -         bne out+3
1469: a9 00     -         lda #00
146b: 8d d2 14  - out:    sta bias_counter
146e: ad c8 14  -         lda candidates_length
1471: c9 02     -         cmp #02										//if there are 2 or more, selected has not been discarded yet
1473: 90 03     -         bcc repeat_P								//no, repeat loop
1475: 20 51 0c  -         jsr PUSH_REST_ON_STACK													
1478: 4c ea 13  - repeat_P:jmp P_LOOP
147b: a5 71     - S_LOOP: lda STKPTR1
147d: c9 00     -         cmp #<STACK
147f: d0 09     -         bne cont
1481: a5 72     -         lda STKPTR2
1483: c9 c0     -         cmp #>STACK
1485: d0 03     -         bne cont
1487: 4c ad 14  -         jmp quit									//stack pointer == STACK, stack is empty
148a: 20 21 0f  - cont:   jsr CANDIDATE_FROM_STACK					//take on grid an its direction from stack
148d: a9 20     -         lda #test
148f: 85 52     -         sta BV0
1491: 20 c2 0c  -         jsr FILTER_IF_NEXT_PRIMARY
1494: 20 08 0e  -         jsr FILTER_SIDE_PROXIMIY					//in terms of proximity
1497: ad c8 14  -         lda candidates_length						//check if it is still ok
149a: c9 00     -         cmp #00										//if zero break; 
149c: f0 dd     -         beq S_LOOP									//no, find another
149e: ad b8 14  -         lda candidates								//set it to maze_start
14a1: 8d b0 14  -         sta maze_start
14a4: ad b9 14  -         lda candidates+1
14a7: 8d b1 14  -         sta maze_start+1
14aa: 4c ea 13  -         jmp P_LOOP									//make next branch
14ad: 60        - quit:   rts

[MAZE Memory]
14ae: 04 00     - MAZE_memory,maze_memory_alloc:.word $0004 					//screen by default
14b0: 00 00     - maze_start:.word 0
14b2: 00 00     - grid_pointer:.word 0
14b4: 00 00     - direction_pointer:.word 0
14b6: 00 00     - test_pointer:.word 0
14b8: 00 00     - candidates:.fill 2,0
14ba: 00 00     -         .fill 2,0
14bc: 00 00     -         .fill 2,0
14be: 00 00     -         .fill 2,0
14c0: 00 00     - candidates_vectors:.fill 2,0
14c2: 00 00     -         .fill 2,0
14c4: 00 00     -         .fill 2,0
14c6: 00 00     -         .fill 2,0
14c8: 00        - candidates_length:.byte 0
14c9: 00 00     - proximity_vectors:.fill 2,0
14cb: 00 00     -         .fill 2,0
14cd: 00 00     -         .fill 2,0
14cf: 00 00     -         .fill 2,0
14d1: 02        - bias:   .byte 2
14d2: 00        - bias_counter:.byte 0
14d3: 00 00     - bias_direction:.word 0
14d5: 00        - DE_counter:.byte 0
14d6: 00        - REM_DE_counter:.byte 0
14d7: 00 00 00 00                                      - rooms:  .fill 4,0
14db: 00 00 00 00                                      -         .fill 4,0
14df: 00 00 00 00                                      -         .fill 4,0
14e3: 00 00 00 00                                      -         .fill 4,0
14e7: 03 0e 03 06                                      - room_def:.byte 3, 14, 3, 6
14eb: 17 21 03 06                                      -         .byte 23, 33, 3, 6
14ef: 03 0e 0e 11                                      -         .byte 3, 14, 14, 17
14f3: 17 21 0e 11                                      -         .byte 23, 33, 14, 17
14f7: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - exit_candidates:.fill MAX_W * 4 * 2, 0
1507: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
1517: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  - exit_candidate_dirs:.fill MAX_W * 4 * 2, 0
1527: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
1537: 00        - exit_candidates_length:.byte 0

[Subroutines]
1538: ad 7b 15  - subs,irqcode:lda modeflag
153b: f0 03     -         beq mode1
153d: 4c 55 15  -         jmp mode2
1540: a9 01     - mode1:  lda #$01
1542: 8d 7b 15  -         sta modeflag
1545: a9 00     -         lda #BLACK
1547: 8d 20 d0  -         sta BORDER
154a: a9 32     -         lda #startRaster
154c: 8d 12 d0  -         sta RASTER_COUNTER
154f: 0e 19 d0  -         asl INTERRUPT_REQUEST_REGISTER
1552: 4c 31 ea  -         jmp IRQOUT
1555: a9 00     - mode2:  lda #$00
1557: 8d 7b 15  -         sta modeflag
155a: a9 0f     -         lda #LIGHTGREY
155c: 8d 20 d0  -         sta BORDER
155f: a9 fa     -         lda #endRaster
1561: 8d 12 d0  -         sta RASTER_COUNTER
1564: 0e 19 d0  -         asl INTERRUPT_REQUEST_REGISTER
1567: 68        -         pla
1568: a8        -         tay
1569: 68        -         pla
156a: aa        -         tax
156b: 68        -         pla
156c: 40        -         rti
156d: a2 00     - set_bricks:ldx #00
156f: bd 7e 15  - copy:   lda brick_data,x
1572: 9d 00 30  -         sta char_offset,x
1575: e8        -         inx
1576: e0 08     -         cpx #08
1578: d0 f5     -         bne copy
157a: 60        -         rts

[Data]
157b: 00        - text,data,modeflag:.byte 0
157c: 00        - startX: .byte 0
157d: 00        - startY: .byte 0
157e: dd c1 38 bb bb 83 1c dd                          - brick_data:.byte $dd,$c1,$38,$bb,$bb,$83,$1c,$dd
