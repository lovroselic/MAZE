******************************* Segment: Default *******************************
[Header]
0801: 0c 08     -         .word bend
0803: 0d 00     -         .byte $0d, $00				//;line number
0805: 9e        -         .byte $9E					//;SYS
0806: 20        -         .byte $20					//;space
0807: 32 30 36 34                                      -         .byte $32,$30,$36,$34		//;start 2064
080b: 00        -         .byte $00					//;end of line
080c: 00 00     - bend:   .byte $00, $00				//;end of basic program

[Main]
0810: 78        -         sei							//set interrupt
0811: a9 7f     -         lda #$7f
0813: 8d 0d dc  -         sta CIA_ICR
0816: 8d 0d dd  -         sta CIA2_ICR
0819: ad 0d dc  -         lda CIA_ICR
081c: ad 0d dd  -         lda CIA2_ICR
081f: ad 1a d0  -         lda INTERRUPT_MASK_REGISTER	
0822: 09 01     -         ora #$01
0824: 8d 1a d0  -         sta INTERRUPT_MASK_REGISTER
0827: ad 11 d0  -         lda CONTROL_REGISTER1
082a: 29 7f     -         and #$7f
082c: 8d 11 d0  -         sta CONTROL_REGISTER1
082f: a9 32     -         lda #startRaster
0831: 8d 12 d0  -         sta RASTER_COUNTER
0834: a9 e7     -         lda #<address
0836: 8d 14 03  -         sta IRQVEC
0839: a9 0e     -         lda #>address
083b: 8d 15 03  -         sta	IRQVEC+1
083e: 58        -         cli
083f: d8        - begin:  cld
0840: a9 26     - init:   lda #<end	
0842: 85 fd     -         sta ZP3
0844: a9 00     -         lda #>end
0846: 85 fe     -         sta ZP4
0848: a9 01     -         lda #<start
084a: 85 fb     -         sta ZP1
084c: a9 00     -         lda #>start
084e: 85 fc     -         sta ZP2
0850: 20 29 09  -         jsr rnd_XY
0853: a5 14     -         lda X
0855: 8d 1d 0f  -         sta Y
0858: a9 17     -         lda #<end	
085a: 85 fd     -         sta ZP3
085c: a9 00     -         lda #>end
085e: 85 fe     -         sta ZP4
0860: a9 01     -         lda #<start
0862: 85 fb     -         sta ZP1
0864: a9 00     -         lda #>start
0866: 85 fc     -         sta ZP2
0868: 20 29 09  -         jsr rnd_XY
086b: a5 14     -         lda X
086d: 8d 1e 0f  -         sta Y
0870: a9 00     -         lda #<addr
0872: 8d c1 0e  -         sta X
0875: a9 04     -         lda #>addr
0877: 8d c2 0e  -         sta X+1
087a: ad 1d 0f  -         lda X
087d: 8d c3 0e  -         sta Y
0880: ad 1e 0f  -         lda X + 1
0883: 8d c4 0e  -         sta Y + 1
0886: a9 00     -         lda #<addr
0888: 85 71     -         sta X
088a: a9 c0     -         lda #>addr
088c: 85 72     -         sta X+1
088e: 20 35 0e  -         jsr MAZE
0891: a5 c5     - end,key:lda LSTX		//get character in A
0893: c9 40     -         cmp #64			//no key
0895: f0 fa     -         beq key
0897: 60        -         rts

[Imports]
0898: 20 d2 ff  - imports,printSequence:jsr CHROUT
089b: ca        -         dex
089c: d0 fa     -         bne printSequence
089e: 60        -         rts
089f: 86 fb     - printString:stx ZP1			//lo
08a1: 84 fc     -         sty	ZP2			//hi
08a3: a0 00     - next:   ldy #$00
08a5: b1 fb     -         lda (ZP1),y		//load character
08a7: c9 00     -         cmp #$00
08a9: f0 0d     -         beq	out			//null terminator
08ab: 20 d2 ff  -         jsr CHROUT
08ae: 18        -         clc
08af: e6 fb     -         inc	ZP1
08b1: d0 f0     -         bne	next
08b3: e6 fc     -         inc ZP2
08b5: 4c a3 08  -         jmp next
08b8: 60        - out:    rts
08b9: 86 fb     - lenString:stx ZP1			//lo
08bb: 84 fc     -         sty	ZP2			//hi
08bd: a0 00     -         ldy #$00		
08bf: 84 fd     -         sty ZP3			//counter
08c1: b1 fb     - next:   lda (ZP1),y		//load character
08c3: c9 00     -         cmp #$00
08c5: f0 04     -         beq	out			//null terminator
08c7: c8        -         iny
08c8: 4c c1 08  -         jmp next
08cb: 98        - out:    tya
08cc: 60        -         rts
08cd: c6 48     - SPLICE: dec VAR_B								//array length - 1, last index
08cf: a4 47     -         ldy VAR_A								//index
08d1: c4 48     - loop:   cpy VAR_B								//stop if index
08d3: 10 35     -         bpl out 								//equal or greater than last index
08d5: a2 00     -         ldx #0									//number of properties (data_size), start from 0
08d7: c8        - each:   iny		
08d8: 84 40     -         sty TEMPY
08da: a5 49     -         lda	VAR_C 								//data size
08dc: 20 0b 09  -         jsr MUL_Y_A
08df: 84 02     -         sty ZP0
08e1: 8a        -         txa
08e2: 18        -         clc
08e3: 65 02     -         adc ZP0
08e5: a8        -         tay
08e6: b1 43     -         lda (BV1),y
08e8: 85 41     -         sta TEMPA1
08ea: a4 40     -         ldy TEMPY
08ec: 88        -         dey
08ed: 84 40     -         sty TEMPY
08ef: a5 49     -         lda	VAR_C 								//data size
08f1: 20 0b 09  -         jsr MUL_Y_A
08f4: 84 02     -         sty ZP0
08f6: 8a        -         txa
08f7: 18        -         clc
08f8: 65 02     -         adc ZP0
08fa: a8        -         tay
08fb: a5 41     -         lda TEMPA1
08fd: 91 43     -         sta (BV1),y
08ff: a4 40     -         ldy TEMPY
0901: e8        -         inx
0902: e4 49     -         cpx VAR_C								//all props? less than VAR_C ?
0904: 90 d1     -         bcc each
0906: c8        -         iny
0907: 4c d1 08  -         jmp loop
090a: 60        - out:    rts
090b: c0 00     - MUL_Y_A,multiply:cpy #00
090d: f0 18     -         beq end
090f: 88        -         dey
0910: 8c 1d 09  -         sty mod+1
0913: 4a        -         lsr
0914: 85 02     -         sta ZP0
0916: a9 00     -         lda #00
0918: a0 08     -         ldy #$08
091a: 90 02     - loop:   bcc skip
091c: 69 00     - mod:    adc #0
091e: 6a        - skip:   ror
091f: 66 02     -         ror ZP0
0921: 88        -         dey
0922: d0 f6     -         bne loop
0924: a4 02     -         ldy ZP0
0926: 60        -         rts
0927: 98        - end:    tya
0928: 60        -         rts

[SYSTEM_data]
0929: e6 fd     - SYS_data,rnd_XY:inc ZP3
092b: d0 02     -         bne skip1
092d: e6 fe     -         inc ZP4
092f: a5 fd     - skip1:  lda ZP3
0931: 38        -         sec
0932: e5 fb     -         sbc ZP1
0934: 85 fd     -         sta ZP3
0936: a5 fe     -         lda ZP4
0938: e5 fc     -         sbc ZP2
093a: 85 fe     -         sta ZP4			
093c: a4 fd     - toFloat:ldy ZP3
093e: a5 fe     -         lda ZP4
0940: 20 91 b3  -         jsr GIVAYF 					//A(h),Y(L) - FAC
0943: a2 95     -         ldx #<flt
0945: a0 09     -         ldy #>flt
0947: 20 d4 bb  -         jsr MOVMF					//store FAC to flt		
094a: a9 00     -         lda #$00					//RND(0)
094c: 20 9a e0  -         jsr RND						//$E09A
094f: a9 95     -         lda #<flt
0951: a0 09     -         ldy #>flt
0953: 20 28 ba  -         jsr FMULT					//Multiplies a number from RAM (A,y) and FAC	
0956: 20 cc bc  -         jsr FAINT					//to integer
0959: 20 bf b1  -         jsr AYINT					//fac to signed int HI $64 LO $65
095c: a5 65     -         lda $65						//FAC mantissa lo
095e: 18        -         clc
095f: 65 fb     -         adc ZP1						//add number to start	
0961: 85 14     -         sta WINT
0963: a5 64     -         lda $64						//FAC mantissa hi
0965: 65 fc     -         adc ZP2
0967: 85 15     -         sta WINT+1
0969: 60        - over:   rts			
096a: e6 fd     - rnd_X:  inc ZP3
096c: d0 02     -         bne toFloat
096e: e6 fe     -         inc ZP4	
0970: a4 fd     - toFloat:ldy ZP3
0972: a5 fe     -         lda ZP4
0974: 20 91 b3  -         jsr GIVAYF 					//A(h),Y(L) - FAC
0977: a2 95     -         ldx #<flt
0979: a0 09     -         ldy #>flt
097b: 20 d4 bb  -         jsr MOVMF					//store FAC to flt		
097e: a9 00     -         lda #$00					//get actual RND(0)
0980: 20 9a e0  -         jsr RND						//$E09A
0983: a9 95     -         lda #<flt
0985: a0 09     -         ldy #>flt
0987: 20 28 ba  -         jsr FMULT					//Multiplies a number from RAM (A,y) and FAC	
098a: 20 cc bc  -         jsr FAINT					//to integer
098d: 20 bf b1  -         jsr AYINT					//fac to signed int HI $64 LO $65
0990: a5 65     -         lda $65						//FAC mantissa lo
0992: 85 14     -         sta WINT					
0994: 60        -         rts			

[Data RND]
0995: 00 00 00 00 00                                   - dataRND,flt:.byte 0,0,0,0,0

[Grid_Constants]
099a: 00 ff     - Grid_Constants,BASIC_DIRS,UP:.byte 	0, -1
099c: 00 01     - DOWN:   .byte 	0, 1
099e: ff 00     - LEFT:   .byte	-1, 0
09a0: 01 00     - RIGHT:  .byte 	1,0
09a2: ff ff     - PROX_TEMPLATE:.byte 	-1, -1
09a4: 01 01     -         .byte 	1, 1
09a6: ff ff     -         .byte 	-1, -1
09a8: 01 01     -         .byte 	1, 1
09aa: ad c1 0e  - MAZE_FILL:lda X
09ad: 85 fb     -         sta Y
09af: ad c2 0e  -         lda X + 1
09b2: 85 fc     -         sta Y + 1
09b4: a9 e0     -         lda	#WALL
09b6: a2 04     -         ldx #4
09b8: a0 00     - block:  ldy #0
09ba: 91 fb     - fill:   sta (ZP1),y
09bc: c8        -         iny
09bd: d0 fb     -         bne fill
09bf: e6 fc     -         inc ZP2
09c1: ca        -         dex
09c2: d0 f4     -         bne block
09c4: 60        -         rts
09c5: ad c1 0e  - MAZE_DOT:lda X
09c8: 85 fb     -         sta Y
09ca: ad c2 0e  -         lda X + 1
09cd: 85 fc     -         sta Y + 1
09cf: a9 00     -         lda #0
09d1: 85 fe     -         sta ZP4				
09d3: ad c4 0e  -         lda grid+1		
09d6: 85 fd     -         sta ZP3
09d8: a0 03     -         ldy #03
09da: 06 fd     - mul8:   asl X
09dc: 26 fe     -         rol X+1	
09de: 88        -         dey
09df: d0 f9     -         bne mul8
09e1: 18        -         clc
09e2: a5 fb     -         lda X
09e4: 65 fd     -         adc Y
09e6: 85 fb     -         sta X
09e8: 90 02     -         bcc skip
09ea: e6 fc     -         inc X+1
09ec: 18        - skip:   clc
09ed: a5 fc     -         lda X+1
09ef: 65 fe     -         adc Y+1
09f1: 85 fc     -         sta X+1	
09f3: a0 02     -         ldy #02	
09f5: 06 fd     - mul32:  asl X
09f7: 26 fe     -         rol X+1	
09f9: 88        -         dey
09fa: d0 f9     -         bne mul32
09fc: 18        -         clc
09fd: a5 fb     -         lda X
09ff: 65 fd     -         adc Y
0a01: 85 fb     -         sta X
0a03: 90 02     -         bcc skip
0a05: e6 fc     -         inc X+1
0a07: 18        - skip:   clc
0a08: a5 fc     -         lda X+1
0a0a: 65 fe     -         adc Y+1
0a0c: 85 fc     -         sta X+1	
0a0e: 18        -         clc
0a0f: a5 fb     -         lda X
0a11: 6d c3 0e  -         adc y	
0a14: 85 fb     -         sta X
0a16: 90 02     -         bcc out+2
0a18: e6 fc     - out:    inc X+1
0a1a: a9 20     -         lda #DOT
0a1c: a0 00     -         ldy #0
0a1e: 91 fb     -         sta (ZP1),y
0a20: 60        -         rts
0a21: a9 cb     - POINTERS_FROM_START:lda #<addr
0a23: 85 45     -         sta X
0a25: a9 0e     -         lda #>addr
0a27: 85 46     -         sta X+1
0a29: a9 9a     -         lda #<addr
0a2b: 85 fd     -         sta X
0a2d: a9 09     -         lda #>addr
0a2f: 85 fe     -         sta X+1
0a31: a2 03     -         ldx #03
0a33: 8a        - add:    txa
0a34: 0a        -         asl
0a35: a8        -         tay		
0a36: 18        -         clc
0a37: ad c3 0e  -         lda maze_start
0a3a: 71 fd     -         adc (ZP3),y
0a3c: 91 45     -         sta (BV3),y
0a3e: c8        -         iny
0a3f: 18        -         clc
0a40: ad c4 0e  -         lda maze_start+1
0a43: 71 fd     -         adc (ZP3),y
0a45: 91 45     -         sta (BV3),y
0a47: ca        -         dex
0a48: 10 e9     -         bpl add
0a4a: a9 d3     -         lda #<addr
0a4c: 85 4b     -         sta X
0a4e: a9 0e     -         lda #>addr
0a50: 85 4c     -         sta X+1
0a52: a2 03     -         ldx #03
0a54: 8a        - copy:   txa
0a55: 0a        -         asl
0a56: a8        -         tay	
0a57: b1 fd     -         lda (ZP3),y
0a59: 91 4b     -         sta (BV5),y
0a5b: c8        -         iny
0a5c: b1 fd     -         lda (ZP3),y
0a5e: 91 4b     -         sta (BV5),y
0a60: ca        -         dex
0a61: 10 f1     -         bpl copy
0a63: a9 04     -         lda #04
0a65: 8d db 0e  -         sta candidates_length
0a68: 60        -         rts
0a69: ad db 0e  - FILTER_IF_OUT:lda candidates_length
0a6c: c9 01     -         cmp #1
0a6e: b0 01     -         bcs start
0a70: 60        -         rts
0a71: a9 cb     - start:  lda #<addr
0a73: 85 45     -         sta X
0a75: a9 0e     -         lda #>addr
0a77: 85 46     -         sta X+1
0a79: ae db 0e  -         ldx candidates_length				//number of grids yet to check
0a7c: ca        -         dex
0a7d: 8a        - each:   txa
0a7e: 0a        -         asl
0a7f: a8        -         tay
0a80: 18        -         clc
0a81: b1 45     -         lda (BV3),y	
0a83: c9 27     -         cmp #MAX_X+1
0a85: b0 17     -         bcs shift
0a87: c9 01     -         cmp #MIN_X
0a89: 90 13     -         bcc shift
0a8b: c8        -         iny
0a8c: 18        -         clc
0a8d: b1 45     -         lda (BV3),y
0a8f: c9 18     -         cmp #MAX_Y+1
0a91: b0 0b     -         bcs shift
0a93: c9 01     -         cmp #MIN_Y
0a95: 90 07     -         bcc shift
0a97: ca        - cont:   dex
0a98: 30 03     -         bmi out
0a9a: 4c 7d 0a  -         jmp each
0a9d: 60        - out:    rts
0a9e: 86 3f     - shift:  stx TEMPX									//save x							
0aa0: 86 47     -         stx VAR_A									//set index to VAR_A
0aa2: ad db 0e  -         lda X
0aa5: 85 48     -         sta Y
0aa7: a9 cb     -         lda #<addr
0aa9: 85 43     -         sta X
0aab: a9 0e     -         lda #>addr
0aad: 85 44     -         sta X+1
0aaf: a9 02     -         lda #data_size
0ab1: 85 49     -         sta VAR_C
0ab3: 20 cd 08  -         jsr SPLICE
0ab6: ad db 0e  -         lda X
0ab9: 85 48     -         sta Y
0abb: a9 d3     -         lda #<addr
0abd: 85 43     -         sta X
0abf: a9 0e     -         lda #>addr
0ac1: 85 44     -         sta X+1
0ac3: a9 02     -         lda #data_size
0ac5: 85 49     -         sta VAR_C
0ac7: 20 cd 08  -         jsr SPLICE
0aca: ce db 0e  -         dec candidates_length						//dec array length
0acd: a6 3f     -         ldx TEMPX									//restore x
0acf: 4c 97 0a  -         jmp cont									//return to loop
0ad2: ad db 0e  - FILTER_IF_DOT:lda candidates_length
0ad5: c9 01     -         cmp #1
0ad7: b0 01     -         bcs start
0ad9: 60        -         rts
0ada: a9 cb     - start:  lda #<addr
0adc: 85 45     -         sta X
0ade: a9 0e     -         lda #>addr
0ae0: 85 46     -         sta X+1
0ae2: ae db 0e  -         ldx candidates_length						//number of grids yet to check
0ae5: ca        -         dex
0ae6: 8a        - each:   txa
0ae7: 0a        -         asl
0ae8: a8        -         tay
0ae9: b1 45     -         lda (BV3),y
0aeb: 8d c5 0e  -         sta grid_pointer
0aee: c8        -         iny
0aef: b1 45     -         lda (BV3),y
0af1: 8d c6 0e  -         sta grid_pointer+1
0af4: ad c1 0e  -         lda X
0af7: 85 fb     -         sta Y
0af9: ad c2 0e  -         lda X + 1
0afc: 85 fc     -         sta Y + 1
0afe: a9 00     -         lda #0
0b00: 85 fe     -         sta ZP4				
0b02: ad c6 0e  -         lda grid+1		
0b05: 85 fd     -         sta ZP3
0b07: a0 03     -         ldy #03
0b09: 06 fd     - mul8:   asl X
0b0b: 26 fe     -         rol X+1	
0b0d: 88        -         dey
0b0e: d0 f9     -         bne mul8
0b10: 18        -         clc
0b11: a5 fb     -         lda X
0b13: 65 fd     -         adc Y
0b15: 85 fb     -         sta X
0b17: 90 02     -         bcc skip
0b19: e6 fc     -         inc X+1
0b1b: 18        - skip:   clc
0b1c: a5 fc     -         lda X+1
0b1e: 65 fe     -         adc Y+1
0b20: 85 fc     -         sta X+1	
0b22: a0 02     -         ldy #02	
0b24: 06 fd     - mul32:  asl X
0b26: 26 fe     -         rol X+1	
0b28: 88        -         dey
0b29: d0 f9     -         bne mul32
0b2b: 18        -         clc
0b2c: a5 fb     -         lda X
0b2e: 65 fd     -         adc Y
0b30: 85 fb     -         sta X
0b32: 90 02     -         bcc skip
0b34: e6 fc     -         inc X+1
0b36: 18        - skip:   clc
0b37: a5 fc     -         lda X+1
0b39: 65 fe     -         adc Y+1
0b3b: 85 fc     -         sta X+1	
0b3d: 18        -         clc
0b3e: a5 fb     -         lda X
0b40: 6d c5 0e  -         adc y	
0b43: 85 fb     -         sta X
0b45: 90 02     -         bcc out+2
0b47: e6 fc     - out:    inc X+1
0b49: a0 00     -         ldy #0
0b4b: b1 fb     -         lda (ZP1),y
0b4d: c9 20     -         cmp #DOT
0b4f: f0 04     -         beq shift
0b51: ca        - cont:   dex
0b52: 10 92     -         bpl each
0b54: 60        - out:    rts
0b55: 86 3f     - shift:  stx TEMPX									//save x
0b57: 86 47     -         stx VAR_A									//set index to VAR_A
0b59: ad db 0e  -         lda X
0b5c: 85 48     -         sta Y
0b5e: a9 cb     -         lda #<addr
0b60: 85 43     -         sta X
0b62: a9 0e     -         lda #>addr
0b64: 85 44     -         sta X+1
0b66: a9 02     -         lda #data_size
0b68: 85 49     -         sta VAR_C
0b6a: 20 cd 08  -         jsr SPLICE
0b6d: ad db 0e  -         lda X
0b70: 85 48     -         sta Y
0b72: a9 d3     -         lda #<addr
0b74: 85 43     -         sta X
0b76: a9 0e     -         lda #>addr
0b78: 85 44     -         sta X+1
0b7a: a9 02     -         lda #data_size
0b7c: 85 49     -         sta VAR_C
0b7e: 20 cd 08  -         jsr SPLICE
0b81: ce db 0e  -         dec candidates_length						//dec array length
0b84: a6 3f     -         ldx TEMPX									//restore x
0b86: 4c 51 0b  -         jmp cont									//return to loop
0b89: a5 02     - PUSH_REST_ON_STACK:lda ZP0										//index was stored in ZP0
0b8b: 85 47     -         sta VAR_A									//set index to VAR_A
0b8d: ad db 0e  -         lda X
0b90: 85 48     -         sta Y
0b92: a9 cb     -         lda #<addr
0b94: 85 43     -         sta X
0b96: a9 0e     -         lda #>addr
0b98: 85 44     -         sta X+1
0b9a: a9 02     -         lda #data_size
0b9c: 85 49     -         sta VAR_C
0b9e: 20 cd 08  -         jsr SPLICE
0ba1: ad db 0e  -         lda X
0ba4: 85 48     -         sta Y
0ba6: a9 d3     -         lda #<addr
0ba8: 85 43     -         sta X
0baa: a9 0e     -         lda #>addr
0bac: 85 44     -         sta X+1
0bae: a9 02     -         lda #data_size
0bb0: 85 49     -         sta VAR_C
0bb2: 20 cd 08  -         jsr SPLICE
0bb5: ce db 0e  -         dec candidates_length						//dec array length
0bb8: a2 00     -         ldx #0
0bba: a0 00     - each:   ldy #0
0bbc: 86 3f     -         stx TEMPX									//save x
0bbe: 8a        -         txa											//x = x *2	
0bbf: 0a        -         asl 
0bc0: aa        -         tax									
0bc1: bd cb 0e  -         lda candidates,x							//x
0bc4: 91 71     -         sta (STKPTR1),y
0bc6: c8        -         iny
0bc7: e8        -         inx
0bc8: bd cb 0e  -         lda candidates,x							//y
0bcb: 91 71     -         sta (STKPTR1),y
0bcd: 18        -         clc
0bce: a5 71     -         lda X
0bd0: 69 02     -         adc #C
0bd2: 85 71     -         sta X
0bd4: 90 02     -         bcc out+2
0bd6: e6 72     - out:    inc X+1
0bd8: 88        -         dey
0bd9: ca        -         dex
0bda: bd d3 0e  -         lda candidates_vectors,x					//x
0bdd: 91 71     -         sta (STKPTR1),y
0bdf: c8        -         iny
0be0: e8        -         inx
0be1: bd d3 0e  -         lda candidates_vectors,x					//y
0be4: 91 71     -         sta (STKPTR1),y
0be6: 18        -         clc
0be7: a5 71     -         lda X
0be9: 69 02     -         adc #C
0beb: 85 71     -         sta X
0bed: 90 02     -         bcc out+2
0bef: e6 72     - out:    inc X+1
0bf1: a6 3f     -         ldx TEMPX									//restore x
0bf3: e8        -         inx
0bf4: ec db 0e  -         cpx candidates_length
0bf7: d0 c1     -         bne each
0bf9: 60        - out:    rts		
0bfa: ad db 0e  - FILTER_IF_CLOSE_PRIMARY:lda candidates_length
0bfd: c9 01     -         cmp #1
0bff: b0 01     -         bcs start										//cont if 1 or more
0c01: 60        -         rts												//else exit, if no candidates
0c02: a9 cb     - start:  lda #<addr
0c04: 85 45     -         sta X
0c06: a9 0e     -         lda #>addr
0c08: 85 46     -         sta X+1
0c0a: a9 d3     -         lda #<addr
0c0c: 85 4b     -         sta X
0c0e: a9 0e     -         lda #>addr
0c10: 85 4c     -         sta X+1
0c12: ae db 0e  -         ldx candidates_length							//number of grids yet to check
0c15: ca        -         dex												//to zero offset
0c16: 8a        - each:   txa
0c17: 0a        -         asl												//double, because datasize is 2
0c18: a8        -         tay												//offset in y (zero based x * datasize)
0c19: b1 45     -         lda (BV3),y
0c1b: 8d c5 0e  -         sta grid_pointer
0c1e: b1 4b     -         lda (BV5),y
0c20: 8d c7 0e  -         sta direction_pointer
0c23: c8        -         iny
0c24: b1 45     -         lda (BV3),y
0c26: 8d c6 0e  -         sta grid_pointer+1
0c29: b1 4b     -         lda (BV5),y
0c2b: 8d c8 0e  -         sta direction_pointer+1
0c2e: 18        -         clc
0c2f: ad c5 0e  -         lda grid_pointer
0c32: 6d c7 0e  -         adc direction_pointer
0c35: 8d c9 0e  -         sta test_pointer
0c38: 18        -         clc
0c39: ad c6 0e  -         lda grid_pointer+1
0c3c: 6d c8 0e  -         adc direction_pointer+1
0c3f: 8d ca 0e  -         sta test_pointer+1
0c42: ad c1 0e  -         lda X
0c45: 85 fb     -         sta Y
0c47: ad c2 0e  -         lda X + 1
0c4a: 85 fc     -         sta Y + 1
0c4c: a9 00     -         lda #0
0c4e: 85 fe     -         sta ZP4				
0c50: ad ca 0e  -         lda grid+1		
0c53: 85 fd     -         sta ZP3
0c55: a0 03     -         ldy #03
0c57: 06 fd     - mul8:   asl X
0c59: 26 fe     -         rol X+1	
0c5b: 88        -         dey
0c5c: d0 f9     -         bne mul8
0c5e: 18        -         clc
0c5f: a5 fb     -         lda X
0c61: 65 fd     -         adc Y
0c63: 85 fb     -         sta X
0c65: 90 02     -         bcc skip
0c67: e6 fc     -         inc X+1
0c69: 18        - skip:   clc
0c6a: a5 fc     -         lda X+1
0c6c: 65 fe     -         adc Y+1
0c6e: 85 fc     -         sta X+1	
0c70: a0 02     -         ldy #02	
0c72: 06 fd     - mul32:  asl X
0c74: 26 fe     -         rol X+1	
0c76: 88        -         dey
0c77: d0 f9     -         bne mul32
0c79: 18        -         clc
0c7a: a5 fb     -         lda X
0c7c: 65 fd     -         adc Y
0c7e: 85 fb     -         sta X
0c80: 90 02     -         bcc skip
0c82: e6 fc     -         inc X+1
0c84: 18        - skip:   clc
0c85: a5 fc     -         lda X+1
0c87: 65 fe     -         adc Y+1
0c89: 85 fc     -         sta X+1	
0c8b: 18        -         clc
0c8c: a5 fb     -         lda X
0c8e: 6d c9 0e  -         adc y	
0c91: 85 fb     -         sta X
0c93: 90 02     -         bcc out+2
0c95: e6 fc     - out:    inc X+1
0c97: a0 00     -         ldy #0
0c99: b1 fb     -         lda (ZP1),y
0c9b: c9 20     -         cmp #DOT									//is dot? (empty)
0c9d: f0 07     -         beq shift									//yes
0c9f: ca        - cont:   dex
0ca0: 30 03     -         bmi out										//less than zero, stop
0ca2: 4c 16 0c  -         jmp each									//loop back, branch too far
0ca5: 60        - out:    rts
0ca6: 86 3f     - shift:  stx TEMPX									//save x
0ca8: 86 47     -         stx VAR_A									//set index to VAR_A
0caa: ad db 0e  -         lda X
0cad: 85 48     -         sta Y
0caf: a9 cb     -         lda #<addr
0cb1: 85 43     -         sta X
0cb3: a9 0e     -         lda #>addr
0cb5: 85 44     -         sta X+1
0cb7: a9 02     -         lda #data_size
0cb9: 85 49     -         sta VAR_C
0cbb: 20 cd 08  -         jsr SPLICE
0cbe: ad db 0e  -         lda X
0cc1: 85 48     -         sta Y
0cc3: a9 d3     -         lda #<addr
0cc5: 85 43     -         sta X
0cc7: a9 0e     -         lda #>addr
0cc9: 85 44     -         sta X+1
0ccb: a9 02     -         lda #data_size
0ccd: 85 49     -         sta VAR_C
0ccf: 20 cd 08  -         jsr SPLICE
0cd2: ce db 0e  -         dec candidates_length						//dec array length
0cd5: a6 3f     -         ldx TEMPX									//restore x
0cd7: 4c 9f 0c  -         jmp cont									//return to loop
0cda: ad db 0e  - FILTER_SIDE_PROXIMIY:lda candidates_length
0cdd: c9 01     -         cmp #1
0cdf: b0 01     -         bcs start										//cont if 1 or more
0ce1: 60        -         rts												//else exit, if no candidates
0ce2: a9 cb     - start:  lda #<addr
0ce4: 85 45     -         sta X
0ce6: a9 0e     -         lda #>addr
0ce8: 85 46     -         sta X+1
0cea: a9 d3     -         lda #<addr
0cec: 85 4b     -         sta X
0cee: a9 0e     -         lda #>addr
0cf0: 85 4c     -         sta X+1
0cf2: ae db 0e  -         ldx candidates_length							//number of grids yet to check
0cf5: ca        -         dex												//to zero offset
0cf6: 8a        - each:   txa
0cf7: 0a        -         asl												//double, because datasize is 2
0cf8: a8        -         tay												//offset in y (zero based x * datasize)
0cf9: b1 45     -         lda (BV3),y
0cfb: 8d c5 0e  -         sta grid_pointer
0cfe: b1 4b     -         lda (BV5),y
0d00: 8d c7 0e  -         sta direction_pointer
0d03: c8        -         iny
0d04: b1 45     -         lda (BV3),y
0d06: 8d c6 0e  -         sta grid_pointer+1
0d09: b1 4b     -         lda (BV5),y
0d0b: 8d c8 0e  -         sta direction_pointer+1
0d0e: a9 a2     -         lda #<addr
0d10: 85 50     -         sta X
0d12: a9 09     -         lda #>addr
0d14: 85 51     -         sta X+1
0d16: a9 dc     -         lda #<addr
0d18: 85 4e     -         sta X
0d1a: a9 0e     -         lda #>addr
0d1c: 85 4f     -         sta X+1
0d1e: a0 08     -         ldy #length											
0d20: 88        -         dey
0d21: b1 50     - copy:   lda (BV7),y
0d23: 91 4e     -         sta (BV9),y
0d25: 88        -         dey
0d26: 10 f9     -         bpl copy
0d28: a0 01     -         ldy #01											//y?
0d2a: b9 c7 0e  -         lda direction_pointer,y
0d2d: d0 01     -         bne ok											//if not zero, than this is right dimension
0d2f: 88        -         dey												//not y, but x
0d30: b9 c7 0e  - ok:     lda direction_pointer,y							//index of dimension now in y register
0d33: 99 dc 0e  -         sta proximity_vectors,y							//set sequence 1,1,0,0 on the right dimension, datasize=2
0d36: c8        -         iny
0d37: c8        -         iny
0d38: 99 dc 0e  -         sta proximity_vectors,y	
0d3b: c8        -         iny
0d3c: c8        -         iny
0d3d: a9 00     -         lda #0
0d3f: 99 dc 0e  -         sta proximity_vectors,y	
0d42: c8        -         iny
0d43: c8        -         iny
0d44: 99 dc 0e  -         sta proximity_vectors,y							//proximity vectors ready
0d47: a0 00     -         ldy #00
0d49: ad c5 0e  - repeat: lda grid_pointer
0d4c: 18        -         clc
0d4d: 79 dc 0e  -         adc proximity_vectors,y
0d50: 8d c9 0e  -         sta test_pointer
0d53: c8        -         iny
0d54: ad c6 0e  -         lda grid_pointer+1
0d57: 18        -         clc
0d58: 79 dc 0e  -         adc proximity_vectors,y
0d5b: 8d ca 0e  -         sta test_pointer+1								//next grid now in test_pointer
0d5e: 84 40     -         sty TEMPY										//save y
0d60: ad c1 0e  -         lda X
0d63: 85 fb     -         sta Y
0d65: ad c2 0e  -         lda X + 1
0d68: 85 fc     -         sta Y + 1
0d6a: a9 00     -         lda #0
0d6c: 85 fe     -         sta ZP4				
0d6e: ad ca 0e  -         lda grid+1		
0d71: 85 fd     -         sta ZP3
0d73: a0 03     -         ldy #03
0d75: 06 fd     - mul8:   asl X
0d77: 26 fe     -         rol X+1	
0d79: 88        -         dey
0d7a: d0 f9     -         bne mul8
0d7c: 18        -         clc
0d7d: a5 fb     -         lda X
0d7f: 65 fd     -         adc Y
0d81: 85 fb     -         sta X
0d83: 90 02     -         bcc skip
0d85: e6 fc     -         inc X+1
0d87: 18        - skip:   clc
0d88: a5 fc     -         lda X+1
0d8a: 65 fe     -         adc Y+1
0d8c: 85 fc     -         sta X+1	
0d8e: a0 02     -         ldy #02	
0d90: 06 fd     - mul32:  asl X
0d92: 26 fe     -         rol X+1	
0d94: 88        -         dey
0d95: d0 f9     -         bne mul32
0d97: 18        -         clc
0d98: a5 fb     -         lda X
0d9a: 65 fd     -         adc Y
0d9c: 85 fb     -         sta X
0d9e: 90 02     -         bcc skip
0da0: e6 fc     -         inc X+1
0da2: 18        - skip:   clc
0da3: a5 fc     -         lda X+1
0da5: 65 fe     -         adc Y+1
0da7: 85 fc     -         sta X+1	
0da9: 18        -         clc
0daa: a5 fb     -         lda X
0dac: 6d c9 0e  -         adc y	
0daf: 85 fb     -         sta X
0db1: 90 02     -         bcc out+2
0db3: e6 fc     - out:    inc X+1
0db5: a0 00     -         ldy #0
0db7: b1 fb     -         lda (ZP1),y
0db9: c9 20     -         cmp #DOT										//is dot? (empty)
0dbb: f0 0e     -         beq shift										//yes, shift on x
0dbd: a4 40     -         ldy TEMPY										//restore y
0dbf: c8        -         iny
0dc0: c0 08     -         cpy #08
0dc2: d0 85     -         bne repeat
0dc4: ca        - cont:   dex
0dc5: 30 03     -         bmi out										//less than zero, stop
0dc7: 4c f6 0c  -         jmp each										//loop back, branch too far
0dca: 60        - out:    rts
0dcb: 86 3f     - shift:  stx TEMPX									//save x
0dcd: 86 47     -         stx VAR_A									//set index to VAR_A
0dcf: ad db 0e  -         lda X
0dd2: 85 48     -         sta Y
0dd4: a9 cb     -         lda #<addr
0dd6: 85 43     -         sta X
0dd8: a9 0e     -         lda #>addr
0dda: 85 44     -         sta X+1
0ddc: a9 02     -         lda #data_size
0dde: 85 49     -         sta VAR_C
0de0: 20 cd 08  -         jsr SPLICE
0de3: ad db 0e  -         lda X
0de6: 85 48     -         sta Y
0de8: a9 d3     -         lda #<addr
0dea: 85 43     -         sta X
0dec: a9 0e     -         lda #>addr
0dee: 85 44     -         sta X+1
0df0: a9 02     -         lda #data_size
0df2: 85 49     -         sta VAR_C
0df4: 20 cd 08  -         jsr SPLICE
0df7: ce db 0e  -         dec candidates_length						//dec array length
0dfa: a6 3f     -         ldx TEMPX									//restore x
0dfc: 4c c4 0d  -         jmp cont									//return to loop
0dff: a5 71     - CANDIDATE_FROM_STACK:lda X
0e01: 38        -         sec
0e02: e9 02     -         sbc #C
0e04: 85 71     -         sta X
0e06: b0 02     -         bcs out+2
0e08: c6 72     - out:    dec X+1
0e0a: a0 00     -         ldy #0									//x
0e0c: b1 71     -         lda (STKPTR1),y
0e0e: 99 d3 0e  -         sta candidates_vectors,y
0e11: c8        -         iny										//y
0e12: b1 71     -         lda (STKPTR1),y
0e14: 99 d3 0e  -         sta candidates_vectors,y
0e17: a5 71     -         lda X
0e19: 38        -         sec
0e1a: e9 02     -         sbc #C
0e1c: 85 71     -         sta X
0e1e: b0 02     -         bcs out+2
0e20: c6 72     - out:    dec X+1
0e22: a0 00     -         ldy #0									//x
0e24: b1 71     -         lda (STKPTR1),y
0e26: 99 cb 0e  -         sta candidates,y
0e29: c8        -         iny										//y
0e2a: b1 71     -         lda (STKPTR1),y
0e2c: 99 cb 0e  -         sta candidates,y
0e2f: a9 01     -         lda #01
0e31: 8d db 0e  -         sta candidates_length
0e34: 60        - out:    rts
0e35: 20 aa 09  - MAZE:   jsr MAZE_FILL
0e38: 20 c5 09  - outer,P_LOOP:jsr MAZE_DOT
0e3b: 20 21 0a  -         jsr POINTERS_FROM_START
0e3e: 20 69 0a  -         jsr FILTER_IF_OUT
0e41: 20 d2 0a  -         jsr FILTER_IF_DOT
0e44: 20 fa 0b  -         jsr FILTER_IF_CLOSE_PRIMARY
0e47: 20 da 0c  -         jsr FILTER_SIDE_PROXIMIY
0e4a: ad db 0e  -         lda candidates_length						//check how many we have
0e4d: c9 00     -         cmp #00										//if zero break;
0e4f: f0 41     -         beq S_LOOP									//goto stack loop
0e51: c9 02     -         cmp #02										//if it is two or more
0e53: b0 05     -         bcs then									//go to else/then
0e55: a9 00     -         lda #0										//otherwise, index->0 in A									
0e57: 4c 6e 0e  -         jmp skip_else
0e5a: ad db 0e  - then:   lda candidates_length
0e5d: aa        -         tax
0e5e: ca        -         dex
0e5f: 86 02     -         stx ZP0
0e61: a5 02     -         lda X	
0e63: 85 fd     -         sta ZP3
0e65: a9 00     -         lda #0
0e67: 85 fe     -         sta ZP4
0e69: 20 6a 09  -         jsr rnd_X
0e6c: a5 14     -         lda WINT
0e6e: 85 02     - skip_else:sta ZP0										//store index in ZP0	
0e70: 0a        -         asl 										//datasize=2	
0e71: a8        -         tay											//offset in y
0e72: a9 cb     -         lda #<addr
0e74: 85 43     -         sta X
0e76: a9 0e     -         lda #>addr
0e78: 85 44     -         sta X+1
0e7a: b1 43     -         lda (BV1),y
0e7c: 8d c3 0e  -         sta maze_start
0e7f: c8        -         iny
0e80: b1 43     -         lda (BV1),y
0e82: 8d c4 0e  -         sta maze_start+1
0e85: ad db 0e  -         lda candidates_length
0e88: c9 02     -         cmp #02										//if there are 2 or more, selected has not been discarded yet
0e8a: 90 03     -         bcc repeat_P								//no, repeat loop
0e8c: 20 89 0b  -         jsr PUSH_REST_ON_STACK													
0e8f: 4c 38 0e  - repeat_P:jmp P_LOOP
0e92: a5 71     - S_LOOP: lda STKPTR1
0e94: c9 00     -         cmp #<STACK
0e96: d0 09     -         bne cont
0e98: a5 72     -         lda STKPTR2
0e9a: c9 c0     -         cmp #>STACK
0e9c: d0 03     -         bne cont
0e9e: 4c c0 0e  -         jmp quit									//stack pointer == STACK, stack is empty
0ea1: 20 ff 0d  - cont:   jsr CANDIDATE_FROM_STACK					//take on grid an its direction from stack
0ea4: 20 fa 0b  -         jsr FILTER_IF_CLOSE_PRIMARY					//recheck if they are still 'safe'
0ea7: 20 da 0c  -         jsr FILTER_SIDE_PROXIMIY					//in terms of proximity
0eaa: ad db 0e  -         lda candidates_length						//check if it is still ok
0ead: c9 00     -         cmp #00										//if zero break; 
0eaf: f0 e1     -         beq S_LOOP									//no, find another
0eb1: ad cb 0e  -         lda candidates								//set it to maze_start
0eb4: 8d c3 0e  -         sta maze_start
0eb7: ad cc 0e  -         lda candidates+1
0eba: 8d c4 0e  -         sta maze_start+1
0ebd: 4c 38 0e  -         jmp P_LOOP									//make next branch
0ec0: 60        - quit:   rts

[MAZE Memory]
0ec1: 40 00     - MAZE_memory,maze_memory_alloc:.word $0040 	//screen by default, safe
0ec3: 00 00     - maze_start:.word 0
0ec5: 00 00     - grid_pointer:.word 0
0ec7: 00 00     - direction_pointer:.word 0
0ec9: 00 00     - test_pointer:.word 0
0ecb: 00 00     - candidates:.fill 2,0
0ecd: 00 00     -         .fill 2,0
0ecf: 00 00     -         .fill 2,0
0ed1: 00 00     -         .fill 2,0
0ed3: 00 00     - candidates_vectors:.fill 2,0
0ed5: 00 00     -         .fill 2,0
0ed7: 00 00     -         .fill 2,0
0ed9: 00 00     -         .fill 2,0
0edb: 00        - candidates_length:.byte 0
0edc: 00 00     - proximity_vectors:.fill 2,0
0ede: 00 00     -         .fill 2,0
0ee0: 00 00     -         .fill 2,0
0ee2: 00 00     -         .fill 2,0
0ee4: 2e 20     - debug:  .text ". "
0ee6: 00        -         brk

[Subroutines]
0ee7: ad 1c 0f  - subs,irqcode:lda modeflag
0eea: f0 03     -         beq mode1
0eec: 4c 04 0f  -         jmp mode2
0eef: a9 01     - mode1:  lda #$01
0ef1: 8d 1c 0f  -         sta modeflag
0ef4: a9 06     -         lda #BLUE
0ef6: 8d 20 d0  -         sta BORDER
0ef9: a9 32     -         lda #startRaster
0efb: 8d 12 d0  -         sta RASTER_COUNTER
0efe: 0e 19 d0  -         asl INTERRUPT_REQUEST_REGISTER
0f01: 4c 31 ea  -         jmp IRQOUT
0f04: a9 00     - mode2:  lda #$00
0f06: 8d 1c 0f  -         sta modeflag
0f09: a9 0e     -         lda #LIGHTBLUE
0f0b: 8d 20 d0  -         sta BORDER
0f0e: a9 fa     -         lda #endRaster
0f10: 8d 12 d0  -         sta RASTER_COUNTER
0f13: 0e 19 d0  -         asl INTERRUPT_REQUEST_REGISTER
0f16: 68        -         pla
0f17: a8        -         tay
0f18: 68        -         pla
0f19: aa        -         tax
0f1a: 68        -         pla
0f1b: 40        -         rti

[Data]
0f1c: 00        - text,data,modeflag:.byte 0
0f1d: 00        - startX: .byte 0
0f1e: 00        - startY: .byte 0
